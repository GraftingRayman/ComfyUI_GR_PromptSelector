{"last_node_id": 51, "last_link_id": 48, "nodes": [{"id": 4, "type": "LoraLoaderModelOnly", "pos": [4740, -240], "size": {"0": 315, "1": 82}, "flags": {}, "order": 23, "mode": 0, "inputs": [{"name": "model", "type": "MODEL", "link": 1}], "outputs": [{"name": "MODEL", "type": "MODEL", "links": [2], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "LoraLoaderModelOnly"}, "widgets_values": ["ip-adapter-faceid-plusv2_sd15_lora.safetensors", 1]}, {"id": 9, "type": "Anything Everywhere", "pos": [4800, -60], "size": {"0": 240, "1": 60}, "flags": {}, "order": 17, "mode": 0, "inputs": [{"name": "IPADAPTER", "type": "*", "link": 6, "color_on": ""}], "title": "IPAadapter Everywhere", "properties": {"group_restricted": false, "color_restricted": false, "Node name for S&R": "Anything Everywhere"}, "widgets_values": ["{'image_proj': {'proj.0.weight': tensor([[ 0.0247, -0.0113, -0.0276,  ..., -0.0316,  0.0359, -0.0495],\n        [ 0.0196,  0.0128, -0.0555,  ...,  0.0481, -0.0486, -0.0173],\n        [-0.0402,  0.0024, -0.0332,  ..., -0.0943,  0.0126,  0.0450],\n        ...,\n        [-0.1112, -0.0075,  0.0141,  ...,  0.0582,  0.0253,  0.0004],\n        [ 0.0481, -0.0420,  0.0203,  ...,  0.1025, -0.0098, -0.0918],\n        [-0.0129, -0.0557,  0.0528,  ..., -0.0301, -0.0118, -0.0273]], dtype=torch.float16), 'proj.0.bias': tensor([ 0.0098, -0.0213,  0.0003,  ...,  0.0134, -0.0158, -0.0216], dtype=torch.float16), 'proj.2.weight': tensor([[ 0.0236,  0.0237, -0.0525,  ...,  0.0217,  0.0224,  0.0496],\n        [ 0.0004, -0.0344, -0.0250,  ..., -0.0364, -0.0165, -0.0207],\n        [ 0.0125,  0.0262,  0.0002,  ..., -0.0206,  0.0230,  0.0089],\n        ...,\n        [ 0.0092, -0.0508, -0.0059,  ..., -0.0140,  0.0518, -0.0222],\n        [ 0.0687, -0.0341, -0.0788,  ..., -0.0443, -0.0566, -0.0299],\n        [-0.0472, -0.0559, -0.0098,  ..., -0.0134,  0.0651, -0.0255]], dtype=torch.float16), 'proj.2.bias': tensor([-0.0150,  0.0126, -0.0102,  ..., -0.0150,  0.0083,  0.0208], dtype=torch.float16), 'norm.weight': tensor([0.6450, 0.5938, 0.5840, 0.6499, 0.6270, 0.6772, 0.6016, 0.5483, 0.6309, 0.6528, 0.6343, 0.6240, 0.6294, 0.6543, 0.6514, 0.6289, 0.6191, 0.6479, 0.5977, 0.5635, 0.6758, 0.6431, 0.6353, 0.6274, 0.6206, 0.6523, 0.6318, 0.5938, 0.6533, 0.6318, 0.5913, 0.5874, 0.5898, 0.6240, 0.6313, 0.6963, 0.6919, 0.6519, 0.6045,\n        0.6396, 0.6255, 0.6655, 0.6201, 0.6035, 0.6045, 0.6748, 0.6162, 0.5972, 0.5972, 0.6621, 0.6167, 0.6099, 0.6440, 0.5977, 0.6499, 0.6377, 0.5728, 0.6733, 0.6641, 0.6318, 0.6372, 0.6162, 0.6719, 0.7002, 0.6284, 0.6650, 0.6323, 0.6382, 0.6064, 0.5757, 0.6343, 0.6597, 0.6577, 0.6968, 0.6533, 0.6772, 0.6201, 0.5864,\n        0.6465, 0.6021, 0.6401, 0.5786, 0.6597, 0.6514, 0.6416, 0.6777, 0.6714, 0.6211, 0.6685, 0.5898, 0.6484, 0.5908, 0.5928, 0.6196, 0.6553, 0.6035, 0.6416, 0.5732, 0.6865, 0.6670, 0.6338, 0.6094, 0.6123, 0.6846, 0.6533, 0.6313, 0.6436, 0.6348, 0.5962, 0.6372, 0.5864, 0.6362, 0.6704, 0.6177, 0.6304, 0.6553, 0.6016,\n        0.6538, 0.6294, 0.5972, 0.6255, 0.5913, 0.6235, 0.6060, 0.6274, 0.6377, 0.5723, 0.6313, 0.6582, 0.6187, 0.6069, 0.5952, 0.6787, 0.6562, 0.6572, 0.6377, 0.6440, 0.6787, 0.6211, 0.6191, 0.6123, 0.6230, 0.6450, 0.6123, 0.6260, 0.6465, 0.6191, 0.6416, 0.6675, 0.6538, 0.6763, 0.6548, 0.5933, 0.6118, 0.5825, 0.7354,\n        0.6597, 0.6421, 0.6479, 0.6318, 0.7026, 0.5835, 0.6416, 0.4976, 0.5898, 0.5796, 0.5767, 0.5928, 0.6465, 0.6699, 0.6426, 0.6411, 0.6250, 0.6167, 0.6113, 0.6172, 0.6055, 0.6255, 0.6147, 0.5996, 0.6514, 0.6631, 0.6265, 0.5942, 0.6694, 0.6323, 0.6440, 0.5884, 0.5908, 0.6328, 0.6289, 0.6284, 0.6245, 0.6147, 0.6045,\n        0.5718, 0.5801, 0.5923, 0.5581, 0.6782, 0.5859, 0.6519, 0.6274, 0.6606, 0.6465, 0.6562, 0.6182, 0.6602, 0.6621, 0.6870, 0.5957, 0.2013, 0.6235, 0.6294, 0.2688, 0.6567, 0.6680, 0.6211, 0.6494, 0.6426, 0.6079, 0.5938, 0.6396, 0.6660, 0.6562, 0.6348, 0.6968, 0.5859, 0.6372, 0.5840, 0.6069, 0.6284, 0.6504, 0.6660,\n        0.6187, 0.5776, 0.6348, 0.6680, 0.7046, 0.6221, 0.6450, 0.5078, 0.6250, 0.6318, 0.6567, 0.6494, 0.6157, 0.6260, 0.6318, 0.6455, 0.5732, 0.6675, 0.6030, 0.6191, 0.4446, 0.6265, 0.6348, 0.6543, 0.5151, 0.6426, 0.6055, 0.0934, 0.6284, 0.6123, 0.6523, 0.4749, 0.6353, 0.6558, 0.6167, 0.6333, 0.5962, 0.6143, 0.6372,\n        0.6343, 0.6318, 0.6743, 0.6167, 0.6367, 0.6221, 0.6104, 0.6313, 0.5684, 0.6641, 0.6440, 0.5435, 0.6206, 0.6514, 0.6260, 0.5957, 0.6245, 0.6279, 0.6040, 0.6025, 0.6528, 0.6230, 0.6309, 0.6318, 0.6504, 0.6191, 0.6523, 0.6240, 0.6611, 0.6016, 0.2769, 0.6182, 0.6421, 0.6567, 0.6172, 0.6543, 0.5649, 0.5918, 0.2294,\n        0.5454, 0.6299, 0.6855, 0.6250, 0.6250, 0.6670, 0.6587, 0.6177, 0.6299, 0.6260, 0.6040, 0.6108, 0.7383, 0.5952, 0.6699, 0.5708, 0.6460, 0.5986, 0.2505, 0.6401, 0.6455, 0.6196, 0.6309, 0.6338, 0.6196, 0.5679, 0.6323, 0.6196, 0.6001, 0.6348, 0.6050, 0.6421, 0.6436, 0.5903, 0.6284, 0.6387, 0.6655, 0.6221, 0.6680,\n        0.6719, 0.6260, 0.6460, 0.6416, 0.6504, 0.6196, 0.6138, 0.6665, 0.6689, 0.6235, 0.6338, 0.6636, 0.6108, 0.6470, 0.4399, 0.6675, 0.6152, 0.6016, 0.6274, 0.5029, 0.6235, 0.5825, 0.6201, 0.6519, 0.5840, 0.6250, 0.5303, 0.6084, 0.6006, 0.6152, 0.6079, 0.6265, 0.6704, 0.6196, 0.6665, 0.6538, 0.5850, 0.6079, 0.6479,\n        0.6353, 0.6299, 0.6099, 0.5791, 0.6494, 0.5884, 0.6577, 0.6465, 0.6714, 0.6621, 0.5635, 0.6167, 0.6128, 0.6675, 0.5928, 0.6206, 0.6602, 0.5859, 0.6660, 0.6567, 0.6436, 0.5259, 0.6030, 0.6392, 0.2898, 0.4231, 0.6108, 0.6729, 0.6392, 0.6367, 0.6562, 0.6299, 0.6123, 0.6509, 0.6182, 0.6216, 0.6890, 0.6460, 0.6401,\n        0.6665, 0.5884, 0.6621, 0.6284, 0.6577, 0.6821, 0.6499, 0.6470, 0.6221, 0.6846, 0.6479, 0.6147, 0.6274, 0.6011, 0.7974, 0.6226, 0.6333, 0.6157, 0.6626, 0.6274, 0.6079, 0.6006, 0.6934, 0.6558, 0.6060, 0.6172, 0.6460, 0.5278, 0.6255, 0.6353, 0.6260, 0.7095, 0.6118, 0.6724, 0.6382, 0.6309, 0.6201, 0.6157, 0.6240,\n        0.6367, 0.6973, 0.6489, 0.5947, 0.6475, 0.6196, 0.5664, 0.6704, 0.6245, 0.6489, 0.6289, 0.6816, 0.6187, 0.6255, 0.6201, 0.7012, 0.6147, 0.6675, 0.6206, 0.6689, 0.6118, 0.6836, 0.5679, 0.6001, 0.6445, 0.5757, 0.6025, 0.6396, 0.6367, 0.7212, 0.5894, 0.6812, 0.6055, 0.5938, 0.6387, 0.5801, 0.6367, 0.6548, 0.6455,\n        0.5967, 0.6118, 0.6299, 0.6426, 0.6338, 0.6606, 0.6626, 0.6304, 0.6465, 0.6128, 0.6572, 0.5737, 0.6670, 0.5933, 0.5771, 0.2396, 0.6636, 0.6030, 0.6230, 0.5776, 0.6274, 0.6406, 0.5889, 0.6250, 0.0776, 0.5864, 0.6445, 0.6240, 0.6587, 0.5874, 0.5996, 0.5820, 0.6387, 0.6372, 0.6177, 0.6338, 0.5898, 0.6270, 0.5762,\n        0.6411, 0.6265, 0.5742, 0.6582, 0.6265, 0.6357, 0.5933, 0.6558, 0.6831, 0.6494, 0.6377, 0.6392, 0.6758, 0.6206, 0.6011, 0.6069, 0.6025, 0.6470, 0.6377, 0.6641, 0.6875, 0.5830, 0.5879, 0.5898, 0.6440, 0.6240, 0.6230, 0.6494, 0.6533, 0.6255, 0.6255, 0.6387, 0.6318, 0.5576, 0.6636, 0.6309, 0.6089, 0.6851, 0.6328,\n        0.5171, 0.6377, 0.6172, 0.6289, 0.6655, 0.6069, 0.6167, 0.6880, 0.6182, 0.6411, 0.6108, 0.6006, 0.6475, 0.6084, 0.6719, 0.6646, 0.5781, 0.6089, 0.5977, 0.6440, 0.5830, 0.6074, 0.5962, 0.6152, 0.6196, 0.5498, 0.5898, 0.6099, 0.5645, 0.5864, 0.6602, 0.6406, 0.5640, 0.5698, 0.5845, 0.5840, 0.6367, 0.5801, 0.6382,\n        0.6401, 0.5854, 0.6709, 0.6006, 0.6440, 0.6406, 0.6382, 0.6694, 0.6396, 0.5444, 0.5898, 0.6655, 0.6055, 0.6431, 0.6577, 0.6279, 0.5435, 0.6309, 0.6660, 0.6143, 0.6514, 0.6040, 0.5854, 0.6367, 0.5752, 0.6084, 0.6704, 0.6460, 0.6348, 0.7100, 0.6357, 0.6284, 0.6143, 0.5649, 0.5679, 0.6758, 0.6011, 0.6260, 0.5981,\n        0.6401, 0.6304, 0.6392, 0.5771, 0.6274, 0.5762, 0.6011, 0.6655, 0.6641, 0.6177, 0.5947, 0.6113, 0.5991, 0.6167, 0.6138, 0.6338, 0.6069, 0.6104, 0.5474, 0.6929, 0.6460, 0.6104, 0.6406, 0.5967, 0.5723, 0.6323, 0.6572, 0.6475, 0.6343, 0.5957, 0.6328, 0.6245, 0.6592, 0.6348, 0.6201, 0.6929, 0.6113, 0.6670, 0.5581,\n        0.6538, 0.6328, 0.6094, 0.6406, 0.6807, 0.6528, 0.6079, 0.6523, 0.6450, 0.6255, 0.6323, 0.6753, 0.5786, 0.6318, 0.5708, 0.6226, 0.6567, 0.6426, 0.6289, 0.5693, 0.6025, 0.5757, 0.6255, 0.5884, 0.6021, 0.6182, 0.5854, 0.5938, 0.6636, 0.6704, 0.6416, 0.6909, 0.6299, 0.6177, 0.6250, 0.5996, 0.6606, 0.6636, 0.5537,\n        0.6357, 0.5840, 0.6392, 0.5996, 0.6035, 0.6045, 0.6284, 0.6416, 0.6421, 0.6455, 0.6201, 0.6133, 0.6060, 0.6846, 0.6514, 0.6074, 0.6328, 0.6318, 0.6011, 0.5859, 0.6157, 0.6367, 0.6465, 0.6191, 0.2517, 0.6509, 0.6450], dtype=torch.float16), 'norm.bias': tensor([ 7.3385e-04, -2.4242e-03, -8.8959e-03, -3.4088e-02,  1.8215e-03,  2.9874e-04,  2.1896e-02, -2.7725e-02,  5.9357e-03,  1.4084e-02, -5.0049e-02,  6.2294e-03, -5.0049e-02, -5.3902e-03,  6.3324e-03,  7.6246e-04,  1.0086e-02, -4.3854e-02, -8.3847e-03,  4.2206e-02, -4.5280e-03, -5.0201e-02,  2.9053e-02, -7.8964e-03,\n         3.9581e-02,  8.9111e-03, -1.1581e-02, -1.2329e-02, -5.8563e-02,  5.0774e-03,  2.4017e-02, -2.1667e-02,  4.4617e-02,  1.3908e-02,  1.4877e-02, -2.9648e-02,  3.8086e-02, -3.5980e-02, -6.4182e-04,  5.3978e-03, -1.2161e-02,  4.5563e-02,  2.4841e-02,  7.1678e-03, -2.0355e-02, -1.8555e-02,  2.4673e-02, -3.2318e-02,\n        -6.1188e-03,  4.5197e-02, -1.9455e-02, -2.1957e-02, -8.5831e-03, -1.0017e-02, -1.5915e-02,  1.0300e-02, -2.2392e-03,  1.7548e-02, -3.1006e-02, -1.7975e-02,  2.4628e-02,  5.7831e-03, -5.5389e-02,  2.2018e-02,  7.7820e-03, -1.6357e-02,  1.8829e-02, -2.0523e-02, -9.7656e-03, -2.5589e-02,  1.6830e-02, -1.6327e-02,\n        -2.5005e-03,  6.9580e-03,  1.5350e-02, -2.2064e-02,  4.5410e-02, -2.4090e-03, -1.3710e-02,  1.6220e-02, -4.5288e-02, -1.3714e-03, -1.0773e-02,  1.8616e-02,  1.5060e-02,  2.9510e-02,  3.3569e-02, -1.9638e-02,  1.0300e-02,  1.1742e-02, -7.0992e-03, -2.1484e-02, -1.2825e-02, -4.3091e-02,  1.0918e-02,  2.3804e-02,\n         1.3885e-02, -9.6359e-03, -1.9684e-02,  1.6098e-02,  7.5798e-03, -8.9340e-03, -1.0956e-02, -4.6959e-03, -3.7689e-02,  3.0991e-02, -6.4163e-03, -7.4387e-03, -7.7934e-03, -4.3640e-02, -2.4445e-02, -1.8677e-02,  5.5008e-03, -1.4877e-02, -2.7481e-02,  1.1253e-02, -9.3002e-03,  2.1500e-02, -4.1962e-03, -5.9547e-03,\n         2.0569e-02,  3.2715e-02,  1.4420e-02,  6.5727e-03,  4.1718e-02, -1.8372e-02, -2.0599e-02, -7.7744e-03, -4.9469e-02,  8.6212e-03,  1.3924e-02, -2.5665e-02,  2.5528e-02,  3.1185e-03,  6.8703e-03, -7.3318e-03,  2.2316e-03, -6.1340e-02, -3.1311e-02,  6.4774e-03, -1.4595e-02, -2.3193e-02,  7.3090e-03, -3.9185e-02,\n         3.8013e-03,  1.0773e-02,  2.4033e-03, -1.2672e-02, -5.0316e-03, -3.5305e-03, -9.2850e-03, -1.7700e-02,  2.5955e-02, -3.4760e-02, -2.3529e-02,  3.9978e-02, -1.2146e-02, -4.6387e-03, -5.1086e-02, -6.5079e-03, -5.7983e-02,  6.9237e-04,  2.0493e-02,  7.5989e-03, -1.3359e-02,  2.0813e-02,  1.6022e-02, -1.1543e-02,\n        -3.4149e-02, -3.3844e-02,  4.6539e-03, -2.7573e-02, -1.7471e-02, -4.1504e-02, -5.9204e-03, -1.0704e-02,  3.1433e-02, -1.5625e-02, -2.9282e-02,  3.2593e-02, -9.8953e-03, -2.8061e-02,  2.6947e-02, -2.1271e-02, -3.7537e-02, -2.0462e-02, -6.3599e-02,  9.4238e-02, -1.2108e-02,  1.2245e-02,  5.6152e-03,  5.0926e-03,\n        -1.2253e-02, -2.1454e-02, -4.8447e-03, -1.8454e-03, -2.9984e-02,  2.0866e-03, -1.1673e-02,  1.9455e-02, -2.7405e-02,  1.9165e-02, -3.7994e-02,  3.1769e-02, -3.7811e-02, -1.0361e-02,  1.5083e-02,  2.5158e-03,  1.5640e-02, -1.0681e-02, -9.3994e-03,  7.9041e-02, -6.2294e-03,  3.0045e-02, -1.2164e-01, -4.7188e-03,\n         1.2375e-02, -2.1515e-02, -2.7069e-02,  2.0569e-02, -5.1842e-03, -7.8354e-03, -2.5597e-03, -2.9572e-02, -1.5289e-02,  1.2329e-02, -2.1133e-02, -3.7079e-02,  3.8879e-02, -1.5533e-02, -1.2764e-02, -3.1464e-02, -1.8784e-02,  1.4290e-02,  7.2021e-03, -8.1863e-03, -6.3171e-03,  7.4501e-03,  1.1292e-02, -2.5375e-02,\n        -3.5553e-02,  1.9872e-04, -6.1836e-03, -3.6640e-03, -7.1564e-03, -1.7868e-02,  1.3649e-02, -5.1971e-02,  9.7122e-03, -4.0955e-02, -4.9896e-03, -3.3417e-03, -4.5280e-03, -3.1174e-02, -2.6154e-02,  2.1957e-02,  1.1230e-02,  1.4000e-02, -6.0511e-04,  1.3855e-02,  7.3385e-04, -2.5732e-01, -7.5226e-03,  1.1887e-02,\n        -1.0786e-03, -4.8523e-02,  2.2945e-03, -2.7969e-02,  7.5607e-03, -1.8188e-02,  5.2490e-03, -1.8448e-02,  8.1711e-03, -1.6907e-02, -3.5156e-02, -1.9226e-02, -1.5762e-02,  3.0537e-03, -1.4481e-02, -1.8768e-02,  9.5701e-04,  5.5054e-02, -3.4058e-02, -9.7733e-03, -3.2867e-02,  6.1493e-03, -1.9592e-02,  3.8544e-02,\n         8.4839e-03,  8.8501e-03, -2.1164e-02,  2.6413e-02,  8.3694e-03, -3.2444e-03, -2.1759e-02,  6.3820e-03, -1.6031e-03, -4.0222e-02, -2.0126e-02, -7.3700e-03, -1.1063e-02,  3.9864e-03, -7.4883e-03,  1.0822e-01, -2.0714e-03,  9.2316e-03, -5.5084e-03, -7.0953e-03, -9.7656e-03,  4.4403e-02,  2.7878e-02,  5.0323e-02,\n         6.3038e-04,  2.0874e-02, -2.9755e-02, -1.5625e-02,  2.0157e-02, -2.0630e-02,  1.8311e-02,  1.2169e-02, -2.1820e-02,  1.1368e-02, -2.6584e-05,  1.9501e-02,  6.8909e-02,  1.8036e-02, -4.0131e-02,  2.8477e-03, -3.5797e-02, -3.6041e-02, -1.1896e-01,  3.1799e-02, -2.9465e-02,  2.1210e-02, -1.0014e-03,  4.8752e-03,\n        -4.0314e-02,  1.0048e-02, -4.9820e-03, -2.3178e-02,  7.9575e-03,  2.7725e-02,  1.8997e-02, -3.4698e-02, -1.0155e-02, -5.1498e-03,  1.9699e-02,  9.2850e-03, -9.5291e-03,  2.3605e-02,  3.5583e-02, -1.1841e-02, -5.4321e-03,  4.6173e-02, -4.6814e-02, -4.8737e-02,  8.8577e-03, -1.1879e-02,  1.8616e-02, -3.2387e-03,\n         5.8517e-03, -1.0628e-02,  2.2934e-02, -3.3783e-02, -1.1063e-02, -7.6771e-04,  3.1395e-03, -9.4604e-03, -1.5621e-03, -2.8564e-02, -2.7084e-02, -2.7771e-02,  4.0558e-02,  5.3177e-03, -9.7580e-03, -1.2779e-02,  1.3222e-02, -2.5879e-02, -2.1393e-02, -1.0841e-02, -2.4460e-02,  5.4855e-03,  3.1021e-02,  7.5226e-03,\n         2.7344e-02, -1.3664e-02,  2.7786e-02, -2.8488e-02, -1.1238e-02, -8.0948e-03,  4.0283e-02,  2.9602e-02,  3.5858e-03, -1.1909e-02,  2.9926e-03, -3.3684e-03,  3.9398e-02,  7.1487e-03, -4.9622e-02, -9.7809e-03, -3.4576e-02, -2.8896e-03, -3.5706e-02, -1.0376e-02,  5.1804e-03, -2.9831e-02,  2.9251e-02,  1.1002e-02,\n        -4.8943e-03,  2.4933e-02,  4.1504e-02, -1.4671e-02,  8.6288e-03,  7.3120e-02,  1.4819e-01,  3.6530e-02,  9.8267e-03, -2.5192e-02, -1.5343e-02, -6.0364e-02,  3.4668e-02, -1.2978e-02, -2.7145e-02, -1.7883e-02, -1.0090e-03, -1.4267e-02,  1.8265e-02, -3.3386e-02,  8.2626e-03, -2.0580e-03,  2.2675e-02, -1.8463e-02,\n         1.8539e-02,  4.1626e-02, -1.8250e-02,  1.2962e-02, -5.8289e-02,  4.1962e-02, -2.9922e-02, -8.3008e-03, -5.3192e-02,  2.1545e-02, -3.7811e-02,  4.4250e-03, -8.6823e-03, -1.7868e-02,  3.6740e-04,  5.9395e-03, -1.2596e-02, -2.8057e-03, -3.2318e-02, -3.0502e-02, -1.8555e-02,  2.8488e-02,  2.1820e-03, -1.8311e-02,\n         1.2466e-02,  2.7664e-02, -5.3329e-03, -3.1128e-02,  2.1988e-02,  3.1204e-02, -9.0790e-03,  2.8015e-02, -2.1912e-02, -2.4796e-02,  3.9444e-03, -2.0248e-02,  6.0005e-03,  1.5404e-02, -2.0905e-02, -2.4658e-02,  2.0187e-02,  1.4191e-02,  2.3193e-02, -2.2263e-02,  2.0981e-02,  3.3903e-04, -3.7659e-02,  4.1626e-02,\n        -6.0272e-03, -2.3575e-02, -3.3245e-03, -3.3661e-02,  5.0995e-02, -2.5725e-04,  7.4425e-03, -4.0970e-03, -5.4932e-02, -6.6795e-03,  1.6891e-02, -1.3321e-02, -9.2621e-03, -7.5455e-03,  5.2414e-03, -3.6285e-02, -5.4504e-02, -1.6266e-02, -2.3544e-02, -4.8920e-02,  6.7673e-03,  5.8380e-02, -9.1248e-03, -1.9012e-02,\n        -4.8676e-02, -3.2463e-03, -9.9564e-03,  1.3474e-02, -2.0254e-04,  2.7603e-02,  9.9106e-03, -9.3307e-03,  6.0883e-03,  7.7095e-03, -1.1253e-03, -1.7761e-02, -1.6571e-02,  1.5821e-03, -2.8133e-03,  7.7171e-03,  1.3000e-02, -2.6260e-02, -1.4258e-01, -7.1793e-03, -3.4607e-02, -1.1093e-02, -4.7684e-03,  1.0956e-02,\n         1.7059e-02,  2.0050e-02,  3.4332e-02,  3.2886e-01,  7.0229e-03, -8.6517e-03, -4.2267e-02, -3.2257e-02, -7.5569e-03,  6.4697e-03, -1.1383e-02, -2.4841e-02, -2.8946e-02,  9.3536e-03,  1.7509e-03,  5.5542e-03, -1.5099e-02,  1.4771e-02, -1.2299e-02,  1.7792e-02,  2.9816e-02, -1.4671e-02, -1.9806e-02, -3.3813e-02,\n        -1.1932e-02,  1.9958e-02, -2.8458e-02,  2.5574e-02, -1.1948e-02, -7.5102e-04, -3.9062e-02, -2.7985e-02,  3.3817e-03,  1.5602e-03, -1.0666e-02,  8.1863e-03,  6.8512e-03,  2.4155e-02, -2.6382e-02,  1.6846e-02,  1.1505e-02, -1.8005e-02,  5.2185e-03,  1.3466e-02, -1.7061e-03, -6.0616e-03, -1.8356e-02,  1.3367e-02,\n        -2.6932e-03, -4.7264e-03,  8.7585e-03,  1.1894e-02,  1.0559e-02,  2.1683e-02,  3.4618e-03,  2.9812e-03,  2.3651e-03,  1.6281e-02, -8.3160e-03, -1.3702e-02,  2.2736e-02,  1.0460e-02, -3.1830e-02,  2.3849e-02, -6.5899e-04,  3.4637e-02, -6.6566e-03, -3.2654e-02,  3.1624e-03, -2.2354e-02, -2.9602e-02, -1.0910e-02,\n        -3.2471e-02, -3.4454e-02, -2.5742e-02, -5.1613e-03, -2.2324e-02, -2.4750e-02,  4.7699e-02,  1.6693e-02,  9.3613e-03, -7.7553e-03, -3.7170e-02,  6.1073e-03, -3.0380e-02, -7.7209e-03, -5.2002e-02,  1.4849e-03,  6.4850e-03, -9.0408e-03,  1.8265e-02,  9.5139e-03, -8.7509e-03, -1.8539e-02, -5.6419e-03,  1.2314e-02,\n        -3.8177e-02, -6.0349e-03, -3.3142e-02,  2.9282e-02, -4.5685e-02,  5.4245e-03, -2.5436e-02, -2.1790e-02,  2.5192e-02, -2.7885e-03, -8.7280e-03, -1.4191e-02,  3.0304e-02, -2.6184e-02, -2.3556e-03,  7.1068e-03, -2.9736e-03, -1.9379e-02, -1.0773e-02, -1.9653e-02,  7.0610e-03,  1.5839e-02, -8.4991e-03, -2.0859e-02,\n         1.2875e-03,  1.4458e-02,  2.4673e-02, -2.2125e-02, -1.6602e-02, -2.4109e-02,  1.1292e-03,  1.4633e-02, -2.1942e-02, -7.3891e-03, -1.6281e-02,  3.6144e-03, -3.6621e-02,  3.8357e-03, -1.7380e-02,  2.7466e-02,  1.8051e-02, -2.9175e-02,  3.2959e-02,  3.0106e-02,  2.3804e-02, -1.1436e-02, -1.3000e-02, -2.7204e-04,\n         4.1504e-03, -4.8920e-02,  2.2934e-02,  9.8343e-03, -3.1490e-03, -5.5695e-03, -1.2268e-02, -6.2332e-03,  7.8087e-03, -1.8311e-02,  2.8854e-02, -8.7967e-03, -3.5034e-02,  2.0111e-02, -5.8861e-03, -2.3026e-02, -1.8021e-02,  1.8358e-04, -5.2643e-02,  1.1597e-02,  1.9470e-02, -9.7961e-03, -4.1565e-02, -4.1016e-02,\n        -1.1177e-02, -2.2583e-02,  1.4122e-02,  4.1382e-02, -8.2855e-03,  2.0340e-02,  1.1587e-03, -4.7913e-02, -2.3865e-02,  4.8904e-03,  3.3112e-02, -1.1200e-02,  2.5833e-02, -1.5808e-02,  8.7433e-03,  1.4465e-02,  3.4180e-03,  3.2013e-02, -8.7357e-03, -2.0027e-03, -8.3208e-05, -2.2469e-03,  1.0681e-02, -5.6580e-02,\n        -3.1799e-02, -1.9333e-02,  5.9723e-02,  5.9586e-03,  1.6907e-02,  2.6489e-02,  2.5543e-02, -2.5223e-02, -7.6408e-03,  1.6052e-02,  1.5312e-02, -4.4937e-03, -2.0981e-02, -1.2219e-04, -7.6332e-03, -4.3060e-02,  1.1391e-02,  9.7809e-03, -6.5231e-03,  2.4887e-02, -2.5620e-02, -1.1032e-02, -5.0323e-02, -3.0075e-02,\n        -2.1957e-02, -2.4246e-02, -5.3864e-03, -1.1627e-02,  4.8370e-03, -3.0766e-03,  2.4399e-02, -6.2714e-03,  2.6947e-02, -1.6006e-02,  1.4328e-02,  1.3824e-02,  7.4348e-03,  2.6947e-02,  3.3283e-04, -2.0111e-02, -1.0384e-02, -2.4567e-02,  1.9882e-02,  9.3002e-03,  2.2064e-02,  4.5044e-02, -2.0538e-02, -9.6664e-03],\n       dtype=torch.float16), 'perceiver_resampler.proj_in.weight': tensor([[ 0.0016,  0.0183,  0.0078,  ..., -0.0225,  0.0149,  0.0149],\n        [-0.0461, -0.0285, -0.0263,  ..., -0.0616, -0.0199,  0.0468],\n        [-0.0015, -0.0100, -0.0414,  ...,  0.0117, -0.0006,  0.0171],\n        ...,\n        [ 0.0208, -0.0064, -0.0189,  ...,  0.0435,  0.0561,  0.0537],\n        [-0.0318, -0.0083, -0.0089,  ..., -0.0413, -0.0336,  0.0226],\n        [-0.0257,  0.0165,  0.0391,  ...,  0.0706,  0.0294,  0.0717]], dtype=torch.float16), 'perceiver_resampler.proj_in.bias': tensor([-9.3126e-04, -1.6769e-02,  2.9846e-02, -1.1375e-02, -2.8400e-03, -2.2842e-02,  6.0539e-03,  3.9330e-03, -2.5040e-02, -2.3560e-02,  2.7752e-03,  1.8524e-02,  8.2626e-03,  5.2567e-03,  7.2441e-03, -1.7120e-02,  1.3626e-02, -1.7792e-02,  5.0735e-03, -1.7334e-02,  2.7252e-02, -2.6417e-03,  2.9205e-02, -1.2772e-02,\n         2.5375e-02,  2.1561e-02, -2.1973e-02, -2.3174e-04, -1.9026e-03, -8.2169e-03,  9.3918e-03,  2.2526e-03, -9.7961e-03,  7.8506e-03,  1.2886e-02, -4.5624e-03,  9.9564e-03, -4.2267e-03,  9.6359e-03, -8.0032e-03,  1.2192e-02,  7.0724e-03,  1.5488e-02,  4.6539e-03,  2.0660e-02, -2.3392e-02, -4.5242e-03,  7.4043e-03,\n        -7.7171e-03,  4.8332e-03,  1.7471e-02,  1.9638e-02,  1.3969e-02,  2.9373e-03,  7.8201e-03, -1.4572e-03,  1.2505e-02,  3.0689e-03,  1.7639e-02, -1.0214e-03, -6.8436e-03, -3.1464e-02,  1.6479e-02, -9.1858e-03, -1.0529e-02, -1.4313e-02, -8.9188e-03,  8.4543e-04, -6.6795e-03,  3.4637e-02,  2.5360e-02, -3.9177e-03,\n         5.1079e-03,  1.4534e-02, -2.6505e-02, -2.0084e-03, -9.6817e-03, -6.4583e-03, -2.6047e-02, -9.5444e-03, -1.7578e-02, -1.2558e-02,  1.8415e-03, -4.5166e-03, -1.6037e-02, -4.6654e-03, -7.2823e-03,  1.9867e-02,  1.4748e-02,  2.2903e-02,  5.2681e-03, -7.0267e-03,  9.5749e-03,  6.4049e-03,  1.9470e-02,  4.0779e-03,\n        -2.1324e-03, -1.7075e-02, -1.0216e-02,  1.9089e-02,  1.8311e-02,  1.0162e-02, -3.2410e-02,  1.3412e-02, -1.1093e-02,  5.4970e-03, -2.3773e-02,  7.4844e-03,  1.2253e-02,  6.9923e-03, -1.6068e-02, -1.3733e-02, -1.6606e-04,  6.9733e-03,  1.9257e-02, -3.0670e-02,  2.4353e-02,  1.3916e-02, -1.3908e-02, -5.2605e-03,\n         2.9129e-02,  1.6342e-02,  2.4750e-02, -5.5389e-03,  9.7351e-03, -1.7685e-02, -2.4597e-02, -3.8700e-03, -3.0136e-02,  1.2367e-02, -1.2184e-02, -1.7075e-02,  2.2552e-02,  4.2915e-03,  2.0390e-03,  2.0798e-02,  1.3161e-03, -1.2887e-04, -2.3483e-02, -5.9814e-03, -3.4271e-02, -2.1072e-02,  2.7943e-03,  2.2447e-04,\n         1.5574e-03, -1.1444e-02,  1.7441e-02,  5.9967e-03, -1.8204e-02, -4.9057e-03,  1.0155e-02,  3.5767e-02,  8.5297e-03,  8.7662e-03, -6.6185e-03, -1.1147e-02,  2.0325e-02,  5.2147e-03,  1.2840e-02, -2.1347e-02,  3.5645e-02, -8.9798e-03, -7.1449e-03, -1.4706e-03,  6.1188e-03, -1.5556e-02, -3.4447e-03, -1.0834e-02,\n        -5.4207e-03,  2.2690e-02, -6.5994e-03, -1.2619e-02, -1.6815e-02, -7.6904e-03,  1.7044e-02, -8.6260e-04, -5.8327e-03, -2.4979e-02,  1.1002e-02,  2.6428e-02,  4.7607e-03,  1.4809e-02,  2.2095e-02,  1.6846e-02, -1.8494e-02, -1.8358e-03,  9.0088e-02,  2.1088e-02, -8.3389e-03,  1.3100e-02, -1.8524e-02,  9.1476e-03,\n        -1.2802e-02, -1.9684e-03, -5.7640e-03, -1.5900e-02,  1.0567e-02, -2.0660e-02, -2.1423e-02, -1.7380e-02,  2.4368e-02,  1.0345e-02, -6.0310e-03, -1.3138e-02, -1.3824e-02,  4.8218e-03,  1.1459e-02,  1.5778e-02,  2.3315e-02, -1.0948e-02,  1.1353e-02,  3.0029e-02, -6.3362e-03, -1.4053e-02, -1.0704e-02,  8.3237e-03,\n        -9.0485e-03,  1.5488e-02,  1.7822e-02, -1.7197e-02,  5.6190e-03, -5.5008e-03, -1.6006e-02, -1.6373e-02,  2.3975e-03, -1.0498e-02,  9.0485e-03, -1.9577e-02,  1.5457e-02, -7.7515e-03, -1.4420e-02, -1.4130e-02,  1.8387e-02, -2.5223e-02, -3.2787e-03,  1.5358e-02,  1.4221e-02,  9.0561e-03, -1.4257e-03, -1.7929e-02,\n         1.0208e-02, -9.2316e-03, -5.3644e-04,  1.7120e-02, -2.2430e-02,  1.7853e-02,  9.1629e-03,  7.6904e-03,  1.9058e-02,  1.3016e-02,  1.9470e-02, -2.8122e-02,  1.2192e-02,  1.5495e-02, -4.5967e-03,  8.6365e-03,  6.5079e-03,  2.1095e-03, -1.2581e-02,  1.5795e-05,  4.3583e-04, -2.5116e-02,  1.2474e-02, -6.7520e-03,\n         1.2360e-02,  2.4979e-02, -1.5244e-02, -6.1913e-03, -1.4008e-02,  5.3835e-04, -8.3847e-03,  1.4870e-02, -1.4603e-02,  6.5613e-03, -3.3417e-03, -1.3214e-02, -4.9057e-03, -1.8860e-02, -7.4577e-04,  1.2665e-02,  1.2177e-02,  1.9638e-02, -2.3590e-02, -2.1103e-02, -1.5106e-02,  1.2817e-02,  1.7685e-02,  2.1423e-02,\n         2.8976e-02, -2.8839e-03,  2.1820e-02, -7.7820e-03, -1.9592e-02, -1.7914e-02,  9.0103e-03, -7.8869e-04,  8.6451e-04, -1.5808e-02, -2.4261e-02, -1.6800e-02,  2.0279e-02,  2.9343e-02, -3.7518e-03, -2.0020e-02, -3.6774e-03, -7.4501e-03,  7.0076e-03,  2.1210e-02, -1.0361e-02, -3.1643e-03, -1.8127e-02,  1.4679e-02,\n         1.2321e-02,  1.4580e-02, -4.0855e-03,  2.3254e-02, -7.2670e-03,  1.7136e-02,  1.8112e-02,  1.2541e-03,  2.1011e-02, -2.9316e-03, -1.3321e-02,  1.8892e-03,  6.6681e-03,  1.9180e-02,  4.7913e-03,  8.2932e-03, -1.0063e-02, -1.2321e-02, -2.6978e-02, -1.6449e-02,  7.2174e-03,  3.7933e-02,  1.6006e-02,  4.0169e-03,\n         7.6332e-03, -2.3788e-02, -1.1803e-02, -1.4702e-02,  6.3858e-03, -2.0504e-03, -1.5884e-02, -9.9335e-03,  8.9035e-03,  1.8280e-02, -3.0346e-03,  8.5831e-03,  6.8521e-04, -1.5961e-02,  1.2146e-02, -2.3651e-02,  1.4893e-02,  2.2316e-04,  1.8173e-02, -1.9989e-03, -6.3286e-03,  1.7181e-02,  7.2556e-03,  2.5818e-02,\n        -6.9313e-03, -8.3771e-03,  1.1246e-02,  6.3896e-03, -1.7746e-02,  1.4938e-02, -1.4336e-02, -1.9852e-02,  3.5229e-03, -6.7978e-03, -7.9193e-03,  1.1398e-02,  8.1491e-04,  2.6535e-02, -1.2650e-02,  3.8414e-03, -2.3056e-02,  1.3763e-02, -1.2856e-02, -2.2995e-02,  8.4686e-03,  2.1088e-02,  1.6815e-02,  2.4643e-02,\n         2.0020e-02,  6.3820e-03,  1.2445e-03, -2.0218e-02,  2.5345e-02, -3.2215e-03,  1.9699e-02,  2.9541e-02, -7.3814e-03,  1.1482e-02, -9.8877e-03,  5.8250e-03, -2.2263e-02,  2.8320e-02, -5.5122e-03,  5.8632e-03, -1.6785e-02, -1.0452e-03, -1.9394e-02, -5.2452e-03, -1.1559e-03, -2.5139e-03, -1.2741e-02,  1.8219e-02,\n         1.4900e-02, -1.1169e-02,  3.3600e-02,  5.6267e-03, -1.8158e-02,  8.4839e-03, -6.0349e-03,  6.1569e-03, -1.2267e-04,  3.3665e-03,  2.7863e-02, -9.3002e-03, -1.0109e-02,  6.0501e-03, -1.3876e-03, -2.2717e-03,  2.3056e-02, -1.4397e-02, -2.3804e-02, -2.8046e-02,  2.2415e-02,  1.5640e-02, -3.1525e-02, -8.3237e-03,\n         5.5199e-03,  1.7654e-02,  1.0178e-02,  8.0414e-03,  1.8204e-02,  7.7972e-03, -1.3332e-03, -8.9035e-03, -4.4060e-03, -3.6850e-03, -9.6560e-04,  1.9569e-03,  1.8814e-02, -1.3145e-02, -1.1497e-02,  1.8494e-02, -1.8234e-02,  1.1730e-03, -9.7198e-03, -2.0340e-02,  2.5177e-02,  2.5520e-03, -2.1744e-02, -2.2675e-02,\n         2.0485e-03, -1.4885e-02, -1.2341e-03,  8.0948e-03,  9.3842e-03, -2.8946e-02,  9.5673e-03, -8.7814e-03,  1.0597e-02, -1.0063e-02, -4.6768e-03,  1.5774e-03,  2.3689e-03,  9.9182e-03,  2.4719e-02,  1.0231e-02, -2.4094e-02,  1.7731e-02,  1.8295e-02, -1.0727e-02, -2.7370e-03,  2.7893e-02, -1.1169e-02,  2.6962e-02,\n        -9.6970e-03, -1.6312e-02, -1.0612e-02, -2.0355e-02, -2.6749e-02, -1.5114e-02, -1.6983e-02, -2.5940e-02,  4.8981e-03,  1.9684e-02,  1.4320e-02, -5.7068e-03,  1.9241e-02,  1.4519e-02,  5.4550e-03, -2.2446e-02,  3.9330e-03,  2.6093e-02,  1.6296e-02,  3.8853e-03,  1.2375e-02,  8.3923e-03,  2.0432e-02,  1.4048e-03,\n        -1.2611e-02, -1.0742e-02,  1.1742e-02,  1.4519e-02,  8.8654e-03,  8.4229e-03,  1.6174e-02,  1.6251e-02,  1.3573e-02,  1.2550e-02, -2.8934e-03, -3.4599e-03, -1.7487e-02,  1.6876e-02, -3.8605e-03,  1.5022e-02,  2.2812e-03, -1.3313e-02,  8.0414e-03, -2.4673e-02,  1.9821e-02, -1.9150e-02, -1.3046e-02,  2.1839e-03,\n         1.6861e-02, -5.7755e-03,  1.2512e-02,  1.6541e-02, -1.5572e-02, -1.9394e-02, -1.5764e-03,  1.8661e-02, -3.2471e-02, -7.2632e-03,  9.3307e-03,  6.5689e-03, -1.1513e-02, -7.7486e-04, -7.5417e-03, -2.3102e-02, -1.4359e-02, -1.9775e-02,  3.6669e-04, -3.0613e-04,  8.9417e-03, -1.8326e-02, -2.5436e-02, -1.6937e-02,\n         1.0048e-02,  2.2106e-03,  9.4604e-03,  2.0172e-02,  9.0714e-03, -1.8982e-02, -2.1515e-02,  1.7868e-02, -1.3954e-02,  1.7433e-03,  5.6915e-03,  1.1314e-02,  7.0763e-03, -1.0880e-02,  1.6270e-03, -1.1719e-02, -1.1925e-02,  8.9188e-03,  1.1078e-02, -2.2156e-02,  2.9587e-02, -2.0523e-02,  1.1505e-02, -1.0300e-02,\n        -3.9368e-03, -1.0674e-02,  2.8973e-03,  1.4648e-02,  1.2383e-02, -1.3992e-02, -1.9287e-02,  5.1460e-03,  4.7836e-03,  3.7155e-03,  5.5313e-03,  2.8877e-03,  1.0271e-03, -1.0178e-02, -1.6541e-02, -1.3596e-02,  4.0131e-02,  1.3573e-02, -2.4902e-02,  6.2218e-03,  1.0628e-02, -9.8953e-03, -1.3313e-02,  1.1816e-03,\n        -1.8585e-02, -1.1986e-02,  2.1576e-02,  2.1149e-02,  1.7456e-02, -3.8834e-03,  1.5602e-02, -3.7231e-03, -1.1505e-02,  7.6752e-03, -4.0092e-03,  1.7975e-02,  5.8784e-03,  9.9640e-03,  2.4918e-02,  1.1803e-02,  1.9073e-02, -7.0000e-03,  1.5991e-02,  3.3661e-02, -3.3627e-03,  1.7014e-02,  1.3039e-02, -2.7227e-04,\n         2.4986e-03, -2.1160e-05,  1.9363e-02, -1.4107e-02,  1.8005e-02,  1.1871e-02,  5.2261e-03, -7.2289e-03,  1.3323e-03,  6.2294e-03, -3.0640e-02, -1.0384e-02, -2.0584e-02, -5.0850e-03,  2.2678e-03, -1.3390e-02,  2.5436e-02, -1.3054e-02,  2.1072e-02, -2.3270e-02, -4.1656e-03,  1.9760e-02, -2.2842e-02,  2.5162e-02,\n         9.0361e-04, -7.5188e-03,  2.5436e-02,  2.3994e-03,  7.1678e-03, -3.4142e-03, -3.1235e-02,  3.2806e-02, -7.0906e-04,  7.9575e-03, -2.2415e-02,  5.6038e-03, -2.8900e-02,  8.7357e-03, -1.3008e-02,  7.3204e-03, -2.1591e-02,  4.2267e-03, -1.2894e-03,  6.3896e-03,  5.2681e-03,  7.2060e-03, -1.6617e-02,  8.5449e-03,\n        -1.3748e-02,  1.0424e-03,  2.4338e-02,  2.3697e-02, -6.9962e-03,  3.0804e-03,  1.2512e-02,  7.4158e-03,  8.9111e-03,  8.1863e-03, -1.7487e-02,  4.1246e-04,  1.3596e-02, -1.8250e-02,  1.0887e-02,  7.0152e-03, -1.1063e-02, -3.2440e-02, -1.9852e-02,  2.7328e-02,  3.8242e-03,  2.0004e-02, -1.1635e-02, -2.5425e-03,\n         7.6790e-03,  1.0521e-02,  8.7509e-03, -1.1871e-02,  1.7715e-02,  2.3232e-03, -3.0792e-02,  1.9119e-02, -2.8419e-04,  2.7054e-02, -2.7046e-03, -1.8417e-02, -2.1255e-02, -1.6907e-02, -9.1324e-03,  1.9043e-02, -9.8724e-03,  1.4557e-02, -2.6875e-03, -2.2751e-02, -3.0880e-03, -1.3191e-02, -1.2146e-02, -4.0550e-03,\n         2.9495e-02,  2.3346e-02, -1.3573e-02, -6.8665e-03,  8.8882e-03, -6.8703e-03,  1.2001e-02, -5.6791e-04, -1.1665e-02,  6.6605e-03,  2.1530e-02, -2.2217e-02,  1.8829e-02,  2.5513e-02, -7.0457e-03, -4.3564e-03, -1.0023e-03,  1.1177e-02,  1.5900e-02,  4.5204e-03,  7.2174e-03,  2.6306e-02, -8.9417e-03, -1.1604e-02,\n         5.5008e-03, -3.0041e-03, -1.0239e-02,  5.9967e-03,  1.2917e-02,  4.7379e-03, -3.6983e-03,  7.5188e-03,  6.6910e-03,  1.6098e-02, -8.7738e-05,  3.0384e-03, -9.3536e-03,  3.8269e-02,  1.3710e-02,  1.6891e-02,  1.9974e-02, -2.9812e-03, -2.7435e-02,  1.3260e-02,  3.5362e-03, -4.7379e-03,  5.1498e-03,  2.6131e-03],\n       dtype=torch.float16), 'perceiver_resampler.proj_out.weight': tensor([[ 0.0334,  0.0221, -0.0682,  ..., -0.0543, -0.0063,  0.0121],\n        [ 0.0471,  0.0061,  0.0254,  ..., -0.0036, -0.0243,  0.0395],\n        [-0.0163,  0.0471, -0.0521,  ..., -0.0257,  0.0210, -0.0237],\n        ...,\n        [ 0.0466,  0.0340, -0.1034,  ..., -0.0661,  0.0071, -0.0772],\n        [ 0.0465,  0.0299,  0.0292,  ..., -0.0231,  0.0225, -0.0161],\n        [-0.0034,  0.0245, -0.0088,  ...,  0.0025, -0.0512,  0.0449]], dtype=torch.float16), 'perceiver_resampler.proj_out.bias': tensor([ 1.6602e-02,  1.6876e-02, -1.7395e-02,  2.7481e-02, -3.5004e-02, -2.9831e-02,  4.2458e-03,  3.8116e-02,  1.6968e-02, -6.2485e-03,  4.7516e-02, -4.5166e-02, -2.2858e-02, -1.7670e-02,  2.2797e-02,  2.5848e-02,  3.4607e-02,  4.9622e-02, -1.3748e-02,  2.5806e-01,  1.6403e-02, -2.6321e-02,  1.5854e-02,  2.1820e-02,\n         1.8814e-02,  2.8934e-03,  2.1973e-02, -1.7900e-03, -2.1225e-02, -5.2338e-02, -1.3466e-02,  2.2400e-02, -1.1909e-02,  3.5522e-02, -8.4000e-03, -8.3160e-03, -9.4223e-03,  8.5144e-03,  4.2786e-02,  1.5495e-02,  2.4658e-02,  2.2217e-02,  8.4991e-03,  2.9312e-02, -3.6346e-02, -6.7505e-02, -5.3883e-04, -2.7466e-02,\n        -1.1612e-02, -5.2757e-03, -7.4463e-02,  2.9526e-02,  7.3280e-03, -1.2331e-03,  1.2871e-02,  1.2032e-02,  2.3849e-02, -5.7770e-02,  1.5587e-02, -4.1595e-02,  2.1866e-02,  4.0924e-02,  3.7994e-03,  2.4292e-02,  3.2578e-03,  4.2236e-02,  1.2369e-03,  6.0959e-03, -4.2267e-03,  5.3162e-02,  1.6281e-02,  1.8478e-02,\n         3.9154e-02,  3.0838e-02, -5.2246e-02, -2.9099e-02,  1.0933e-02, -3.2806e-02, -1.8082e-02, -1.4481e-02,  2.7176e-02,  2.2217e-02,  5.2307e-02,  7.2449e-02,  1.2497e-02,  4.9858e-03, -3.5675e-02, -1.7654e-02,  5.7487e-03, -2.8015e-02, -6.8436e-03, -1.4732e-02,  3.0079e-03,  2.9785e-02,  2.4509e-03,  4.1138e-02,\n         4.8462e-02, -7.9529e-02,  7.8049e-03, -1.7471e-02,  2.6749e-02,  5.0659e-02, -1.3138e-02, -1.1833e-02, -1.3039e-02, -4.0558e-02,  2.0248e-02, -4.4227e-05, -1.1475e-02, -9.4482e-02, -1.0109e-03, -4.8523e-02, -1.2985e-02,  1.8463e-02,  4.6570e-02,  4.0192e-02, -5.0163e-03, -1.0368e-02, -3.3112e-02,  2.8748e-02,\n        -5.3436e-02, -1.5503e-02,  1.4420e-02,  4.8752e-03,  3.7201e-02,  8.2397e-03, -3.0212e-02,  3.0731e-02,  1.0231e-02, -8.2703e-03,  3.4607e-02,  3.3356e-02,  1.6281e-02,  2.3209e-02, -3.0956e-03, -7.3471e-03,  9.3994e-03, -2.6810e-02, -3.4790e-02, -1.6678e-02,  3.2410e-02, -1.0277e-02,  2.2919e-02,  4.2725e-02,\n         1.7776e-02, -3.1372e-02, -7.5607e-03, -4.6295e-02, -1.9485e-02,  3.1952e-02,  2.4399e-02,  2.3865e-02,  3.0380e-02,  1.9714e-02, -5.8807e-02, -1.9623e-02, -3.3386e-02,  4.9622e-02, -1.1490e-02, -2.3087e-02,  3.2227e-02,  3.2837e-02, -8.1711e-03, -2.7740e-02, -3.7567e-02,  8.0228e-05, -1.4511e-02, -1.3039e-02,\n        -7.6752e-03,  3.2593e-02,  7.8964e-03, -5.2826e-02, -6.1646e-02,  8.0872e-02, -6.3599e-02, -2.0584e-02, -1.9150e-02,  3.1757e-03, -5.4970e-03, -1.4778e-02,  1.6815e-02, -2.0264e-02,  3.2349e-02,  4.1626e-02, -9.7656e-03,  2.7657e-03, -2.2552e-02, -3.6560e-02, -1.2466e-02,  3.3081e-02,  1.2684e-03,  3.7781e-02,\n        -2.0264e-02, -1.1047e-02, -1.8864e-03, -6.3972e-03,  1.7654e-02, -1.8356e-02,  4.7119e-02, -1.4259e-02,  1.1091e-03, -2.6474e-02, -2.1851e-02,  3.2471e-02,  7.2021e-03, -1.5202e-03, -3.2104e-02,  5.5084e-02, -1.2199e-02, -3.4943e-02, -4.9683e-02, -6.8298e-02, -4.6173e-02,  1.6586e-02,  1.0889e-01, -3.1586e-02,\n        -6.0425e-02,  3.7598e-02,  1.9119e-02,  5.1331e-02,  4.5319e-02,  5.5733e-03, -6.6895e-02,  1.1894e-02,  1.4755e-02, -4.9133e-03,  7.8430e-02,  5.3894e-02, -1.2436e-03, -7.4120e-03, -5.1498e-04,  1.3039e-02, -2.2125e-02,  3.2074e-02, -4.5013e-02, -6.9389e-03, -2.0447e-02,  1.7365e-02,  5.9624e-03,  2.1076e-03,\n        -5.6725e-03,  2.1179e-02,  1.6312e-02,  3.0533e-02, -1.9272e-02,  5.0621e-03, -1.1719e-02, -1.4839e-03, -4.0817e-03, -5.0774e-03,  3.6499e-02,  9.8610e-04,  3.2867e-02,  4.7363e-02, -1.4183e-02,  1.1711e-02,  2.5604e-02, -4.8494e-04, -9.0576e-02, -7.3967e-03, -3.4485e-02, -1.2744e-01, -6.0272e-02, -2.4979e-02,\n        -2.4750e-02,  6.4659e-03,  4.9377e-02, -8.0633e-04, -1.6739e-02,  1.6022e-02,  9.6588e-03,  1.4214e-02, -1.6312e-02, -1.8417e-02,  1.0941e-02, -1.4473e-02, -1.6708e-02, -1.7334e-02, -6.7749e-02, -2.0493e-02,  1.5305e-02, -1.4038e-03, -1.3535e-02,  3.8452e-02,  3.1372e-02,  4.4495e-02, -1.8387e-02, -1.9638e-02,\n         2.6150e-03,  2.2232e-02,  1.8799e-02,  3.6041e-02, -2.7267e-02,  2.3071e-02,  1.8906e-02, -1.7517e-02,  4.0466e-02,  2.8763e-02,  1.4664e-02,  2.9434e-02, -1.8661e-02,  4.2786e-02, -2.1988e-02, -9.9060e-02, -3.1555e-02, -4.1138e-02, -4.0314e-02, -8.7357e-03, -2.2278e-02, -2.2675e-02,  1.9503e-03, -1.4496e-02,\n         3.8025e-02, -9.2392e-03, -2.9663e-02,  3.3478e-02, -2.3865e-02,  1.7136e-02, -1.7824e-03, -1.4389e-02, -3.0121e-02,  3.2187e-04,  5.8746e-03,  3.2745e-02,  3.4692e-01, -1.6357e-02,  5.0507e-03,  1.9165e-02,  2.3972e-02, -1.6785e-02,  8.5510e-02, -9.6512e-03,  2.6875e-03, -1.5774e-03,  5.9784e-02,  1.1139e-02,\n        -2.5314e-02, -3.8757e-02, -5.2612e-02,  4.6692e-03,  4.1840e-02,  6.3972e-03, -6.4087e-02, -8.6594e-03,  3.0136e-02,  3.5675e-02, -1.7960e-02,  1.5419e-02, -2.5284e-02, -4.1473e-02, -3.4363e-02, -1.4984e-02,  1.8188e-02,  2.7740e-02,  8.7509e-03,  3.7018e-02,  3.5706e-03, -1.0300e-02, -1.1719e-02, -1.9426e-03,\n        -5.7495e-02,  2.5864e-03,  8.5878e-04,  2.0721e-02, -2.5024e-02, -1.9089e-02,  3.7903e-02, -1.5778e-02, -9.4604e-03,  4.3907e-03, -3.2471e-02,  1.7822e-02, -2.6215e-02, -2.8091e-02, -5.4779e-02, -4.5654e-02, -4.2114e-02,  1.6479e-02,  1.4923e-02,  9.0408e-03, -2.8915e-02,  4.1565e-02,  1.8127e-02,  1.5015e-02,\n        -4.3549e-02, -4.1565e-02, -5.1605e-02,  6.6185e-03, -2.5711e-02,  4.0222e-02,  4.9164e-02, -2.5314e-02,  1.0071e-02,  1.4122e-02,  1.7227e-02, -3.3966e-02,  3.4027e-02, -6.1073e-03, -4.0436e-02,  1.3344e-02, -2.3782e-04, -2.1774e-02,  3.2368e-03, -1.5945e-02, -7.4615e-03,  1.2505e-02,  2.6962e-02, -2.5681e-02,\n         3.8269e-02,  8.2474e-03, -6.0181e-02,  1.2192e-02,  7.6782e-02, -3.2640e-04, -4.4518e-03, -2.5000e-01,  1.2188e-03, -1.3323e-03,  2.1118e-02,  8.2703e-03,  2.6794e-02, -3.5767e-02, -2.8229e-02, -4.9095e-03,  4.7073e-03, -2.7756e-02, -1.0635e-02, -2.7817e-02, -4.2664e-02,  2.0477e-02,  4.3060e-02, -5.0583e-03,\n        -1.2367e-02, -9.5139e-03, -7.8506e-03,  2.9556e-02, -3.8330e-02,  1.0231e-02,  1.5535e-03, -2.1255e-02,  1.3145e-02,  3.1281e-02, -3.6659e-03,  2.7294e-03, -2.4246e-02,  4.0398e-03, -3.6407e-02, -1.5686e-02, -5.1231e-03,  3.5801e-03,  3.0937e-03,  1.2817e-02, -1.9455e-02, -1.8539e-02, -2.2919e-02,  3.0975e-02,\n        -1.0046e-01,  1.4091e-02,  1.3275e-02,  3.2806e-02,  3.4180e-02,  4.4037e-02,  1.0284e-02, -9.0561e-03, -4.0222e-02,  5.6671e-02, -4.6326e-02, -1.5793e-02,  8.2855e-03, -5.7411e-03,  2.8412e-02,  1.1284e-02, -2.8564e-02,  2.1553e-03, -9.3699e-04, -1.5991e-02, -3.6865e-02,  2.7351e-03, -4.5837e-02, -4.6844e-03,\n        -7.7705e-03, -2.3880e-02, -1.9703e-03,  4.6997e-02,  3.1158e-02, -1.1749e-02, -4.5074e-02, -4.9286e-03,  4.0375e-02,  3.0777e-02,  1.2108e-02, -1.0536e-02, -8.6212e-03, -4.9347e-02,  2.6230e-02,  1.4610e-02, -6.5384e-03, -1.9928e-02,  1.0536e-02, -3.1021e-02, -1.7033e-03, -3.1686e-04, -3.5004e-02,  6.5125e-02,\n        -3.2501e-02, -1.2161e-02, -1.6769e-02,  5.0934e-02, -2.8610e-02,  5.5603e-02,  3.3447e-02,  2.0142e-02, -3.4790e-02, -4.2694e-02, -2.1393e-02, -1.0216e-02,  5.7922e-02, -7.2021e-03, -4.6722e-02, -9.8343e-03,  3.6621e-02, -4.3610e-02,  7.5500e-02,  2.2202e-02, -6.4575e-02,  4.1847e-03, -1.4481e-02, -1.4351e-02,\n        -2.7740e-02, -5.1765e-03, -3.4149e-02,  2.7197e-01, -8.4457e-03, -2.4399e-02, -8.5545e-04, -9.3842e-03, -5.2612e-02, -3.3783e-02,  6.6589e-02,  3.9886e-02,  2.3621e-02,  4.1473e-02, -1.0117e-02, -1.0201e-02, -2.7039e-02,  1.1292e-02,  8.9340e-03, -2.8091e-02,  2.6352e-02,  9.3555e-04, -1.3748e-02, -4.7668e-02,\n        -1.6769e-02, -2.9278e-03,  4.9782e-04,  6.7902e-03,  1.1475e-02, -2.5665e-02,  2.3529e-02, -4.8706e-02, -1.5335e-03, -2.5101e-03, -1.6546e-03,  7.6408e-03,  3.1311e-02,  6.2981e-03,  4.3144e-03, -1.1511e-03,  2.8305e-02, -3.9215e-02, -3.6835e-02,  5.7144e-03, -1.4694e-02,  1.8585e-02,  6.9397e-02,  2.3758e-02,\n         1.0002e-02,  5.7640e-03, -2.7512e-02, -2.9282e-02, -2.5757e-02, -2.7313e-02,  2.6306e-02,  7.2388e-02,  7.7744e-03, -7.6172e-02,  6.5002e-03, -1.2466e-02,  1.0246e-02, -1.3924e-02, -8.5907e-03, -1.1368e-02,  5.2299e-03,  3.9764e-02,  2.9922e-02, -2.6947e-02, -7.7553e-03, -3.3417e-02,  3.6346e-02,  4.5128e-03,\n        -4.2480e-02, -2.9465e-02,  2.6505e-02,  6.1989e-03, -4.2664e-02,  2.0733e-03,  4.5471e-02, -7.4097e-02,  2.7496e-02,  2.6382e-02,  6.1310e-02, -2.7409e-03,  3.2990e-02,  2.8519e-02,  6.3562e-04,  6.6795e-03,  2.0920e-02,  7.7705e-03, -7.4890e-02,  3.4241e-02, -5.1537e-03,  1.1223e-02,  1.2810e-02,  2.0008e-03,\n         7.4120e-03,  4.1260e-02, -1.5572e-02, -1.7731e-02,  2.7618e-02,  7.6599e-03,  3.8116e-02, -2.3849e-02, -6.6711e-02,  9.7351e-03, -4.4006e-02, -4.9477e-03, -5.5664e-02,  3.8338e-03, -2.7481e-02,  1.4465e-02, -1.3237e-02, -4.5349e-02, -2.3937e-03, -2.5406e-02,  1.9730e-02, -3.5645e-02,  1.4481e-02, -8.5907e-03,\n        -9.3384e-03,  3.6287e-04,  3.3569e-02, -7.2670e-04,  8.9493e-03, -4.0619e-02, -9.9277e-04,  3.4103e-03, -1.0345e-02, -4.0955e-02, -6.2378e-02, -3.2024e-03,  2.9434e-02,  6.6528e-02,  4.0283e-02, -2.4033e-02, -1.3550e-02,  8.0872e-03, -1.5808e-02, -1.4191e-02,  4.2633e-02, -8.2932e-03, -3.3474e-03,  1.0330e-02,\n         1.3268e-02, -1.8356e-02,  1.1169e-02, -8.2703e-03,  2.7435e-02,  6.2164e-02, -3.2368e-03, -1.3375e-04, -3.5156e-02, -3.2275e-01, -1.0834e-02, -6.8626e-03,  3.7720e-02,  1.8415e-03, -2.4155e-02,  5.3558e-02, -2.8839e-02, -2.1622e-02,  1.4030e-02, -1.0292e-02, -2.4307e-02, -7.1564e-03, -1.5745e-03,  2.1362e-02,\n        -3.3417e-02,  1.8044e-03,  2.3819e-02, -5.4216e-04,  1.3866e-03, -4.1718e-02, -1.5343e-02,  2.2598e-02, -4.7150e-02,  4.2755e-02, -1.2146e-02, -4.1466e-03,  3.8116e-02, -1.8478e-02,  4.1870e-02,  4.7340e-03,  2.7100e-02, -1.6586e-02,  6.0425e-02, -2.2476e-02, -2.0096e-02, -1.9226e-02,  2.9240e-03,  3.5828e-02,\n         1.6266e-02,  9.9335e-03,  3.4454e-02, -1.4030e-02,  3.7098e-03, -4.1885e-03,  2.4231e-02, -1.0406e-02, -1.2787e-02, -2.9221e-02,  1.0498e-02,  8.0566e-03,  4.0253e-02, -4.5990e-02,  3.4729e-02, -2.5635e-02, -9.7046e-03, -4.5868e-02, -9.2840e-04,  2.5988e-04, -2.6672e-02,  8.4915e-03,  2.6169e-02,  2.6306e-02,\n         2.6169e-02,  5.2118e-04,  1.4114e-02,  4.0375e-02,  5.1346e-03,  3.1586e-02, -1.3268e-02,  4.1618e-03, -3.6163e-02, -2.5162e-02, -3.9307e-02,  4.0894e-03, -1.4565e-02,  7.6981e-03,  2.7405e-02,  3.3752e-02, -3.4607e-02,  2.8183e-02,  5.7953e-02, -2.7023e-02, -1.6312e-02,  8.7433e-03,  3.6743e-02,  5.8105e-02],\n       dtype=torch.float16), 'perceiver_resampler.norm_out.weight': tensor([0.5762, 0.5093, 0.5498, 0.5068, 0.5679, 0.4724, 0.4976, 0.5518, 0.5532, 0.5005, 0.5342, 0.5498, 0.4966, 0.5181, 0.5347, 0.5400, 0.5483, 0.5400, 0.5229, 0.7134, 0.4944, 0.5054, 0.5278, 0.5010, 0.5205, 0.5107, 0.4937, 0.5493, 0.5649, 0.4995, 0.5259, 0.5435, 0.5122, 0.5337, 0.5337, 0.4846, 0.5112, 0.5210, 0.5361,\n        0.5073, 0.4844, 0.4885, 0.5503, 0.5557, 0.5088, 0.5259, 0.5269, 0.4795, 0.5718, 0.5142, 0.5342, 0.5376, 0.5059, 0.5640, 0.4683, 0.5166, 0.5137, 0.5347, 0.5171, 0.5376, 0.5186, 0.5269, 0.5063, 0.5366, 0.5322, 0.5142, 0.5283, 0.5552, 0.5576, 0.6133, 0.5049, 0.5186, 0.5410, 0.5034, 0.5112, 0.4795, 0.5278, 0.5405,\n        0.5161, 0.5674, 0.5630, 0.5376, 0.5303, 0.4871, 0.5298, 0.5420, 0.5029, 0.5317, 0.5229, 0.5527, 0.5034, 0.5103, 0.5176, 0.5522, 0.5225, 0.5391, 0.5303, 0.5337, 0.5044, 0.5161, 0.5312, 0.5898, 0.5513, 0.5332, 0.4946, 0.5190, 0.5063, 0.4819, 0.5669, 0.5195, 0.5371, 0.5518, 0.4807, 0.4976, 0.5415, 0.5308, 0.5571,\n        0.4700, 0.5347, 0.4695, 0.5195, 0.5151, 0.5259, 0.5439, 0.5200, 0.5220, 0.5332, 0.4819, 0.5288, 0.5054, 0.5234, 0.5400, 0.5059, 0.4832, 0.4829, 0.5288, 0.5200, 0.5112, 0.5347, 0.5298, 0.5410, 0.5278, 0.5005, 0.5332, 0.4756, 0.5288, 0.5132, 0.5293, 0.5493, 0.4768, 0.5029, 0.5225, 0.5308, 0.4709, 0.5234, 0.5713,\n        0.5098, 0.5420, 0.5205, 0.5137, 0.4927, 0.5298, 0.5161, 0.6079, 0.5410, 0.5522, 0.5127, 0.5249, 0.5093, 0.4827, 0.5225, 0.4836, 0.5425, 0.5527, 0.5601, 0.5513, 0.5537, 0.5166, 0.5190, 0.4714, 0.5239, 0.5493, 0.5068, 0.5073, 0.4631, 0.5342, 0.5298, 0.5591, 0.5322, 0.5103, 0.5581, 0.5317, 0.5439, 0.5063, 0.4868,\n        0.5542, 0.5347, 0.5371, 0.5005, 0.5015, 0.5317, 0.5332, 0.5479, 0.5288, 0.5288, 0.5020, 0.5132, 0.5166, 0.5762, 0.4932, 0.5093, 0.5176, 0.5601, 0.5312, 0.4226, 0.5508, 0.5430, 0.5596, 0.5044, 0.5366, 0.5522, 0.5439, 0.5786, 0.4543, 0.5215, 0.4546, 0.5439, 0.5732, 0.5430, 0.5332, 0.4998, 0.5146, 0.5146, 0.5356,\n        0.5522, 0.5000, 0.5151, 0.5166, 0.5078, 0.5063, 0.4998, 0.6182, 0.5049, 0.4883, 0.5117, 0.5117, 0.5352, 0.5493, 0.4919, 0.4822, 0.5513, 0.4875, 0.5312, 0.5044, 0.5659, 0.4919, 0.5474, 0.4805, 0.5488, 0.4905, 0.5942, 0.0469, 0.4915, 0.5239, 0.5229, 0.5884, 0.5151, 0.5342, 0.5288, 0.5142, 0.5264, 0.5127, 0.4751,\n        0.5088, 0.4836, 0.4961, 0.5239, 0.5215, 0.5381, 0.5488, 0.5122, 0.5225, 0.5166, 0.4763, 0.5571, 0.5415, 0.5049, 0.5537, 0.5425, 0.5181, 0.5195, 0.5103, 0.5625, 0.5200, 0.5142, 0.5137, 0.5635, 0.4985, 0.5479, 0.5029, 0.5566, 0.5200, 0.5103, 0.5020, 0.4729, 0.4949, 0.4719, 0.5220, 0.5132, 0.6226, 0.5020, 0.5552,\n        0.5303, 0.4802, 0.4932, 0.5562, 0.4817, 0.5288, 0.5513, 0.5332, 0.5322, 0.5454, 0.5190, 0.5259, 0.7764, 0.5205, 0.5020, 0.5347, 0.5459, 0.5020, 0.5088, 0.5371, 0.5576, 0.5171, 0.5063, 0.4626, 0.5605, 0.5420, 0.4946, 0.4846, 0.5244, 0.5254, 0.5532, 0.5356, 0.5425, 0.5366, 0.4500, 0.5117, 0.5371, 0.5405, 0.5571,\n        0.5063, 0.4871, 0.5444, 0.5371, 0.5078, 0.5400, 0.5215, 0.4675, 0.4902, 0.5405, 0.5254, 0.4988, 0.5386, 0.4927, 0.5430, 0.5410, 0.5405, 0.5547, 0.5132, 0.5522, 0.5244, 0.5269, 0.5098, 0.5420, 0.5278, 0.5127, 0.5615, 0.4761, 0.4951, 0.5659, 0.5830, 0.4912, 0.4634, 0.5039, 0.4829, 0.5278, 0.5103, 0.5117, 0.5371,\n        0.5293, 0.5420, 0.5347, 0.5220, 0.5273, 0.5244, 0.5156, 0.5078, 0.5117, 0.5078, 0.5698, 0.5239, 0.5679, 0.5327, 0.5669, 0.5430, 0.5352, 0.5649, 0.5278, 0.5015, 0.4688, 0.5381, 0.5503, 0.5898, 0.5576, 0.6841, 0.5024, 0.5396, 0.5415, 0.5425, 0.5190, 0.5503, 0.5054, 0.5557, 0.5415, 0.5176, 0.5010, 0.4727, 0.5132,\n        0.4973, 0.4875, 0.5356, 0.4988, 0.5068, 0.5049, 0.4724, 0.5400, 0.5469, 0.5322, 0.5430, 0.5063, 0.5132, 0.5171, 0.5347, 0.5303, 0.5415, 0.5239, 0.5146, 0.4917, 0.5454, 0.4890, 0.5503, 0.4890, 0.5332, 0.5488, 0.4983, 0.5181, 0.5513, 0.5210, 0.5181, 0.4761, 0.4749, 0.5195, 0.4910, 0.5371, 0.5132, 0.5493, 0.5103,\n        0.5410, 0.5352, 0.5176, 0.5039, 0.5391, 0.5337, 0.5601, 0.5400, 0.5195, 0.5200, 0.5479, 0.5107, 0.5215, 0.5308, 0.4653, 0.5190, 0.4980, 0.5146, 0.4990, 0.5449, 0.4548, 0.4954, 0.5371, 0.5298, 0.4995, 0.5264, 0.4700, 0.5103, 0.5093, 0.5283, 0.5132, 0.5049, 0.5444, 0.5225, 0.5244, 0.5161, 0.5420, 0.5239, 0.5293,\n        0.5439, 0.5234, 0.5371, 0.5225, 0.5366, 0.5293, 0.5239, 0.5327, 0.5552, 0.5342, 0.5112, 0.5732, 0.5239, 0.5547, 0.5054, 0.4338, 0.5171, 0.5312, 0.5781, 0.5176, 0.5098, 0.4775, 0.4995, 0.5508, 0.0340, 0.5269, 0.5234, 0.4939, 0.5073, 0.5244, 0.5107, 0.5747, 0.5327, 0.5190, 0.5229, 0.4749, 0.5259, 0.5347, 0.5269,\n        0.5645, 0.5269, 0.5474, 0.5293, 0.4719, 0.5127, 0.5288, 0.5117, 0.5112, 0.4993, 0.5361, 0.5254, 0.5210, 0.5586, 0.5029, 0.5361, 0.5342, 0.5264, 0.5464, 0.5488, 0.4331, 0.5562, 0.5493, 0.5415, 0.5107, 0.4841, 0.5552, 0.4956, 0.5571, 0.5361, 0.5024, 0.5503, 0.4924, 0.5215, 0.5161, 0.5605, 0.5405, 0.5435, 0.4976,\n        0.5459, 0.5146, 0.5474, 0.5376, 0.5566, 0.5312, 0.4692, 0.5044, 0.5000, 0.5151, 0.5400, 0.5200, 0.4729, 0.5444, 0.5112, 0.5029, 0.5298, 0.5352, 0.5566, 0.5479, 0.4824, 0.5342, 0.5083, 0.5029, 0.4814, 0.5928, 0.5142, 0.4648, 0.5181, 0.4937, 0.5127, 0.5669, 0.5693, 0.5630, 0.5547, 0.5508, 0.5083, 0.5205, 0.5103,\n        0.5200, 0.5542, 0.5269, 0.5449, 0.5127, 0.5098, 0.5244, 0.4758, 0.4963, 0.5967, 0.5093, 0.5029, 0.5405, 0.4744, 0.4482, 0.5000, 0.5562, 0.4773, 0.5132, 0.4973, 0.5508, 0.5493, 0.5142, 0.5488, 0.5322, 0.5137, 0.4961, 0.4958, 0.4619, 0.4951, 0.5210, 0.5269, 0.5200, 0.5278, 0.5664, 0.5303, 0.5635, 0.5391, 0.5674,\n        0.5205, 0.5425, 0.5156, 0.5654, 0.5029, 0.5571, 0.5376, 0.4910, 0.5410, 0.5527, 0.5225, 0.5195, 0.6001, 0.5073, 0.5391, 0.4849, 0.5142, 0.5659, 0.6533, 0.5176, 0.5200, 0.5010, 0.5010, 0.5703, 0.5254, 0.5742, 0.5386, 0.5083, 0.4907, 0.5903, 0.5190, 0.5151, 0.4927, 0.5293, 0.4746, 0.5283, 0.4863, 0.5254, 0.5176,\n        0.4866, 0.5088, 0.5200, 0.5269, 0.5361, 0.4744, 0.4998, 0.5420, 0.5371, 0.5356, 0.5034, 0.5132, 0.5527, 0.4871, 0.5259, 0.5308, 0.5049, 0.5146, 0.5234, 0.5430, 0.5122, 0.5527, 0.5410, 0.5127, 0.6147, 0.5439, 0.5420, 0.5244, 0.4905, 0.5015, 0.5308, 0.4717, 0.5093, 0.4983, 0.5474, 0.5640, 0.5073, 0.5005, 0.5366,\n        0.5220, 0.5244, 0.4812, 0.5229, 0.5435, 0.5581, 0.5435, 0.5146, 0.4707, 0.5195, 0.5225, 0.5488, 0.4954, 0.4482, 0.4900, 0.4985, 0.5312, 0.5425, 0.5200, 0.5674, 0.5693, 0.5171, 0.5171, 0.5166, 0.5674, 0.5293, 0.5400], dtype=torch.float16), 'perceiver_resampler.norm_out.bias': tensor([ 1.7738e-03,  1.0252e-03, -2.2507e-04,  5.8327e-03,  5.9433e-03,  6.6936e-05, -2.8825e-04, -2.5578e-03,  2.6169e-03,  8.1558e-03,  7.6561e-03,  1.8501e-03, -5.1613e-03, -7.7286e-03, -3.0308e-03,  3.2215e-03,  6.9389e-03,  5.3520e-03,  3.3112e-03,  5.8258e-02, -7.6675e-03,  1.9205e-04,  4.4861e-03,  8.6927e-04,\n         5.3549e-04, -7.7057e-03, -2.6321e-03,  4.3640e-03,  5.1737e-04, -4.5853e-03, -3.8033e-03, -7.7581e-04,  6.6414e-03,  1.8196e-03, -5.0926e-03, -9.8953e-03,  7.0343e-03,  5.9433e-03,  7.7782e-03, -5.0449e-04, -6.6528e-03,  2.0962e-03,  1.7052e-03,  5.4741e-04,  5.7755e-03, -2.3174e-03,  5.2910e-03, -7.0095e-04,\n         1.0315e-02,  5.8289e-03, -3.2635e-03,  2.7008e-03,  4.2419e-03, -2.9125e-03,  4.4250e-03, -2.3670e-03,  6.4850e-03, -9.0790e-03,  1.3565e-02, -7.2784e-03,  7.5493e-03,  2.2812e-03, -4.0817e-03,  2.6379e-03,  2.1057e-03,  9.5520e-03, -5.8670e-03, -4.4556e-03, -9.6035e-04,  9.3002e-03, -6.4468e-04, -2.9945e-03,\n         1.6037e-02,  3.6125e-03, -2.2011e-03, -6.6185e-03,  6.9771e-03, -6.7043e-04, -1.5917e-03,  2.9297e-03, -1.6105e-04,  6.5079e-03,  2.6093e-03,  8.7585e-03,  9.2459e-04, -1.4915e-03, -5.0392e-03,  4.0398e-03, -9.4509e-04,  9.2316e-03, -1.8253e-03,  2.5883e-03,  5.7030e-04,  4.7417e-03,  4.3907e-03,  7.5035e-03,\n         2.7027e-03, -3.1624e-03,  9.9468e-04,  4.8943e-03,  2.8706e-03,  1.3895e-03,  2.8992e-03,  6.3515e-03,  2.1515e-03, -1.0624e-03,  4.0169e-03,  7.5912e-03,  3.9597e-03, -7.7553e-03,  2.6855e-03, -3.3436e-03,  2.2926e-03,  2.1992e-03,  1.4572e-03,  4.7379e-03,  4.1428e-03,  6.7139e-03, -5.6839e-03, -7.4196e-03,\n        -1.0118e-03,  3.0785e-03,  2.9011e-03, -1.9522e-03, -6.5269e-03, -2.4490e-03, -3.6068e-03,  7.9803e-03,  2.1992e-03,  4.4746e-03,  5.2757e-03, -2.9411e-03,  4.0703e-03,  4.1084e-03,  8.9121e-04,  3.8643e-03,  9.2010e-03, -7.8430e-03, -4.5929e-03, -1.7424e-03, -3.7575e-03, -6.6643e-03, -2.0409e-03,  5.9280e-03,\n        -1.4248e-03,  3.6716e-03,  8.9111e-03, -2.8019e-03,  4.0016e-03,  4.2305e-03,  7.2174e-03,  5.1498e-03,  4.2381e-03, -7.3433e-04, -7.5264e-03,  9.7580e-03, -4.1428e-03,  1.1429e-02, -2.5883e-03, -8.2636e-04,  7.9012e-04,  6.7177e-03,  3.0556e-03, -1.1528e-02,  6.2485e-03,  8.1329e-03,  5.5313e-04,  1.6222e-03,\n        -3.5620e-04,  5.6076e-03, -5.2528e-03, -1.9627e-03, -8.4763e-03,  8.7204e-03, -2.8763e-03, -3.1071e-03,  4.4785e-03, -2.8477e-03, -5.2261e-03,  3.9482e-03, -2.3007e-04, -3.4752e-03,  1.7071e-03,  4.5052e-03, -4.5547e-03, -6.6805e-04, -2.1935e-03, -5.6076e-03,  3.3588e-03,  3.5686e-03,  4.2152e-03,  2.1381e-03,\n        -1.9913e-03, -8.3923e-04,  3.6678e-03, -6.4659e-03,  1.4143e-03, -3.8910e-03,  9.8190e-03,  3.5501e-04, -2.3651e-03, -2.5539e-03, -4.8804e-04,  6.8130e-03, -7.5626e-04, -2.0695e-03, -5.8899e-03, -2.9206e-04,  1.8806e-03, -1.9646e-03,  4.8141e-03, -5.0140e-02,  4.0030e-04,  8.9493e-03,  8.5693e-02, -2.2202e-03,\n        -1.8864e-03,  2.0885e-03,  5.6190e-03,  2.4605e-03,  4.5242e-03,  3.0670e-03, -7.1373e-03, -2.8248e-03,  5.8670e-03,  6.7291e-03,  1.2770e-03,  6.3782e-03, -1.6346e-03,  3.7098e-03,  1.7891e-03,  8.2932e-03, -6.6109e-03,  1.0037e-04,  4.4560e-04, -9.2087e-03,  1.0133e-05,  1.2306e-02,  3.0174e-03, -2.0635e-04,\n         3.6507e-03, -9.1553e-04,  3.6106e-03,  7.7400e-03, -2.5120e-03,  6.8207e-03,  2.2049e-03, -3.8395e-03,  1.3628e-03,  7.6294e-04,  6.2332e-03,  2.2202e-03,  8.9111e-03, -1.4105e-03,  1.6800e-02, -1.6947e-03,  5.2567e-03, -1.1463e-03,  4.5013e-03,  2.7275e-03,  8.1062e-04,  2.0215e-01, -1.0643e-02, -8.1863e-03,\n         4.9973e-03,  8.7814e-03,  8.1253e-03, -5.6305e-03, -4.2801e-03,  8.9836e-04, -5.4626e-03,  1.2770e-03, -1.0777e-03, -1.2941e-03,  5.8031e-04,  3.9978e-03, -4.3564e-03, -1.5793e-03, -3.4256e-03, -1.4400e-03,  7.7667e-03,  3.2353e-04,  7.7133e-03, -1.7729e-03,  7.6103e-03,  9.8038e-03,  2.7657e-03,  3.6411e-03,\n        -1.3900e-04,  1.6724e-02,  7.1526e-03,  7.1869e-03, -1.1482e-03,  3.7098e-04, -3.0041e-03,  8.0185e-03,  9.3842e-03,  6.2141e-03, -2.7065e-03,  7.9880e-03,  3.2806e-03,  3.8776e-03,  2.6798e-04, -6.6406e-02, -1.3666e-03, -2.6073e-03,  3.2444e-03,  5.6219e-04, -1.5421e-03, -1.3298e-02,  2.0814e-04, -4.6143e-02,\n         3.2635e-03,  9.0714e-03, -4.2953e-03, -1.6842e-03, -2.0847e-03,  7.9203e-04,  3.7251e-03,  3.8414e-03, -6.9618e-03, -3.8481e-04, -3.1590e-04,  2.9793e-03,  3.3447e-02, -1.8177e-03,  3.7804e-03,  1.7500e-03,  1.7090e-03, -1.7691e-03,  5.2643e-02,  1.9798e-03, -2.4509e-03,  1.7366e-03, -1.7099e-03,  2.8000e-03,\n        -3.5596e-04,  5.8479e-03,  8.2207e-04,  3.0937e-03,  3.9444e-03,  7.2174e-03, -3.4752e-03,  2.2640e-03,  9.8877e-03, -3.4332e-03, -3.0193e-03, -5.5313e-04, -8.1100e-03, -1.2827e-03, -1.9531e-03, -9.9564e-04,  6.0921e-03, -3.8195e-04,  1.6327e-03, -1.5414e-04,  1.0635e-02,  4.6086e-04, -1.9836e-03, -3.3207e-03,\n        -5.0049e-03,  8.1940e-03,  2.5196e-03, -1.6441e-03, -2.6646e-03,  7.8011e-03,  5.4131e-03,  1.9169e-03, -8.1730e-04,  4.1103e-04,  6.4926e-03,  1.6670e-03,  3.4866e-03, -1.3504e-03, -6.2895e-04, -1.2741e-03, -7.8659e-03,  3.4828e-03, -1.8034e-03, -3.2959e-03, -2.2793e-03,  3.8109e-03,  9.5444e-03,  4.7755e-04,\n        -1.0328e-03,  3.6201e-03,  2.0599e-03, -1.3113e-03, -1.0330e-02,  8.6594e-03, -2.1515e-03,  2.3880e-03,  1.3695e-03, -4.5090e-03,  3.7651e-03, -1.0449e-04,  4.3373e-03,  7.0238e-04, -4.4212e-03, -5.6124e-04,  8.1406e-03, -1.4651e-04, -5.3978e-03,  2.4204e-03,  8.0795e-03, -3.4733e-03,  7.2784e-03, -3.3331e-04,\n        -1.7872e-03,  8.1253e-03, -9.9850e-04,  1.5312e-02,  3.3207e-03,  1.0658e-02, -7.8613e-02, -2.5146e-02,  6.0692e-03,  1.4954e-03, -1.7090e-03,  5.9166e-03,  8.4915e-03, -6.5842e-03,  3.7346e-03, -4.1542e-03,  5.0621e-03,  2.7084e-03,  1.6117e-03, -6.8588e-03,  2.1782e-03,  2.1095e-03,  6.5536e-03,  2.9125e-03,\n        -1.6727e-03, -1.6718e-03,  4.9114e-04,  6.5088e-04, -1.6279e-03, -5.8174e-03,  5.1575e-03,  4.6082e-03, -4.8103e-03,  3.6221e-03,  1.8377e-03, -3.0537e-03, -4.5815e-03, -5.2261e-03, -2.0962e-03, -6.3248e-03,  2.3842e-03,  6.6490e-03, -4.2558e-04, -9.0561e-03, -3.0060e-03,  3.8815e-04,  7.5531e-03,  1.9150e-03,\n        -6.7177e-03,  7.8812e-03,  6.9847e-03,  7.0305e-03,  6.5422e-03,  6.9199e-03, -2.8114e-03,  7.5645e-03,  6.0034e-04,  8.3237e-03, -7.8857e-05, -3.6955e-04,  4.8409e-03,  1.6232e-03,  5.1613e-03,  5.4626e-03,  2.7924e-03,  4.9515e-03,  1.2283e-02,  4.7493e-03, -2.4490e-03,  5.8472e-05, -8.1921e-04, -3.3550e-03,\n         2.1973e-03, -3.7212e-03,  3.9787e-03, -5.0430e-03,  5.0278e-03,  8.4305e-03, -4.4746e-03,  1.4820e-03,  5.6124e-04,  7.0610e-03, -3.7613e-03, -4.5300e-05,  9.7656e-04, -4.3373e-03,  3.3474e-03,  4.0741e-03, -3.9749e-03, -1.3227e-03,  6.0463e-03, -4.6921e-03,  4.9210e-03,  3.1805e-04,  5.9013e-03,  1.3933e-03,\n        -5.5428e-03,  1.2124e-04,  2.4242e-03,  1.2560e-03,  9.1743e-04,  8.6899e-03,  8.6746e-03, -1.5564e-03, -2.2316e-03,  4.9934e-03, -2.1420e-03,  2.6836e-03,  5.0201e-03, -3.5191e-03, -5.7182e-03,  3.5954e-04,  4.2076e-03, -3.5973e-03,  9.8145e-02, -3.4466e-03, -8.9493e-03,  4.3755e-03,  1.0672e-03,  1.4238e-03,\n        -1.7977e-03, -6.6452e-03,  7.3814e-03, -1.8164e-01,  3.9368e-03,  2.8706e-03, -2.2869e-03, -1.4830e-03, -1.3714e-03,  2.4929e-03,  5.6076e-03,  4.0207e-03,  4.2534e-04,  5.4359e-03, -8.0185e-03,  4.2877e-03, -3.0861e-03, -6.3324e-04,  6.5117e-03, -3.3035e-03,  3.0251e-03, -3.3703e-03,  1.8768e-03, -1.6298e-03,\n         1.8883e-03, -2.3580e-04,  1.2941e-03,  5.0507e-03,  3.7346e-03, -5.7335e-03, -1.7986e-03, -3.9406e-03, -3.4142e-03,  8.1635e-03, -1.3840e-04,  1.9112e-03,  6.8712e-04,  1.8370e-04,  1.7872e-03, -6.8321e-03,  8.0109e-04,  7.0648e-03,  2.5482e-03, -3.3913e-03, -3.4008e-03,  5.2357e-04,  4.7493e-03,  2.1954e-03,\n         3.3989e-03,  2.2106e-03, -4.3983e-03, -6.2943e-04, -2.2812e-03,  1.1375e-02,  1.8320e-03,  2.7847e-03,  1.4221e-02, -4.0016e-03,  2.1553e-03, -1.9741e-03,  1.1551e-02,  3.4981e-03,  3.2158e-03,  1.7414e-03,  6.1455e-03, -1.4400e-03,  4.1008e-03, -2.6226e-03,  1.9894e-03,  3.6640e-03,  6.8426e-04, -1.8902e-03,\n        -3.3016e-03,  1.0329e-04,  1.1909e-02,  1.7271e-03, -3.0365e-03, -6.7749e-03,  1.1078e-02, -2.7847e-03,  1.9760e-03,  1.3494e-03,  2.0340e-02,  6.9504e-03, -2.4581e-04,  3.3112e-03, -1.5564e-03, -7.9489e-04,  2.8114e-03,  1.0710e-03,  8.8120e-03,  3.0346e-03,  1.9026e-03,  6.6042e-04, -8.4305e-04,  5.0011e-03,\n         9.3794e-04, -2.4581e-04, -2.7466e-03,  7.2336e-04, -7.8559e-05,  3.7251e-03,  1.7624e-03,  1.3762e-03,  5.9776e-03, -7.4081e-03, -4.8294e-03, -1.6165e-04, -6.7558e-03, -5.3368e-03, -6.3515e-03, -2.5806e-03,  7.6447e-03, -8.0109e-03, -2.5725e-04, -1.8196e-03,  7.5493e-03, -3.8052e-03,  2.0905e-03, -2.5711e-03,\n        -1.4694e-02, -1.6022e-03,  3.2883e-03,  7.6115e-05,  2.2087e-03, -3.4924e-03,  5.1117e-03,  4.6806e-03, -2.9697e-03, -6.3477e-03, -2.7122e-03, -3.0613e-03, -2.2030e-03,  1.5945e-02,  1.1337e-02, -1.7786e-04,  4.0970e-03,  2.2869e-03, -4.3225e-04,  3.1929e-03, -1.7424e-03, -8.1177e-03,  2.5043e-03, -3.1033e-03,\n         9.0027e-03, -3.0565e-04,  5.7945e-03, -1.4572e-03, -2.2678e-03,  3.5992e-03, -9.3222e-04,  1.2703e-03, -6.1607e-03, -4.9438e-02, -4.4022e-03,  2.5959e-03, -1.0691e-03,  4.2267e-03,  1.3912e-04, -1.9627e-03, -3.5419e-03, -5.3177e-03, -1.9178e-03,  2.5902e-03, -9.3155e-03,  8.4915e-03,  5.4407e-04,  2.1496e-03,\n        -6.1989e-03,  1.5583e-03,  2.3708e-03,  2.4567e-03,  4.0588e-03, -3.6478e-04, -6.6948e-04, -2.0046e-03, -4.6539e-03,  4.7684e-03,  6.3419e-04, -1.4248e-03,  3.3951e-03,  6.4316e-03,  1.1835e-03,  5.9557e-04,  7.7858e-03,  4.3297e-03,  4.8218e-03,  2.7733e-03,  7.2632e-03,  9.0027e-04,  2.1954e-03,  5.8353e-05,\n         3.9062e-03,  3.2673e-03,  5.8670e-03,  3.6926e-03, -1.7061e-03,  5.9624e-03,  9.9106e-03, -3.2845e-03,  3.7041e-03,  9.0790e-04,  9.7122e-03,  6.4430e-03,  5.0879e-04,  3.8223e-03,  8.5983e-03, -5.5428e-03, -3.9160e-05, -2.7752e-03, -4.4594e-03,  4.8208e-04,  1.0406e-02,  3.5400e-03, -4.7827e-04,  9.0933e-04,\n        -2.3060e-03, -1.6289e-03,  7.2899e-03,  7.9117e-03, -4.0855e-03,  2.2583e-03,  2.6340e-03, -2.9469e-03, -4.1885e-03, -9.1028e-04, -8.7814e-03,  7.0114e-03,  4.4785e-03,  2.2430e-03,  7.0267e-03, -9.5463e-04, -4.0245e-03,  9.0637e-03,  5.0468e-03, -2.8019e-03,  2.1973e-03, -3.2349e-02,  2.1350e-04,  5.4131e-03],\n       dtype=torch.float16), 'perceiver_resampler.layers.0.0.norm1.weight': tensor([0.7563, 0.7856, 0.7852, 0.7539, 0.7373, 0.7803, 0.7656, 0.7964, 0.7974, 0.7524, 0.7632, 0.7485, 0.7695, 0.8027, 0.8057, 0.7700, 0.7744, 0.6948, 0.7754, 0.7773, 0.8145, 0.7349, 0.7666, 0.6685, 0.7520, 0.7949, 0.7534, 0.8105, 0.6270, 0.7349, 0.7563, 0.7993, 0.7769, 0.7563, 0.7930, 0.7632, 0.6504, 0.7568, 0.7573,\n        0.7495, 0.7383, 0.7974, 0.7720, 0.8081, 0.7812, 0.7715, 0.7061, 0.7705, 0.7515, 0.7432, 0.7295, 0.7329, 0.7617, 0.7759, 0.7412, 0.8188, 0.7812, 0.6357, 0.7847, 0.7349, 0.7324, 0.7832, 0.7393, 0.7485, 0.7554, 0.7866, 0.8042, 0.7007, 0.7817, 0.8457, 0.7705, 0.7290, 0.7925, 0.7539, 0.8066, 0.7690, 0.7251, 0.7241,\n        0.7373, 0.7764, 0.7646, 0.7866, 0.7520, 0.7002, 0.7754, 0.7559, 0.7651, 0.7573, 0.7939, 0.7202, 0.7461, 0.7578, 0.7729, 0.7402, 0.7988, 0.6782, 0.7803, 0.7266, 0.7715, 0.7524, 0.7441, 0.7651, 0.7881, 0.7720, 0.7725, 0.7505, 0.7563, 0.7827, 0.7656, 0.7173, 0.7803, 0.7690, 0.7651, 0.7446, 0.7505, 0.7700, 0.7231,\n        0.8003, 0.7559, 0.7236, 0.7490, 0.7471, 0.7715, 0.8677, 0.7046, 0.6704, 0.7500, 0.7744, 0.6274, 0.7563, 0.7104, 0.7646, 0.7393, 0.7583, 0.7422, 0.7905, 0.7832, 0.7295, 0.7666, 0.7822, 0.7471, 0.7446, 0.7119, 0.7471, 0.7739, 0.8257, 0.7612, 0.7246, 0.7764, 0.7070, 0.7461, 0.7129, 0.7725, 0.7295, 0.7827, 0.7412,\n        0.7222, 0.7275, 0.7461, 0.7427, 0.7788, 0.7368, 0.7930, 0.7153, 0.7168, 0.7769, 0.7349, 0.7285, 0.7866, 0.7368, 0.7534, 0.7622, 0.7534, 0.7900, 0.7476, 0.7441, 0.7637, 0.7183, 0.7319, 0.7622, 0.7612, 0.8071, 0.8018, 0.8125, 0.7925, 0.7388, 0.6338, 0.7773, 0.7021, 0.7412, 0.7788, 0.6318, 0.7729, 0.7920, 0.7935,\n        0.7476, 0.7207, 0.7305, 0.7515, 0.8291, 0.7290, 0.7559, 0.7134, 0.7217, 0.7778, 0.7344, 0.7393, 0.8013, 0.7095, 0.7075, 0.7485, 0.7056, 0.6880, 0.7856, 0.7026, 0.6841, 0.7700, 0.7349, 0.7705, 0.7617, 0.7241, 0.7642, 0.8096, 0.8013, 0.7739, 0.6396, 0.7812, 0.7808, 0.7573, 0.7505, 0.7373, 0.7612, 0.8145, 0.7109,\n        0.7505, 0.8071, 0.8125, 0.7627, 0.7271, 0.6826, 0.7700, 0.7593, 0.7637, 0.7236, 0.7002, 0.7344, 0.7305, 0.7588, 0.7646, 0.7852, 0.7817, 0.7476, 0.7051, 0.7031, 0.7583, 0.6982, 0.7588, 0.7603, 0.6523, 0.7368, 0.7456, 0.6987, 0.7778, 0.7393, 0.7754, 0.6821, 0.7412, 0.8120, 0.7456, 0.7437, 0.8086, 0.7134, 0.8550,\n        0.7500, 0.7793, 0.7715, 0.7769, 0.7188, 0.7012, 0.7354, 0.7036, 0.7754, 0.7661, 0.7310, 0.7197, 0.6997, 0.7246, 0.7671, 0.7627, 0.7607, 0.7456, 0.6992, 0.7095, 0.6465, 0.7720, 0.7339, 0.7554, 0.7461, 0.7427, 0.7534, 0.7466, 0.7163, 0.6699, 0.7544, 0.7681, 0.6450, 0.7021, 0.7954, 0.7163, 0.7261, 0.7334, 0.7554,\n        0.7446, 0.7671, 0.7310, 0.7720, 0.7368, 0.7690, 0.7031, 0.8047, 0.7407, 0.7280, 0.7261, 0.7129, 0.7607, 0.7739, 0.7993, 0.7964, 0.7759, 0.7446, 0.7266, 0.7266, 0.8208, 0.7705, 0.7212, 0.8037, 0.7861, 0.7505, 0.7651, 0.7529, 0.7729, 0.7241, 0.7017, 0.7070, 0.7744, 0.7373, 0.7515, 0.7666, 0.7793, 0.7671, 0.7539,\n        0.7988, 0.7319, 0.7476, 0.7573, 0.7832, 0.8066, 0.7388, 0.7480, 0.8223, 0.7817, 0.7070, 0.7720, 0.7314, 0.7734, 0.7007, 0.7598, 0.7290, 0.7515, 0.7700, 0.7891, 0.7588, 0.6909, 0.7534, 0.7700, 0.7622, 0.7637, 0.7759, 0.6709, 0.7593, 0.6997, 0.7261, 0.7529, 0.7725, 0.7168, 0.7529, 0.7524, 0.7622, 0.7354, 0.7432,\n        0.7607, 0.7974, 0.7588, 0.7080, 0.7373, 0.7466, 0.7461, 0.7441, 0.7690, 0.7607, 0.8057, 0.7114, 0.7363, 0.7632, 0.7705, 0.7642, 0.7910, 0.7549, 0.7275, 0.7192, 0.7549, 0.7812, 0.7261, 0.7734, 0.6694, 0.7944, 0.7432, 0.6553, 0.7529, 0.7798, 0.7383, 0.7798, 0.7886, 0.7603, 0.7466, 0.7720, 0.7192, 0.8071, 0.7124,\n        0.7031, 0.7881, 0.7310, 0.7578, 0.7515, 0.7695, 0.7998, 0.7773, 0.7158, 0.7822, 0.7842, 0.7827, 0.7998, 0.7793, 0.7607, 0.7583, 0.7949, 0.7808, 0.7456, 0.6870, 0.7349, 0.7148, 0.7178, 0.7593, 0.7012, 0.7378, 0.7422, 0.7339, 0.7466, 0.7622, 0.7915, 0.7588, 0.7520, 0.7368, 0.7324, 0.7485, 0.7959, 0.7773, 0.7573,\n        0.7915, 0.7393, 0.7856, 0.7246, 0.7256, 0.6699, 0.8018, 0.7593, 0.7612, 0.7603, 0.7671, 0.7808, 0.7290, 0.7319, 0.7466, 0.7612, 0.7334, 0.6938, 0.7607, 0.6499, 0.7559, 0.6758, 0.7632, 0.6177, 0.7197, 0.7334, 0.7925, 0.8003, 0.7651, 0.7539, 0.7446, 0.7539, 0.7397, 0.7534, 0.7363, 0.7163, 0.7451, 0.7725, 0.7520,\n        0.7520, 0.7715, 0.7095, 0.7192, 0.7573, 0.7705, 0.7202, 0.7539, 0.7329, 0.7534, 0.7256, 0.7622, 0.7007, 0.7769, 0.7920, 0.7827, 0.8140, 0.7861, 0.8027, 0.6460, 0.7827, 0.7432, 0.6055, 0.7744, 0.6968, 0.7349, 0.7290, 0.8301, 0.7910, 0.7466, 0.7417, 0.7686, 0.7080, 0.7036, 0.8135, 0.7251, 0.7305, 0.7710, 0.7974,\n        0.7793, 0.7300, 0.7749, 0.7603, 0.7539, 0.7568, 0.7417, 0.7661, 0.8228, 0.7446, 0.7900, 0.7319, 0.7578, 0.7207, 0.6963, 0.7974, 0.7349, 0.7480, 0.7529, 0.7983, 0.7695, 0.7603, 0.7578, 0.7456, 0.7705, 0.7969, 0.7837, 0.6582, 0.7305, 0.7642, 0.7227, 0.7271, 0.7661, 0.7329, 0.7349, 0.7437, 0.7686, 0.8135, 0.8076,\n        0.7129, 0.7158, 0.6709, 0.7563, 0.7573, 0.7202, 0.7524, 0.7515, 0.8042, 0.7549, 0.7485, 0.7847, 0.7563, 0.7451, 0.7319, 0.7192, 0.7563, 0.6709, 0.7358, 0.7515, 0.7134, 0.7500, 0.7764, 0.7666, 0.6963, 0.7544, 0.7681, 0.7432, 0.7427, 0.7808, 0.7397, 0.7021, 0.7373, 0.8042, 0.7871, 0.7251, 0.7891, 0.7104, 0.7842,\n        0.7656, 0.6919, 0.7637, 0.7158, 0.7183, 0.7783, 0.7476, 0.7803, 0.7090, 0.8149, 0.7544, 0.7036, 0.7505, 0.7739, 0.7778, 0.7778, 0.7681, 0.7725, 0.7832, 0.7607, 0.7227, 0.7456, 0.7896, 0.7012, 0.7661, 0.7754, 0.6929, 0.7153, 0.7856, 0.7896, 0.7988, 0.7856, 0.7554, 0.7451, 0.7583, 0.7930, 0.6880, 0.7319, 0.7358,\n        0.6895, 0.7378, 0.7803, 0.7920, 0.7598, 0.7363, 0.7358, 0.6797, 0.7676, 0.7695, 0.7251, 0.7549, 0.8086, 0.7734, 0.7637, 0.7983, 0.7544, 0.7578, 0.7437, 0.7300, 0.7808, 0.7310, 0.6802, 0.7559, 0.7598, 0.7485, 0.7285, 0.7451, 0.7407, 0.7812, 0.7241, 0.7520, 0.8140, 0.7725, 0.7241, 0.7612, 0.7402, 0.6919, 0.7339,\n        0.7886, 0.7368, 0.7642, 0.7368, 0.7671, 0.7705, 0.8076, 0.6904, 0.6836, 0.7075, 0.7593, 0.7368, 0.7437, 0.7905, 0.7563, 0.7754, 0.7573, 0.6025, 0.7612, 0.7847, 0.8037, 0.7847, 0.7646, 0.7534, 0.7104, 0.6797, 0.7534, 0.7944, 0.7104, 0.7783, 0.7334, 0.7236, 0.7622, 0.7632, 0.7168, 0.7568, 0.7295, 0.7524, 0.7319,\n        0.6826, 0.7876, 0.7437, 0.7505, 0.7925, 0.7085, 0.7827, 0.7549, 0.7261, 0.7646, 0.8154, 0.7915, 0.7622, 0.7515, 0.7046, 0.7896, 0.6992, 0.7617, 0.7168, 0.7847, 0.6978, 0.7256, 0.7515, 0.7690, 0.7080, 0.7271, 0.6885], dtype=torch.float16), 'perceiver_resampler.layers.0.0.norm1.bias': tensor([-9.3765e-03,  1.7910e-03, -2.6836e-03, -2.1500e-02,  1.5587e-02, -3.0319e-02, -6.2513e-04,  3.2501e-03,  1.3443e-02, -1.9897e-02,  2.0645e-02, -1.4809e-02, -5.4169e-03, -3.5973e-03, -2.0401e-02,  1.2024e-02,  1.3924e-02, -3.4180e-02, -1.9226e-02, -1.9791e-02,  3.7567e-02, -2.5604e-02, -5.1331e-02, -1.1932e-02,\n        -1.0796e-02, -8.8406e-04, -4.4312e-02, -1.5793e-02,  4.6173e-02, -3.6888e-03,  2.7496e-02, -4.6539e-02,  1.5038e-02,  1.6441e-03, -2.9259e-03,  6.6528e-03,  3.2562e-02,  4.0169e-03, -7.8154e-04,  1.6487e-04,  2.4261e-02, -4.1260e-02,  7.6485e-03,  2.4994e-02, -1.2703e-02, -1.3107e-02, -2.0294e-02, -2.6443e-02,\n        -6.4697e-03,  2.7054e-02,  1.4601e-03,  5.5206e-02,  1.2787e-02,  3.0869e-02,  2.3346e-02,  3.0090e-02,  2.4750e-02,  2.2476e-02,  2.0981e-02, -2.7359e-02,  4.0344e-02, -1.9302e-03, -1.3382e-02, -4.5547e-03, -1.3456e-03, -3.3661e-02, -1.0506e-02, -3.1891e-02, -9.3994e-03, -6.9275e-03, -9.8114e-03, -4.3915e-02,\n         4.1840e-02, -2.0050e-02,  6.3400e-03, -6.0242e-02,  4.0710e-02, -1.1795e-02, -3.2318e-02, -3.5583e-02, -6.9313e-03, -2.5101e-02, -1.3924e-02,  3.2593e-02, -7.3929e-03,  5.7888e-04,  7.6561e-03,  1.0994e-02,  1.6800e-02, -1.3924e-02,  1.6281e-02,  2.5131e-02,  1.3771e-02,  1.3985e-02,  9.3765e-03, -3.7811e-02,\n         5.9242e-03,  5.7373e-03,  3.2139e-03,  1.0811e-02,  2.8839e-02,  1.5144e-02,  4.6959e-03,  3.0167e-02,  1.6632e-02, -2.9354e-03, -3.1490e-03, -1.1551e-02, -3.4424e-02, -1.5472e-02,  1.1563e-04, -1.6785e-02, -9.9945e-03,  1.6571e-02,  1.6617e-02, -4.7516e-02,  1.9913e-02, -3.9577e-04, -3.4821e-02,  1.0941e-02,\n         7.1182e-03, -2.0889e-02, -1.1703e-02,  4.0321e-03, -1.1009e-02, -1.1299e-02,  2.0279e-02,  3.1738e-02,  1.0291e-01,  3.8239e-02,  2.8934e-03,  4.3144e-03,  3.5919e-02, -2.2552e-02,  3.2616e-04,  1.2024e-02,  3.1799e-02,  2.3010e-02, -1.8707e-02,  1.8692e-02, -1.8982e-02, -4.8584e-02,  4.5738e-03, -1.9333e-02,\n         4.0863e-02, -1.3580e-02, -5.8708e-03, -1.4603e-02,  6.1531e-03,  3.6041e-02, -1.4626e-02, -3.1433e-02, -1.8723e-02,  5.3711e-02, -1.3817e-02,  2.5482e-02, -1.2581e-02, -1.9638e-02,  2.9129e-02, -1.4816e-02, -3.7498e-03,  3.6041e-02, -9.4681e-03,  3.7415e-02,  1.0361e-02,  3.0701e-02,  2.6398e-03,  6.5536e-03,\n        -1.1387e-03, -1.9424e-02, -3.8605e-02,  6.7627e-02, -1.4811e-03,  3.7170e-02,  1.1757e-02, -1.6394e-03,  3.3447e-02,  1.0361e-02,  4.0344e-02,  2.3468e-02, -1.2444e-02,  1.5221e-02,  2.5665e-02,  6.1646e-03,  1.0376e-02, -2.0737e-02, -1.2012e-01, -5.9166e-03,  3.5065e-02,  2.3468e-02, -9.8495e-03,  1.4185e-01,\n         8.7051e-03, -1.6739e-02,  5.6686e-03,  4.6173e-02,  1.6281e-02, -3.4256e-03,  3.0014e-02,  1.5656e-02,  3.1677e-02, -2.9251e-02, -2.7939e-02,  4.3144e-03,  2.3834e-02, -4.9164e-02, -4.3976e-02, -1.8341e-02,  2.5009e-02, -1.1276e-02,  2.0477e-02,  1.0406e-02,  3.7170e-02, -6.9580e-03, -8.9722e-03,  2.8793e-02,\n        -6.1684e-03,  1.9703e-03,  4.7058e-02,  7.8506e-03,  2.3666e-02,  1.6342e-02, -7.7868e-04,  8.7204e-03, -1.0521e-02, -5.8655e-02, -3.0533e-02, -1.1124e-02, -8.7891e-03,  3.8147e-02, -2.4658e-02,  3.6049e-03, -4.4441e-04,  2.6871e-02,  2.1915e-03, -1.1337e-02, -2.0508e-02, -1.1299e-02,  2.0035e-02,  9.7351e-03,\n         5.1666e-02, -1.6876e-02, -1.9653e-02,  2.1317e-02, -4.3060e-02, -1.9745e-02, -2.5101e-02, -1.4900e-02, -1.8600e-02, -3.6888e-03,  4.0680e-02, -1.8188e-02, -5.9631e-02,  8.2550e-03, -8.2169e-03,  6.0669e-02,  5.2147e-03, -1.4107e-02, -5.6244e-02, -2.0813e-02, -5.3520e-03, -1.9104e-02,  5.5733e-03, -1.8066e-02,\n         1.3924e-02,  3.8513e-02, -1.4748e-02, -1.7899e-02, -5.4901e-02, -1.4984e-02,  1.2703e-02,  4.8096e-02, -1.3100e-02, -4.8218e-03, -1.8387e-02, -1.1620e-02,  5.6953e-03,  2.4445e-02, -1.7273e-02,  6.7854e-04,  8.1863e-03,  1.2718e-02, -3.8422e-02,  6.9824e-02,  1.6312e-02,  9.1095e-03, -3.0518e-02,  3.6530e-02,\n         1.6006e-02, -1.4763e-02, -1.5083e-02,  2.9053e-02, -3.4847e-03,  2.4628e-02,  9.8801e-03,  1.6266e-02, -5.4741e-03,  2.6199e-02, -4.0344e-02,  1.6830e-02, -7.7171e-03,  2.6627e-02, -7.6477e-02, -2.6596e-02,  1.5717e-03,  3.4943e-02,  4.4647e-02, -6.1531e-03, -8.1024e-03,  1.1147e-02, -3.3588e-03,  1.4133e-03,\n         1.9974e-02,  3.0533e-02, -3.2684e-02,  2.1881e-02, -6.6338e-03,  1.4145e-02,  5.7922e-02,  9.0837e-05, -4.1122e-03, -2.0905e-02, -3.0441e-03,  3.3379e-03, -1.1063e-02,  6.0997e-03, -2.1622e-02,  2.1534e-03, -4.8981e-03, -4.1016e-02, -4.6814e-02, -3.3417e-02,  1.3550e-02,  2.7710e-02, -2.5208e-02, -2.6642e-02,\n        -3.5286e-03, -3.0533e-02, -7.5054e-04, -8.3084e-03,  3.4760e-02, -4.0985e-02, -2.4033e-02,  1.5564e-02,  1.0353e-02, -2.6810e-02, -7.4577e-03, -2.7863e-02, -2.1286e-02, -8.0109e-03,  1.7838e-02,  2.2614e-02,  5.0720e-02, -1.8295e-02,  1.1314e-02, -2.0218e-02, -1.8524e-02,  7.2289e-03, -3.7140e-02, -9.8267e-03,\n        -2.2675e-02, -1.6815e-02, -1.2947e-02,  5.7648e-02, -4.2603e-02, -3.4515e-02, -7.1945e-03, -2.8931e-02,  1.2360e-02, -1.4877e-02,  3.1403e-02, -3.5839e-03, -9.0332e-03,  3.0670e-02, -1.3496e-02, -9.6283e-03,  1.8341e-02,  2.1381e-03, -1.5419e-02, -2.3098e-03,  5.0323e-02,  2.3346e-02, -1.0674e-02, -9.6970e-03,\n        -4.4250e-03, -2.1912e-02,  5.3024e-03, -3.1281e-02,  3.5896e-03,  2.0615e-02,  2.0981e-02,  8.7357e-03,  1.3283e-02,  1.8082e-02, -9.9106e-03, -1.7120e-02,  4.8103e-03,  1.7685e-02,  5.6744e-04, -3.9185e-02, -1.0513e-02, -2.9160e-02,  2.9861e-02, -1.1017e-02, -1.5526e-02, -2.9755e-02, -2.1774e-02, -6.4564e-04,\n        -3.7117e-03, -7.2365e-03, -1.3756e-02,  4.0405e-02, -1.0330e-02, -1.3176e-02,  3.2745e-02,  4.9515e-03, -1.0895e-02,  2.6672e-02,  2.4826e-02, -2.1530e-02,  5.6124e-04,  5.9471e-03, -1.6449e-02,  6.7673e-03,  6.8932e-03,  5.1956e-03, -1.7258e-02,  6.9847e-03,  2.3315e-02,  7.0190e-02,  1.7075e-02, -7.2975e-03,\n        -1.4847e-02,  2.8229e-02, -1.6510e-02, -2.1072e-02,  9.8419e-03, -1.8372e-02,  2.1042e-02, -4.4830e-02, -2.0485e-03, -3.1281e-03, -1.3351e-02, -4.8103e-03,  2.0905e-02,  1.9608e-02, -2.7103e-03, -2.1164e-02,  5.2551e-02, -6.1188e-02, -4.3106e-03, -4.6265e-02, -2.0798e-02,  1.1917e-02,  1.2321e-02,  3.8086e-02,\n         2.6749e-02, -8.4381e-03,  3.8971e-02, -5.1689e-03, -2.7832e-02,  3.8757e-02, -3.9276e-02, -1.3113e-03, -1.8112e-02,  3.6774e-03,  3.2501e-03,  2.2491e-02, -1.6342e-02,  4.8492e-02, -1.7487e-02,  4.4525e-02, -1.9241e-02, -2.2202e-02, -1.2369e-03, -5.0659e-02,  7.7171e-03, -9.8343e-03, -2.0370e-02,  3.2043e-02,\n         2.2934e-02, -2.8946e-02,  3.5744e-03,  1.3458e-02,  3.0838e-02, -1.2497e-02, -1.0109e-02, -4.2633e-02, -2.1687e-03, -2.1774e-02, -3.4393e-02,  7.2876e-02,  2.2202e-02, -1.0933e-02,  5.3894e-02, -2.3361e-02, -1.4763e-02, -3.4451e-04, -1.9821e-02,  1.1078e-02,  6.2256e-03, -7.3853e-03, -1.4442e-02, -5.3528e-02,\n         2.7802e-02, -1.7532e-02, -8.4915e-03,  1.9627e-03, -1.9073e-02, -4.1351e-03,  1.0727e-02,  2.2583e-03, -8.2550e-03,  7.5302e-03, -1.2684e-03, -2.8152e-02, -5.1422e-03,  2.6207e-03, -1.0658e-02, -2.8381e-02, -6.4125e-03,  3.2227e-02,  2.7557e-02,  1.1543e-02,  8.3983e-05,  2.6108e-02, -4.9255e-02, -1.1978e-02,\n         1.1568e-03, -8.9661e-02, -4.6539e-03,  3.3970e-03,  3.7262e-02, -1.0658e-02, -6.9962e-03,  7.9498e-03, -2.6062e-02, -5.9814e-03,  3.5065e-02, -1.8585e-02, -4.9316e-02, -1.7334e-02, -4.8309e-02,  8.9417e-03, -8.1787e-03, -2.2110e-02,  2.8778e-02,  1.4992e-02, -2.8046e-02, -2.7084e-02,  2.5192e-02,  5.2681e-03,\n         1.8326e-02,  6.7711e-03,  9.4032e-04, -4.8676e-02, -5.6114e-03,  4.8157e-02, -8.7814e-03, -1.4046e-02, -2.4063e-02, -4.2847e-02, -1.3161e-02, -1.0223e-02,  8.2321e-03, -1.6083e-02,  1.8173e-02, -1.0254e-02,  7.4234e-03, -2.0767e-02, -9.9182e-03,  2.0275e-03, -1.7075e-02,  3.4027e-02, -1.4633e-02,  1.3161e-02,\n         5.7106e-03, -4.5776e-02, -4.1290e-02, -1.9104e-02,  1.2238e-02,  2.8397e-02, -2.9434e-02,  1.3771e-03,  2.8564e-02,  1.4221e-02,  1.8768e-03, -5.6458e-04, -1.2909e-02, -3.8300e-02, -2.8656e-02, -1.0376e-02,  1.9592e-02,  2.2980e-02,  3.0537e-03,  1.7120e-02,  1.0086e-02,  1.1292e-02, -1.7929e-02, -9.4757e-03,\n        -1.0185e-02,  2.8717e-02,  1.1549e-03, -6.5565e-05,  5.6610e-03, -1.7883e-02,  3.2558e-03, -5.1994e-03,  5.8556e-03,  1.0008e-04, -2.7298e-02, -3.4637e-02, -1.3952e-03,  2.2526e-03, -1.2871e-02,  9.6130e-03,  3.5339e-02,  4.0100e-02,  3.9520e-02,  1.9409e-02, -2.7710e-02,  1.6708e-02, -2.3987e-02, -2.7527e-02,\n        -1.7487e-02,  4.6448e-02,  1.0925e-02, -2.6978e-02,  5.3062e-03,  1.9135e-02,  8.9569e-03, -2.1194e-02,  3.2867e-02,  1.3008e-02,  1.9424e-02, -2.4094e-02,  4.9973e-03,  1.3313e-02, -5.2681e-03, -2.5131e-02,  2.2217e-02, -1.8555e-02,  2.1240e-02, -2.5116e-02, -3.8109e-03, -9.1248e-03, -3.3112e-02, -2.3331e-02,\n         2.0279e-02,  8.9645e-03, -2.4567e-02, -2.4963e-02, -9.9564e-03, -1.2083e-03,  2.1606e-02,  4.0283e-03, -5.3978e-03,  6.3038e-04, -2.7756e-02, -2.2339e-02,  1.8219e-02,  5.6976e-02,  1.9379e-02,  3.1143e-02,  1.4038e-02, -4.6425e-03,  4.3297e-03,  1.1383e-02, -1.4137e-02,  7.7286e-03, -3.8177e-02, -5.5511e-02,\n        -3.1910e-03, -1.7462e-03,  7.0267e-03, -3.1021e-02, -8.7051e-03, -1.4633e-02, -6.2256e-03,  3.6049e-03, -2.3972e-02, -1.0025e-02, -2.7084e-02, -2.2202e-02, -4.7421e-04, -3.4389e-03,  5.0392e-03, -5.2376e-03,  1.0328e-03,  6.2406e-05, -1.7731e-02,  1.3153e-02,  1.4610e-02,  2.7786e-02, -2.6917e-02,  1.4496e-02,\n        -1.0132e-02,  3.5278e-02,  2.4658e-02,  1.7654e-02,  2.4002e-02,  4.4067e-02, -2.1393e-02,  2.5055e-02,  2.5787e-02, -3.2867e-02, -2.9633e-02, -2.7039e-02, -2.0828e-03, -2.5116e-02, -3.5522e-02, -2.2308e-02, -1.1225e-03,  6.6772e-02,  7.5722e-03, -1.9681e-04, -5.5756e-02,  2.9312e-02,  2.4734e-02,  1.3989e-01,\n         2.3186e-04, -9.4843e-04, -3.1525e-02, -1.7670e-02, -2.7145e-02,  5.6038e-03, -1.6144e-02, -5.2521e-02,  1.5312e-02,  8.2016e-03, -4.2786e-02, -2.7542e-02, -1.0658e-02,  4.1924e-03, -3.0243e-02,  1.3411e-05,  2.7435e-02, -2.1896e-02, -6.8779e-03,  1.3466e-02,  1.7166e-02,  2.2018e-02,  1.1703e-02, -1.3580e-02,\n        -6.9656e-03, -7.3357e-03, -1.1749e-02, -3.9673e-03,  1.7960e-02,  3.6255e-02,  5.0079e-02,  2.3468e-02,  2.3514e-02,  1.6159e-02, -2.1149e-02,  3.0193e-03, -3.9697e-04, -4.2450e-02, -1.0574e-02,  5.9235e-02,  2.1439e-03,  2.8809e-02, -1.5762e-02, -1.6617e-02,  1.9974e-02,  1.6434e-02, -3.9581e-02, -8.5999e-02],\n       dtype=torch.float16), 'perceiver_resampler.layers.0.0.norm2.weight': tensor([0.6997, 0.7153, 0.7490, 0.7002, 0.6899, 0.7007, 0.7324, 0.6167, 0.7505, 0.7310, 0.7046, 0.7329, 0.7168, 0.7188, 0.7427, 0.7095, 0.6890, 0.6943, 0.7227, 0.5552, 0.6831, 0.7803, 0.6890, 0.6992, 0.6973, 0.7271, 0.6875, 0.7075, 0.7529, 0.7085, 0.7471, 0.6899, 0.7217, 0.7412, 0.7310, 0.6660, 0.7598, 0.6724, 0.7710,\n        0.6934, 0.6802, 0.7344, 0.7017, 0.7603, 0.6606, 0.6875, 0.7305, 0.7114, 0.7012, 0.7080, 0.7295, 0.7441, 0.7178, 0.7295, 0.7026, 0.7178, 0.6914, 0.7334, 0.7017, 0.7100, 0.7026, 0.7217, 0.7520, 0.7368, 0.7065, 0.6924, 0.6948, 0.6343, 0.7617, 0.7378, 0.7397, 0.7197, 0.7554, 0.6836, 0.7466, 0.7178, 0.7432, 0.7622,\n        0.6987, 0.7212, 0.7427, 0.7100, 0.7012, 0.7104, 0.7393, 0.7290, 0.7559, 0.7427, 0.6963, 0.7300, 0.6797, 0.7100, 0.7476, 0.7764, 0.7319, 0.7500, 0.7021, 0.7676, 0.7031, 0.6934, 0.7407, 0.7290, 0.7495, 0.6982, 0.7612, 0.7188, 0.6934, 0.7407, 0.7383, 0.7056, 0.7246, 0.7271, 0.7056, 0.7334, 0.7671, 0.7759, 0.7744,\n        0.7158, 0.6919, 0.6968, 0.7344, 0.7573, 0.7490, 0.8120, 0.6802, 0.7563, 0.7217, 0.6948, 0.7314, 0.7085, 0.6797, 0.6641, 0.7002, 0.6919, 0.7129, 0.7495, 0.7007, 0.7661, 0.7129, 0.7212, 0.7373, 0.7437, 0.6631, 0.7026, 0.7134, 0.7158, 0.6519, 0.7285, 0.7354, 0.7280, 0.7261, 0.6729, 0.7661, 0.7095, 0.7026, 0.7354,\n        0.6943, 0.6963, 0.7300, 0.7065, 0.7407, 0.6782, 0.6982, 0.6172, 0.7334, 0.7202, 0.7163, 0.7231, 0.7344, 0.6675, 0.6992, 0.7539, 0.7280, 0.7842, 0.7173, 0.7598, 0.6943, 0.6870, 0.7495, 0.6763, 0.7095, 0.6831, 0.7358, 0.7144, 0.6865, 0.7446, 0.6880, 0.7324, 0.7632, 0.7363, 0.7061, 0.6807, 0.6978, 0.7271, 0.7241,\n        0.7422, 0.7202, 0.6724, 0.6992, 0.6943, 0.7407, 0.6592, 0.7412, 0.7803, 0.7173, 0.7568, 0.6680, 0.7349, 0.7266, 0.7017, 0.7031, 0.6030, 0.6421, 0.6963, 0.5283, 0.7383, 0.7046, 0.7397, 0.7310, 0.7344, 0.7305, 0.7646, 0.6753, 0.7637, 0.6895, 0.7437, 0.7012, 0.7759, 0.6782, 0.7212, 0.7202, 0.6797, 0.6538, 0.6953,\n        0.7378, 0.6455, 0.7041, 0.6519, 0.6826, 0.7222, 0.7383, 0.6196, 0.7266, 0.7378, 0.7065, 0.7124, 0.7612, 0.7583, 0.6929, 0.7266, 0.6875, 0.7617, 0.6421, 0.6846, 0.4973, 0.7285, 0.7031, 0.6665, 0.5063, 0.6968, 0.7324, 0.5679, 0.6675, 0.7344, 0.6914, 0.4683, 0.7104, 0.7012, 0.7451, 0.7339, 0.7466, 0.6895, 0.6860,\n        0.7271, 0.7412, 0.6992, 0.7266, 0.7334, 0.7129, 0.7524, 0.6978, 0.6470, 0.7041, 0.6904, 0.6323, 0.7451, 0.7627, 0.7285, 0.6890, 0.6831, 0.6499, 0.7422, 0.7070, 0.6733, 0.7168, 0.7432, 0.6875, 0.7808, 0.7256, 0.6621, 0.7051, 0.6968, 0.7324, 0.5537, 0.7544, 0.6729, 0.7139, 0.6782, 0.7163, 0.6528, 0.7275, 0.5161,\n        0.7246, 0.6968, 0.6860, 0.7617, 0.7222, 0.7129, 0.7002, 0.7695, 0.7334, 0.7007, 0.7031, 0.6699, 0.6909, 0.7749, 0.7607, 0.7524, 0.6909, 0.6787, 0.4934, 0.7837, 0.7202, 0.7344, 0.7749, 0.7437, 0.7427, 0.6890, 0.7026, 0.7334, 0.7329, 0.7168, 0.6968, 0.6860, 0.7080, 0.7407, 0.7368, 0.7109, 0.7021, 0.7437, 0.6948,\n        0.7476, 0.7231, 0.7617, 0.7095, 0.6782, 0.7124, 0.7500, 0.7412, 0.6772, 0.7065, 0.7031, 0.7231, 0.7344, 0.7568, 0.5762, 0.7061, 0.7715, 0.7129, 0.7100, 0.6191, 0.6831, 0.7183, 0.7437, 0.7017, 0.7222, 0.6904, 0.6226, 0.6650, 0.6948, 0.7339, 0.7349, 0.6758, 0.7207, 0.7437, 0.7275, 0.6914, 0.7007, 0.7012, 0.7075,\n        0.7212, 0.7373, 0.7310, 0.6890, 0.6846, 0.7261, 0.7617, 0.7622, 0.6992, 0.7070, 0.6597, 0.6562, 0.7363, 0.6973, 0.7119, 0.7124, 0.7070, 0.7300, 0.7300, 0.7446, 0.7168, 0.6670, 0.7476, 0.7676, 0.5122, 0.7764, 0.7222, 0.6650, 0.7266, 0.7280, 0.7593, 0.7700, 0.7402, 0.7412, 0.7334, 0.7114, 0.7725, 0.7363, 0.6763,\n        0.7363, 0.7505, 0.6846, 0.6899, 0.7349, 0.6875, 0.6987, 0.7402, 0.7446, 0.7114, 0.6963, 0.7305, 0.7178, 0.7700, 0.7119, 0.7261, 0.7534, 0.6733, 0.6465, 0.7227, 0.7246, 0.7676, 0.6807, 0.7153, 0.8096, 0.7700, 0.6855, 0.6240, 0.7085, 0.7300, 0.7588, 0.7070, 0.7114, 0.7344, 0.7300, 0.7451, 0.7769, 0.7358, 0.7627,\n        0.6689, 0.7417, 0.7183, 0.7412, 0.7285, 0.7754, 0.7344, 0.7305, 0.6807, 0.7197, 0.7690, 0.6685, 0.6997, 0.7227, 0.7227, 0.7383, 0.7646, 0.6768, 0.7710, 0.6699, 0.7310, 0.7178, 0.7563, 0.7524, 0.7148, 0.7354, 0.7339, 0.7119, 0.7314, 0.6978, 0.6899, 0.6689, 0.7017, 0.7822, 0.7700, 0.7080, 0.7017, 0.7222, 0.7080,\n        0.6626, 0.6748, 0.6929, 0.7217, 0.7588, 0.7236, 0.6729, 0.7109, 0.7202, 0.7002, 0.6899, 0.7446, 0.7329, 0.7783, 0.7271, 0.5601, 0.7095, 0.7412, 0.7070, 0.7480, 0.6831, 0.7183, 0.6929, 0.6899, 0.5977, 0.7598, 0.6802, 0.7017, 0.6851, 0.7129, 0.7324, 0.7310, 0.6875, 0.6865, 0.7207, 0.7178, 0.7568, 0.7334, 0.7549,\n        0.7212, 0.7021, 0.7451, 0.6807, 0.7583, 0.7114, 0.8145, 0.6782, 0.7095, 0.6997, 0.7744, 0.7168, 0.7124, 0.7305, 0.7227, 0.7192, 0.7661, 0.7524, 0.7593, 0.7441, 0.6689, 0.7056, 0.7158, 0.5757, 0.7051, 0.7202, 0.7676, 0.7144, 0.6792, 0.7070, 0.7100, 0.7280, 0.7002, 0.7373, 0.7812, 0.6904, 0.7554, 0.6821, 0.6694,\n        0.7529, 0.7305, 0.7573, 0.7378, 0.7251, 0.7051, 0.7119, 0.7134, 0.7358, 0.7056, 0.8018, 0.7358, 0.7290, 0.7646, 0.6934, 0.6826, 0.7212, 0.6719, 0.7217, 0.7407, 0.7485, 0.6470, 0.7344, 0.7407, 0.7734, 0.6011, 0.7427, 0.6841, 0.6821, 0.7720, 0.6973, 0.7339, 0.7017, 0.6821, 0.7666, 0.7207, 0.6953, 0.7007, 0.7144,\n        0.7227, 0.7769, 0.6992, 0.7598, 0.7339, 0.7080, 0.7217, 0.7397, 0.7388, 0.5771, 0.7188, 0.7417, 0.7114, 0.6836, 0.6475, 0.6909, 0.6641, 0.7031, 0.7036, 0.7539, 0.6572, 0.7227, 0.6572, 0.6846, 0.6846, 0.7354, 0.7266, 0.7373, 0.7188, 0.7031, 0.7349, 0.7153, 0.7529, 0.7427, 0.6094, 0.6914, 0.7192, 0.6460, 0.7695,\n        0.7280, 0.6792, 0.7427, 0.7925, 0.7847, 0.7944, 0.7383, 0.7158, 0.7290, 0.6743, 0.7407, 0.6846, 0.7505, 0.7388, 0.7124, 0.7373, 0.6797, 0.7158, 0.6577, 0.6909, 0.7593, 0.7603, 0.7412, 0.7690, 0.7637, 0.6880, 0.6772, 0.7539, 0.6606, 0.7300, 0.7363, 0.6992, 0.7817, 0.7466, 0.7461, 0.6919, 0.7451, 0.6821, 0.6636,\n        0.6885, 0.7524, 0.6509, 0.7017, 0.7539, 0.7119, 0.6934, 0.6968, 0.7231, 0.6865, 0.7285, 0.6597, 0.7661, 0.7373, 0.7139, 0.6958, 0.7017, 0.7842, 0.7012, 0.7676, 0.7207, 0.7061, 0.7480, 0.7705, 0.7207, 0.6006, 0.6704, 0.7256, 0.6826, 0.6787, 0.6797, 0.7085, 0.7080, 0.7324, 0.8032, 0.7349, 0.6646, 0.7065, 0.6499,\n        0.7168, 0.7637, 0.7046, 0.7744, 0.6909, 0.7456, 0.7427, 0.7241, 0.7476, 0.7271, 0.7100, 0.7207, 0.6948, 0.6982, 0.6636, 0.7173, 0.7153, 0.6807, 0.7012, 0.7363, 0.6909, 0.7144, 0.7241, 0.7251, 0.5645, 0.7090, 0.7051], dtype=torch.float16), 'perceiver_resampler.layers.0.0.norm2.bias': tensor([ 6.2744e-02,  1.2494e-01,  1.9562e-02,  9.8572e-02,  5.7404e-02, -8.5220e-03, -2.5757e-02, -1.7310e-01,  2.6226e-03,  8.9874e-03, -4.2603e-02,  2.9724e-02, -7.3303e-02, -7.7095e-03, -2.7817e-02, -4.1901e-02, -2.4231e-02, -5.2032e-03, -1.0309e-01,  5.0278e-03, -8.2642e-02, -6.0822e-02,  2.2186e-02, -7.5378e-02,\n         4.3152e-02,  2.1622e-02, -6.7688e-02,  1.1200e-01,  7.7881e-02, -7.8064e-02, -5.8319e-02, -3.0640e-02,  2.1790e-02, -7.4219e-02, -1.0139e-02,  2.5543e-02, -9.1064e-02,  4.8676e-03,  4.8309e-02,  9.8724e-03,  5.6982e-04, -1.6144e-02, -4.3610e-02,  2.0561e-03, -6.0150e-02,  3.1052e-02,  3.4515e-02, -9.3201e-02,\n        -4.4281e-02,  1.5610e-02,  1.7792e-02,  2.6047e-02, -6.0150e-02,  7.4425e-03, -1.9485e-02, -3.5950e-02, -4.1351e-02, -4.9133e-02,  1.0388e-01, -1.2291e-02, -9.2697e-03, -6.8176e-02,  4.2763e-03,  2.7191e-02,  8.7036e-02, -7.3181e-02, -4.9500e-02,  6.2622e-02,  3.0975e-02, -3.5156e-02, -3.2410e-02, -7.6660e-02,\n         4.1870e-02, -1.1389e-01, -9.9087e-04,  3.8574e-02,  1.7395e-02,  6.2134e-02, -9.4070e-03,  2.9099e-02,  2.7740e-02,  4.6875e-02, -1.7715e-02,  2.9938e-02, -5.3497e-02, -3.5217e-02,  3.8391e-02,  6.9702e-02, -3.6987e-02,  6.8542e-02, -2.9099e-02,  5.5176e-02, -2.9846e-02, -4.7424e-02,  3.5431e-02,  1.1177e-02,\n         3.9795e-02, -3.6469e-02, -4.2419e-03, -5.0568e-02,  5.9662e-02, -5.8899e-02, -9.8267e-02,  2.9236e-02, -1.0361e-02, -8.5876e-02, -8.3801e-02, -2.3880e-02, -5.6885e-02, -2.1434e-04,  2.2430e-02,  7.0618e-02,  9.3811e-02,  7.2754e-02, -9.2896e-02, -1.6851e-03, -5.1086e-02,  3.1021e-02,  5.2673e-02,  3.1250e-02,\n         9.1858e-03, -8.7158e-02,  1.5480e-02,  5.4131e-03,  3.2562e-02, -8.6365e-02,  3.2196e-02,  3.5706e-02, -3.2253e-03, -1.2527e-02, -3.7750e-02, -4.8920e-02,  1.0382e-01, -6.6467e-02,  7.0007e-02, -2.2182e-03,  4.2114e-03, -5.0049e-02, -1.8024e-03, -2.0676e-02,  1.4793e-02, -8.7646e-02, -2.3956e-02, -7.8918e-02,\n         5.4260e-02,  2.6871e-02,  4.2938e-02,  8.0109e-03, -7.4951e-02,  2.4216e-02,  3.5187e-02, -6.4209e-02, -1.3367e-02,  1.0406e-01,  1.2573e-02,  8.2214e-02,  6.7688e-02, -4.0985e-02, -2.1572e-03, -6.5125e-02,  7.1106e-02,  2.9354e-03,  2.0340e-02,  1.1902e-02, -2.8443e-04,  4.2389e-02,  1.4259e-02, -2.0126e-02,\n        -2.5467e-02, -7.9102e-02, -6.0539e-03,  3.7231e-02,  5.2216e-02, -3.3356e-02,  2.3209e-02, -4.5349e-02,  2.5787e-02, -7.2937e-02,  1.8478e-02, -3.0121e-02, -9.5581e-02, -7.8308e-02, -5.6061e-02,  2.3621e-02,  7.3624e-03,  2.9678e-02,  3.3131e-03,  1.8042e-01,  3.6835e-02, -2.7023e-02, -9.4421e-02, -4.2305e-03,\n        -1.8112e-02,  3.5126e-02,  1.0547e-01,  2.5574e-02,  9.6130e-02, -7.1899e-02, -1.1432e-01,  5.2582e-02,  1.2006e-01, -8.0688e-02,  2.4509e-03,  2.3926e-02, -2.9800e-02, -1.8326e-02, -2.6436e-03, -3.6652e-02,  7.7629e-03,  1.3831e-01, -3.9703e-02, -1.0413e-01,  3.8239e-02,  4.3823e-02,  2.3682e-01, -4.2755e-02,\n        -4.0619e-02,  5.7617e-02,  3.3203e-02,  3.0823e-03,  2.2980e-02,  9.4849e-02, -4.4617e-02,  6.3744e-03,  6.7566e-02,  1.2543e-02, -8.4473e-02,  3.1643e-03, -6.2195e-02, -2.3758e-02,  9.1431e-02, -7.2449e-02,  4.5319e-02,  3.5248e-02,  2.0081e-02,  7.8735e-02, -4.6997e-02, -2.9556e-02,  3.8147e-02, -1.6068e-02,\n        -3.7201e-02, -1.1621e-01, -9.5215e-02, -4.0817e-03,  1.6968e-02, -5.1208e-02,  4.4037e-02, -1.6298e-03, -7.3303e-02, -6.7253e-03, -2.5421e-02, -5.0201e-02, -9.4482e-02, -4.3884e-02,  1.0626e-01,  1.0242e-01,  6.8115e-02,  2.6550e-02,  1.2524e-01, -4.8798e-02,  1.0535e-01,  1.8750e-01,  8.2764e-02,  9.8999e-02,\n        -4.8248e-02,  1.2463e-01,  3.5309e-02, -3.6774e-02, -2.0844e-02,  1.0468e-01, -2.2171e-02, -9.2834e-02,  9.8145e-02,  3.8452e-03, -4.6753e-02,  4.7882e-02, -4.6509e-02,  1.3329e-02, -2.9266e-02,  2.4094e-02,  4.6143e-02, -4.2633e-02,  4.5013e-03,  4.9835e-02, -3.6812e-03,  3.7628e-02,  3.8208e-02, -8.4991e-03,\n        -5.0568e-02, -1.3565e-02, -1.9135e-02, -5.8746e-02, -2.5604e-02, -3.3478e-02,  8.1970e-02,  3.1052e-02, -3.8269e-02,  3.5645e-02, -5.2124e-02, -1.3870e-02,  1.5778e-02,  3.0289e-03, -6.5727e-03, -2.2705e-01, -4.7546e-02,  6.8054e-02,  6.6528e-02, -3.0807e-02, -5.7449e-03,  1.7654e-02, -6.5918e-02, -8.5693e-02,\n         7.7332e-02,  2.3468e-02, -1.0327e-01, -8.7524e-02,  4.9164e-02,  2.3911e-02,  6.1249e-02, -1.5343e-02,  5.5969e-02,  1.4336e-02, -1.0635e-02,  2.1835e-02,  5.7098e-02, -2.2980e-02,  1.6647e-02, -3.4428e-03, -3.3512e-03,  1.1078e-01,  1.4612e-01, -7.7438e-03,  7.7087e-02, -9.4666e-02,  3.9215e-02,  9.1064e-02,\n         3.6102e-02,  7.1220e-03,  2.2873e-02, -1.9043e-02,  6.2042e-02, -6.9153e-02,  1.0681e-01,  9.3018e-02, -8.0261e-02, -3.9764e-02, -4.9286e-02, -6.1310e-02, -4.9408e-02, -1.2962e-02,  9.5444e-03,  5.5511e-02,  1.0699e-01, -1.1206e-01,  3.6011e-02, -1.7349e-02, -7.9529e-02, -1.1528e-02,  2.1866e-02,  8.0383e-02,\n         9.0179e-03,  1.2970e-02, -5.7434e-02,  2.8168e-02, -1.6739e-02,  2.7954e-02, -6.9946e-02, -1.0773e-01, -6.7322e-02,  1.0364e-01,  7.5317e-02, -3.9612e-02, -3.5229e-03,  4.6875e-02,  2.1851e-02,  3.6133e-02, -9.2163e-02, -1.1792e-01,  7.2449e-02, -6.5918e-02, -2.5864e-03,  1.0712e-01, -3.0426e-02, -9.2590e-02,\n        -3.9703e-02, -6.4148e-02,  1.8631e-02,  8.7214e-04, -5.1003e-03,  2.7023e-02,  2.4963e-02,  8.7952e-02,  2.1915e-03, -3.5828e-02, -8.7158e-02,  9.0637e-02,  2.4261e-03, -1.2650e-02, -9.2850e-03, -2.6283e-03,  2.8122e-02, -2.9465e-02, -2.8824e-02,  1.5121e-02, -3.4943e-02,  6.6895e-02, -3.1433e-02,  5.9326e-02,\n         6.3416e-02,  1.3294e-03, -5.1910e-02,  7.8491e-02,  3.9642e-02, -2.6794e-02, -1.4148e-01, -1.1505e-01, -7.4280e-02,  2.6520e-02, -7.0923e-02, -1.9379e-02,  1.9989e-03,  8.2886e-02, -3.3234e-02,  5.5046e-03,  1.5979e-01, -2.4994e-02,  7.2021e-02,  2.8091e-02,  7.4997e-03, -3.7506e-02,  4.3213e-02, -3.2196e-02,\n        -7.1594e-02,  5.8411e-02, -1.8417e-02, -8.7051e-03,  3.8269e-02,  4.3564e-03,  4.8462e-02,  3.2272e-03, -1.9562e-02, -6.8787e-02,  1.7593e-02, -2.4338e-03,  6.0181e-02, -1.3535e-02,  5.9875e-02, -8.4351e-02,  7.1533e-02, -2.0897e-04,  4.0802e-02,  4.2053e-02, -9.3307e-03,  2.4323e-02, -6.7215e-03,  1.7960e-02,\n         1.3086e-01,  3.3020e-02,  2.9663e-02, -7.2517e-03, -5.9784e-02,  7.8857e-02,  2.4658e-02, -1.1023e-01,  1.8066e-02,  4.7699e-02,  5.5542e-02, -3.3142e-02,  2.4748e-04,  5.2277e-02,  2.3178e-02, -4.0131e-02, -5.3558e-02,  7.0076e-03,  4.8615e-02,  9.1553e-02, -7.2693e-02, -1.2848e-02,  9.7561e-04,  6.2065e-03,\n        -3.8910e-02,  9.9548e-02, -2.0721e-02,  1.1810e-01,  4.0436e-02, -5.1544e-02, -4.2664e-02, -5.8365e-03, -9.0088e-02, -8.9264e-03,  2.5940e-02, -6.7635e-03, -2.0660e-02,  7.7271e-02,  4.9171e-03, -5.8014e-02, -5.0385e-02,  3.1586e-03,  8.5526e-03,  2.6459e-02,  3.0334e-02,  5.4749e-02, -5.6572e-03, -1.9287e-02,\n        -4.7882e-02, -3.0441e-02, -8.1055e-02, -8.4778e-02,  1.4124e-01, -4.3793e-02,  4.9896e-02, -3.7231e-02,  3.7170e-02, -1.5326e-03, -6.1737e-02, -8.1253e-03, -1.1663e-03,  1.0675e-01, -1.6724e-02, -6.4453e-02, -2.6550e-02,  5.9326e-02,  2.0081e-01,  6.8237e-02, -8.6914e-02,  6.4758e-02,  1.2976e-01, -9.8572e-02,\n        -3.1464e-02, -9.1324e-03, -4.7188e-03, -1.7676e-01, -5.8411e-02,  1.4618e-02, -1.6418e-02, -7.3120e-02,  4.4159e-02, -3.7872e-02, -1.4137e-02, -1.2672e-02,  6.6185e-03, -4.5929e-02,  5.8228e-02,  5.5115e-02,  5.3162e-02,  3.4637e-02, -8.6670e-03,  2.5726e-02, -1.3626e-02, -4.2358e-02,  3.3020e-02,  5.8563e-02,\n         3.5919e-02, -7.1907e-03, -6.7444e-02,  4.7028e-02,  8.6641e-04,  1.0266e-01, -1.0522e-01,  1.0262e-02,  2.0981e-02, -7.7019e-03, -2.3834e-02, -1.1757e-02, -6.7673e-03, -2.2797e-02,  3.3112e-02, -1.4453e-01,  1.9547e-02,  7.7637e-02,  6.8115e-02, -1.9073e-02,  2.7145e-02,  6.1493e-02, -3.1525e-02, -6.0883e-02,\n         3.8605e-02, -4.4189e-02, -5.7739e-02,  5.4871e-02,  6.0760e-02, -1.3153e-02,  1.2927e-01, -2.1698e-02, -6.7177e-03,  1.3672e-01, -1.6602e-02,  8.3252e-02, -9.0515e-02, -1.8402e-02, -4.8828e-02,  2.5436e-02,  2.9526e-02, -6.3965e-02,  2.0126e-02,  8.9294e-02,  2.6825e-02, -3.0624e-02, -2.9572e-02, -4.0649e-02,\n         8.9417e-02, -5.0781e-02,  5.2124e-02, -8.0444e-02,  2.4445e-02,  1.8784e-02,  4.8447e-03, -1.4679e-02, -3.6865e-02,  6.0913e-02,  9.6863e-02,  2.6306e-02, -3.5706e-02, -7.0679e-02,  5.3375e-02,  3.7720e-02, -6.1615e-02, -1.7960e-02,  3.3630e-02, -2.0020e-02, -2.4204e-03, -5.1117e-02, -4.3335e-02, -6.6223e-03,\n        -1.7212e-02, -1.8860e-02, -2.5681e-02,  2.3155e-03,  3.8086e-02, -2.2781e-02, -6.3782e-02,  4.6570e-02, -2.2659e-02, -1.2500e-01,  5.6824e-02, -2.6047e-02,  6.3049e-02,  1.3501e-01,  3.8116e-02,  3.9856e-02,  6.8970e-03,  1.8295e-02, -5.3772e-02,  4.7150e-02, -3.5034e-02,  7.6065e-03, -1.5601e-01, -2.1545e-02,\n         2.7313e-02,  3.0060e-02, -4.3884e-02, -5.8838e-02,  4.4128e-02, -3.0182e-02, -5.2643e-04,  5.4626e-02,  1.1353e-02,  8.2458e-02,  8.9355e-02,  2.5055e-02,  4.0314e-02,  1.3313e-02,  1.9531e-02,  9.0820e-02, -2.8854e-02,  2.7161e-02,  1.0971e-02,  3.8727e-02,  2.5345e-02,  5.1422e-02, -5.5542e-02,  5.1727e-02,\n        -4.6448e-02, -2.9449e-02,  2.3941e-02, -1.3916e-02,  1.0956e-02, -2.0035e-02,  4.7241e-02,  3.8116e-02, -2.3880e-02, -1.0992e-01, -4.1077e-02,  1.0788e-02, -2.1774e-02,  3.7872e-02,  5.8685e-02, -2.0645e-02,  8.6182e-02,  8.8623e-02,  1.8143e-02,  1.2756e-02, -8.2581e-02,  2.8397e-02, -6.7505e-02, -9.5367e-03,\n        -8.3496e-02,  1.3451e-02,  4.2542e-02, -6.1493e-02,  2.3022e-03,  1.4258e-01,  8.5815e-02, -7.6355e-02,  5.5145e-02, -6.0028e-02,  2.8137e-02, -3.6102e-02,  9.4238e-02,  7.5378e-02, -5.2277e-02,  1.2413e-02, -5.0842e-02,  4.2175e-02,  8.6060e-02, -3.0106e-02,  4.0405e-02,  9.2896e-02,  6.5979e-02, -9.1934e-03,\n         3.6072e-02, -1.0002e-02, -4.6722e-02, -4.0359e-03, -5.1605e-02,  2.9388e-02, -5.4260e-02, -3.3569e-02, -5.0110e-02,  2.9327e-02,  1.4870e-02,  5.2460e-02,  2.5406e-02,  3.8605e-03,  8.8425e-03,  1.2955e-02,  2.8259e-02,  1.2390e-02, -8.3862e-02, -4.8370e-02, -6.0455e-02,  7.6843e-02, -5.5206e-02, -4.8553e-02,\n         1.8860e-02,  3.6255e-02,  3.9856e-02, -1.7624e-02, -4.7951e-03, -7.7942e-02, -2.7145e-02,  5.1558e-05,  1.5015e-02,  2.7954e-02,  1.2451e-02,  2.8305e-02, -2.5345e-02,  7.3303e-02, -6.9946e-02,  4.4098e-02, -9.4528e-03,  1.2152e-01, -4.3274e-02,  3.1647e-02, -3.0350e-02, -9.4116e-02,  7.0801e-02, -2.4948e-02],\n       dtype=torch.float16), 'perceiver_resampler.layers.0.0.to_q.weight': tensor([[-0.0090, -0.0633, -0.0323,  ..., -0.0058,  0.0754, -0.0359],\n        [ 0.0576,  0.0070,  0.0030,  ..., -0.0203,  0.0003,  0.0314],\n        [-0.0240,  0.0208, -0.0360,  ..., -0.0010, -0.0404,  0.0696],\n        ...,\n        [ 0.0079,  0.0317, -0.0323,  ...,  0.0110, -0.0570, -0.0291],\n        [ 0.0416,  0.0310, -0.0346,  ...,  0.0112,  0.0074, -0.0094],\n        [ 0.0048, -0.0309, -0.0564,  ..., -0.0239,  0.0063,  0.0325]], dtype=torch.float16), 'perceiver_resampler.layers.0.0.to_kv.weight': tensor([[-0.0353,  0.0108,  0.0043,  ...,  0.0024,  0.0720, -0.0053],\n        [ 0.0175, -0.0551, -0.0290,  ...,  0.0240,  0.0048, -0.0214],\n        [-0.0016, -0.0078, -0.0381,  ..., -0.0343, -0.0310,  0.0211],\n        ...,\n        [-0.0146, -0.0365,  0.0404,  ..., -0.0135, -0.0226,  0.0115],\n        [-0.0023, -0.0291, -0.0297,  ..., -0.0549,  0.0235,  0.0103],\n        [ 0.0178,  0.0337,  0.0328,  ..., -0.0328, -0.0355,  0.0657]], dtype=torch.float16), 'perceiver_resampler.layers.0.0.to_out.weight': tensor([[ 3.1769e-02,  3.4637e-02,  1.4778e-02,  ..., -8.3847e-03,  4.4365e-03, -3.6743e-02],\n        [ 1.6632e-03,  1.1009e-02,  9.5010e-05,  ...,  2.7039e-02, -3.8177e-02, -4.6021e-02],\n        [-7.1899e-02, -2.6978e-02, -3.1036e-02,  ...,  2.8931e-02,  5.8937e-03,  2.2568e-02],\n        ...,\n        [ 6.5979e-02,  3.1830e-02,  3.9734e-02,  ...,  6.0974e-02,  2.3819e-02,  2.4277e-02],\n        [ 1.1757e-02, -1.7792e-02, -1.1391e-02,  ..., -2.7420e-02, -8.9233e-02,  1.5574e-03],\n        [-2.1072e-02,  3.4332e-02, -1.1040e-02,  ..., -2.1652e-02,  7.9803e-03, -3.6530e-02]], dtype=torch.float16), 'perceiver_resampler.layers.0.1.0.weight': tensor([0.8110, 0.7798, 0.8525, 0.8252, 0.7432, 0.8491, 0.8359, 0.7935, 0.8652, 0.8887, 0.8428, 0.7935, 0.8750, 0.7651, 0.8945, 0.8140, 0.8662, 0.8711, 0.7847, 0.7578, 0.8643, 0.8003, 0.7910, 0.8076, 0.7627, 0.9404, 0.7866, 0.8784, 0.8638, 0.8564, 0.8135, 0.8325, 0.8164, 0.8125, 0.8169, 0.8311, 0.8311, 0.8447, 0.8145,\n        0.8398, 0.8271, 0.7944, 0.7842, 0.9062, 0.7900, 0.7837, 0.8237, 0.8564, 0.8032, 0.9136, 0.8770, 0.8447, 0.8242, 0.8516, 0.7910, 0.8735, 0.7593, 0.7461, 0.9155, 0.8384, 0.7485, 0.8428, 0.9170, 0.8921, 0.8789, 0.8447, 0.8452, 0.8013, 0.8774, 0.8813, 0.7539, 0.8340, 0.8823, 0.7646, 0.8076, 0.8340, 0.8652, 0.7363,\n        0.8242, 0.7954, 0.8281, 0.7354, 0.8672, 0.8936, 0.8813, 0.8438, 0.8711, 0.8398, 0.8809, 0.7998, 0.8799, 0.7861, 0.8950, 0.9248, 0.8315, 0.8687, 0.7920, 0.8940, 0.7783, 0.7949, 0.8408, 0.8569, 0.7876, 0.8169, 0.8872, 0.8823, 0.8257, 0.8247, 0.8853, 0.7544, 0.8716, 0.9253, 0.7031, 0.8105, 0.8135, 0.8765, 0.8760,\n        0.7979, 0.8950, 0.7798, 0.8711, 0.9233, 0.8491, 0.9185, 0.7729, 0.8286, 0.7729, 0.7793, 0.8452, 0.8921, 0.8364, 0.7935, 0.8198, 0.8203, 0.8696, 0.8169, 0.8315, 0.9077, 0.9326, 0.8232, 0.8237, 0.8418, 0.8564, 0.7827, 0.8408, 0.8716, 0.7676, 0.8931, 0.8530, 0.8047, 0.9023, 0.7910, 0.8525, 0.8179, 0.8613, 0.8252,\n        0.8545, 0.8501, 0.7676, 0.8379, 0.9238, 0.7847, 0.8667, 0.7100, 0.7969, 0.8877, 0.8604, 0.8091, 0.8589, 0.8521, 0.7939, 0.8569, 0.8433, 0.8506, 0.8999, 0.8042, 0.8096, 0.8350, 0.8633, 0.8550, 0.8804, 0.9185, 0.7866, 0.7842, 0.7896, 0.8970, 0.8730, 0.8428, 0.8613, 0.8379, 0.8325, 0.8110, 0.8457, 0.8887, 0.8496,\n        0.8936, 0.8330, 0.8574, 0.8638, 0.7925, 0.8120, 0.8721, 0.8340, 0.8540, 0.7231, 0.8677, 0.9141, 0.8940, 0.9248, 0.8091, 0.8281, 0.6743, 0.7900, 0.9121, 0.5332, 0.9189, 0.7832, 0.8506, 0.8462, 0.8267, 0.8228, 0.8486, 0.9019, 0.8750, 0.8618, 0.8633, 0.8203, 0.8315, 0.8501, 0.8247, 0.7983, 0.8335, 0.8110, 0.8711,\n        0.8838, 0.8071, 0.8218, 0.8574, 0.8657, 0.8735, 0.7881, 0.6631, 0.8281, 0.8228, 0.8774, 0.8345, 0.8770, 0.8135, 0.8203, 0.8770, 0.7114, 0.8315, 0.7524, 0.9028, 0.6904, 0.8945, 0.8975, 0.7593, 0.7935, 0.8579, 0.8374, 0.5820, 0.7861, 0.8418, 0.8169, 0.7358, 0.8262, 0.7886, 0.8022, 0.8325, 0.7739, 0.7832, 0.7959,\n        0.8994, 0.8384, 0.8770, 0.8501, 0.8262, 0.8516, 0.8799, 0.8081, 0.6362, 0.8135, 0.8496, 0.7930, 0.8188, 0.7676, 0.9058, 0.8398, 0.8081, 0.8408, 0.7817, 0.8574, 0.8574, 0.8193, 0.8213, 0.7812, 0.9468, 0.8516, 0.8379, 0.8169, 0.7998, 0.8042, 0.5557, 0.8164, 0.6392, 0.8149, 0.8042, 0.8086, 0.6216, 0.8457, 0.5503,\n        0.7935, 0.8364, 0.8745, 0.8037, 0.8271, 0.7988, 0.8496, 0.8906, 0.9165, 0.8315, 0.7866, 0.8301, 0.9478, 0.9077, 0.8687, 0.8228, 0.8130, 0.8413, 0.6938, 0.8755, 0.9072, 0.8228, 0.8730, 0.7773, 0.8335, 0.8477, 0.8594, 0.8672, 0.8662, 0.8545, 0.8369, 0.8447, 0.8433, 0.8281, 0.9326, 0.8389, 0.8203, 0.7651, 0.9697,\n        0.7954, 0.7720, 0.8584, 0.8643, 0.8682, 0.8135, 0.8252, 0.8022, 0.8188, 0.8042, 0.8340, 0.8394, 0.8203, 0.8755, 0.7847, 0.8037, 0.8706, 0.8433, 0.8018, 0.6963, 0.8696, 0.8853, 0.8486, 0.8857, 0.8228, 0.7832, 0.7881, 0.7363, 0.8096, 0.7847, 0.8525, 0.8521, 0.8398, 0.8813, 0.8882, 0.8862, 0.8218, 0.8379, 0.8975,\n        0.8838, 0.8057, 0.8687, 0.8286, 0.7959, 0.8066, 0.9375, 0.9307, 0.8027, 0.8896, 0.7290, 0.7500, 0.8345, 0.9204, 0.9072, 0.8511, 0.8066, 0.8672, 0.9121, 0.8403, 0.8325, 0.7109, 0.8311, 0.6689, 0.5186, 0.7886, 0.8462, 0.8252, 0.8652, 0.8779, 0.8608, 0.9160, 0.7886, 0.8423, 0.7549, 0.9019, 0.8237, 0.8628, 0.7754,\n        0.8335, 0.8149, 0.8711, 0.7729, 0.8604, 0.8359, 0.8125, 0.7559, 0.9214, 0.7358, 0.8804, 0.8652, 0.8242, 0.7969, 0.8833, 0.8623, 0.8613, 0.7969, 0.8379, 0.8774, 0.7930, 0.7993, 0.8511, 0.8965, 0.8237, 0.8062, 0.7954, 0.7534, 0.7661, 0.8276, 0.8335, 0.8359, 0.8516, 0.8555, 0.8154, 0.8364, 0.8003, 0.8027, 0.9033,\n        0.8511, 0.8945, 0.9248, 0.7837, 0.8423, 0.8599, 0.7236, 0.8306, 0.8623, 0.9707, 0.8579, 0.7974, 0.8101, 0.7690, 0.8369, 0.8335, 0.7832, 0.6875, 0.8442, 0.8262, 0.8037, 0.8608, 0.8970, 0.7944, 0.7681, 0.8442, 0.8149, 0.8413, 0.8926, 0.8037, 0.8315, 0.8452, 0.7949, 0.8291, 0.8496, 0.7383, 0.8325, 0.8203, 0.8276,\n        0.8179, 0.6626, 0.8350, 0.8345, 0.8872, 0.7905, 0.8843, 0.8384, 0.9111, 0.8750, 0.8579, 0.8281, 0.9233, 0.7949, 0.8555, 0.5952, 0.7695, 0.6938, 0.8105, 0.7734, 0.7930, 0.8003, 0.8091, 0.8491, 0.4612, 0.9106, 0.8022, 0.8320, 0.7954, 0.7974, 0.7808, 0.9136, 0.8218, 0.8418, 0.8071, 0.8105, 0.8022, 0.7163, 0.8179,\n        0.8813, 0.8364, 0.8115, 0.8716, 0.8071, 0.8955, 0.9033, 0.8652, 0.8867, 0.8760, 0.8818, 0.8511, 0.8149, 0.8174, 0.8374, 0.8115, 0.8374, 0.8711, 0.9004, 0.9121, 0.7520, 0.7993, 0.8203, 0.7700, 0.9155, 0.8999, 0.8364, 0.8755, 0.7944, 0.7739, 0.7939, 0.8506, 0.8652, 0.7949, 0.8584, 0.9146, 0.8789, 0.8691, 0.8452,\n        0.6919, 0.8379, 0.8022, 0.8511, 0.8340, 0.8022, 0.9160, 0.8071, 0.8862, 0.9097, 0.8096, 0.8340, 0.8770, 0.9014, 0.8467, 0.8228, 0.8350, 0.8350, 0.8013, 0.8345, 0.8066, 0.7817, 0.8379, 0.8872, 0.8628, 0.7861, 0.8516, 0.8242, 0.8062, 0.8276, 0.8101, 0.8120, 0.8193, 0.7847, 0.8276, 0.8892, 0.8438, 0.8369, 0.8618,\n        0.8682, 0.8823, 0.8516, 0.8711, 0.7271, 0.7505, 0.8364, 0.8765, 0.8696, 0.8081, 0.8188, 0.8027, 0.7876, 0.8301, 0.7036, 0.7529, 0.8682, 0.8770, 0.8652, 0.8667, 0.9019, 0.8462, 0.8125, 0.8115, 0.8125, 0.8843, 0.7954, 0.8394, 0.8418, 0.7881, 0.8892, 0.8340, 0.8438, 0.8555, 0.8208, 0.8452, 0.8213, 0.8481, 0.8140,\n        0.7632, 0.8237, 0.8750, 0.8477, 0.8755, 0.7559, 0.8218, 0.9019, 0.9146, 0.7832, 0.8506, 0.8799, 0.8682, 0.8843, 0.8828, 0.7437, 0.8506, 0.7915, 0.8530, 0.9189, 0.8550, 0.7949, 0.8789, 0.8179, 0.8281, 0.7905, 0.7427, 0.8760, 0.8506, 0.8218, 0.8003, 0.8765, 0.8979, 0.8174, 0.8638, 0.8413, 0.6631, 0.8174, 0.7778,\n        0.8398, 0.8926, 0.7832, 0.9419, 0.8672, 0.8589, 0.8867, 0.8535, 0.7939, 0.8696, 0.8076, 0.8101, 0.8379, 0.8555, 0.8682, 0.8564, 0.7988, 0.7974, 0.8203, 0.7700, 0.8325, 0.8091, 0.8535, 0.8237, 0.8408, 0.8301, 0.7710, 0.8154, 0.8027, 0.7866, 0.8052, 0.7231, 0.7729, 0.9116, 0.8472, 0.8618, 0.8276, 0.8354, 0.8354,\n        0.7871, 0.8232, 0.8345, 0.8179, 0.8403, 0.8511, 0.8574, 0.7793, 0.8618, 0.9312, 0.8198, 0.7700, 0.8350, 0.9038, 0.7554, 0.7935, 0.8291, 0.8838, 0.8467, 0.8667, 0.8271, 0.8633, 0.8374, 0.8750, 0.5581, 0.8184, 0.8115], dtype=torch.float16), 'perceiver_resampler.layers.0.1.0.bias': tensor([ 1.1194e-01,  5.2551e-02,  2.6608e-03,  7.2083e-02, -4.6158e-03, -5.8685e-02,  1.2878e-01,  2.8168e-02, -2.2369e-02,  7.5150e-03, -1.9116e-01,  1.4966e-01, -1.2695e-01,  2.6581e-02, -8.2275e-02, -4.5441e-02,  4.8126e-02, -1.9031e-01, -3.0273e-02,  1.1407e-01,  1.2000e-01, -8.9539e-02,  1.1572e-01, -2.1008e-01,\n         1.7371e-01, -1.3696e-01, -1.0016e-01,  1.3696e-01,  1.5841e-03, -1.0181e-01,  1.1493e-01,  9.3323e-02,  1.7847e-01, -4.6814e-02, -9.8190e-03, -6.5918e-02, -1.2903e-01, -1.7136e-02,  1.8237e-01,  6.5918e-02,  6.9092e-02,  9.3567e-02,  4.3823e-02, -3.2990e-02, -1.7139e-01,  1.2489e-02,  9.6464e-04, -1.8286e-01,\n         6.3293e-02,  2.6665e-03,  5.4718e-02, -1.2195e-01, -1.0565e-01, -2.3819e-02, -1.7798e-01, -7.5073e-02,  3.0502e-02, -7.2693e-02,  7.1960e-02, -1.3037e-01,  5.9631e-02, -3.2227e-02, -1.0967e-03,  6.3286e-03,  1.5967e-01, -4.5624e-02, -4.5258e-02, -1.6406e-01, -8.8867e-02, -1.5344e-01,  3.9520e-02, -1.7059e-02,\n         1.1145e-01,  4.0253e-02,  1.5961e-02, -6.1920e-02,  1.6467e-01,  1.3135e-01, -6.3904e-02,  5.7831e-02, -1.2408e-01,  9.2224e-02, -1.5710e-01, -4.8706e-02,  2.1057e-02, -1.8509e-02,  5.2032e-03,  4.1382e-02,  9.2834e-02,  2.0312e-01, -1.5930e-01,  5.4230e-02, -1.5511e-02,  3.0426e-02,  1.1926e-01,  4.4189e-02,\n        -1.5282e-02, -7.1526e-03,  2.1149e-02, -5.4657e-02, -2.7512e-02, -1.1810e-01, -1.6342e-02,  1.2573e-01, -1.6272e-01, -3.1342e-02,  1.5869e-02,  1.0834e-01, -6.1798e-03, -5.7037e-02,  6.0974e-02, -1.1002e-02,  8.4412e-02,  2.4582e-02, -5.6152e-02, -6.1615e-02, -5.7190e-02,  7.6477e-02,  8.9966e-02, -4.8141e-03,\n         1.7502e-02,  1.3477e-01, -3.6346e-02,  7.8659e-03,  1.1749e-01, -9.7107e-02, -8.4457e-03, -1.9562e-02, -9.5093e-02,  1.3940e-01,  7.3792e-02, -1.2952e-01,  3.0197e-02, -1.6571e-02,  1.6602e-01, -6.7078e-02,  1.5808e-01, -2.2766e-01,  3.3894e-03, -4.4220e-02,  3.1067e-02,  1.4282e-02, -8.0566e-02, -1.1865e-01,\n         1.8213e-01,  1.4062e-01, -2.4796e-02, -9.3323e-02, -1.3892e-01,  5.4169e-02,  9.2224e-02, -7.4707e-02,  1.4978e-01,  1.0669e-01,  5.5817e-02,  2.0154e-01, -1.9409e-01, -4.4952e-02, -2.0007e-01, -9.3018e-02, -4.6936e-02,  4.5929e-02,  1.0541e-01,  2.2766e-01, -4.5776e-02,  9.9243e-02,  1.1469e-01,  2.6886e-02,\n        -8.0078e-02, -2.0471e-01,  6.1646e-02, -3.4363e-02,  5.7068e-02,  3.6438e-02,  6.3477e-02,  3.6530e-02,  8.6060e-02, -1.3440e-01, -2.9053e-02,  1.2427e-01, -5.1697e-02, -8.0566e-02, -9.1492e-02,  1.9073e-02, -1.0614e-01,  1.1676e-01, -2.6392e-01,  2.5806e-01, -7.3059e-02, -1.3489e-01,  6.3416e-02, -4.7326e-04,\n        -1.1279e-01,  4.5380e-02,  1.0284e-01,  1.2610e-01, -1.0797e-01,  1.4307e-01, -2.0496e-01,  9.0637e-02,  3.0289e-02, -8.8928e-02, -9.8633e-02,  1.9775e-02, -4.1443e-02, -1.0590e-02,  1.4404e-01,  8.4595e-02, -7.4585e-02,  1.0651e-01, -1.0455e-01, -1.7044e-02,  1.2764e-02,  2.2351e-01, -1.9641e-01, -9.6130e-02,\n        -5.8807e-02,  1.6980e-01,  1.5572e-02, -1.1481e-01,  1.1768e-01,  5.4077e-02,  5.6274e-02, -6.2622e-02,  3.0060e-02, -3.8300e-02, -1.3770e-01, -4.3427e-02,  1.7383e-01, -4.3030e-02,  1.0510e-01, -1.6492e-01, -9.6069e-02, -1.2769e-01,  9.0149e-02, -4.9164e-02,  9.4604e-02,  1.5930e-01, -2.0032e-01, -1.8640e-01,\n        -1.1053e-01, -1.2009e-02, -1.6174e-02, -1.0229e-01,  3.7048e-02,  3.7598e-02, -1.6880e-03, -5.1147e-02,  1.1658e-01, -1.6321e-01, -4.8737e-02, -9.5947e-02, -1.4270e-01, -9.9609e-02, -1.2769e-01,  1.2622e-01,  5.1636e-02, -1.1322e-02, -7.2754e-02, -8.6548e-02,  1.8213e-01, -1.7957e-01, -5.5176e-02,  1.1032e-02,\n         6.4209e-02, -1.6504e-01, -3.9635e-03, -6.5674e-02, -1.2524e-01, -7.0129e-02, -3.6743e-02, -1.6602e-01, -7.6485e-03,  8.8013e-02, -1.6260e-01,  5.6793e-02, -7.5989e-02, -5.1727e-02, -5.0049e-02, -4.8340e-02, -3.5034e-02,  2.0532e-01, -1.6895e-01,  9.0759e-02,  9.2407e-02, -1.1511e-01,  1.2695e-01,  1.4551e-01,\n        -1.2939e-01, -7.2388e-02,  5.8807e-02,  1.5015e-02,  4.9042e-02,  9.8450e-02, -4.3915e-02, -1.0938e-01,  7.8491e-02, -1.7920e-01, -7.3181e-02,  6.2790e-03,  3.2864e-03,  6.1005e-02,  6.1859e-02,  1.6736e-01, -5.2582e-02, -7.9285e-02, -1.1415e-03, -1.7017e-01, -3.2593e-02,  1.6150e-01,  8.5938e-02,  1.8518e-01,\n         8.4473e-02, -4.9774e-02, -7.4829e-02, -1.5308e-01,  8.1177e-02,  9.6985e-02,  2.0288e-01, -1.5173e-01, -1.5784e-01,  1.6772e-01,  6.0974e-02,  1.4502e-01,  1.9690e-01, -1.0352e-01, -1.6272e-01,  1.0449e-01,  4.5074e-02, -5.7709e-02, -1.3525e-01,  2.3636e-02, -7.0618e-02, -1.8030e-01, -1.5244e-02, -6.4758e-02,\n        -2.3026e-02,  8.6853e-02, -2.2469e-03,  1.2537e-01, -1.0858e-01,  4.0039e-02,  2.2290e-01, -2.3712e-02, -1.2073e-01, -1.6284e-01, -3.9612e-02, -1.0168e-01, -5.1910e-02,  9.5093e-02,  1.2622e-01,  5.5023e-02,  8.2092e-02, -3.8086e-02, -1.4478e-01,  5.4138e-02, -8.0139e-02,  5.0507e-02, -1.9363e-02,  7.1228e-02,\n         1.2732e-01,  4.8218e-03,  8.1116e-02, -1.1273e-01,  1.1908e-01, -2.3209e-02,  1.8036e-02, -8.8928e-02,  1.9272e-02,  3.0304e-02,  7.7820e-02,  2.0966e-02,  1.2274e-01,  1.3440e-01, -3.8177e-02, -5.6427e-02,  6.4880e-02,  5.7526e-02,  1.2903e-01, -2.1622e-02,  1.1658e-02,  1.1940e-02,  7.1960e-02, -3.0731e-02,\n         5.3986e-02,  8.0414e-03,  1.4294e-01, -3.6377e-02, -5.8167e-02,  1.1572e-01,  3.9276e-02,  1.2238e-01,  1.3086e-01, -5.6519e-02, -4.9042e-02, -5.7640e-03,  6.3293e-02, -9.2392e-03, -1.3879e-01, -1.5417e-01, -1.9067e-01,  3.4485e-02, -7.9712e-02, -3.1616e-02,  3.2166e-02,  4.3976e-02,  1.0017e-02,  1.6223e-01,\n         1.5961e-02,  1.6406e-01,  1.4685e-01,  3.3447e-02,  6.5857e-02,  1.1969e-01,  2.2180e-01,  1.2756e-01,  6.6406e-02, -1.1987e-01, -5.5420e-02, -3.2898e-02, -3.0899e-02,  4.5837e-02, -1.2756e-01,  3.9307e-02,  2.6108e-02, -1.0077e-01,  3.2684e-02, -1.2964e-01,  8.0750e-02, -3.2837e-02,  1.0663e-01,  8.6609e-02,\n        -5.8746e-02,  1.6479e-01,  1.6736e-01, -2.6688e-02,  5.4474e-03,  4.9472e-05, -2.0340e-02, -1.7578e-02, -1.6309e-01,  6.2195e-02, -1.1951e-01, -4.4861e-02, -1.9531e-02, -4.3457e-02,  1.1467e-02, -1.0333e-01, -4.1931e-02,  1.0760e-01, -1.0284e-01,  9.3750e-02, -2.6871e-02,  9.3994e-02, -7.4036e-02, -1.4697e-01,\n         3.0075e-02,  2.5928e-01, -4.1840e-02, -2.7512e-02,  1.2122e-01,  1.5173e-01,  1.4270e-01, -1.1487e-01,  3.5767e-02,  1.8066e-02,  1.1652e-01, -1.9028e-02, -1.9745e-02,  8.3923e-03,  1.7798e-01, -1.1084e-01,  1.9180e-02,  1.2671e-01,  2.6993e-02, -3.1586e-02, -8.5205e-02, -1.1993e-01, -6.5369e-02, -2.9190e-02,\n         2.8931e-02,  7.3242e-02,  3.4302e-02, -5.1880e-02,  6.6650e-02, -2.0523e-02,  1.0040e-02, -1.4885e-02, -1.2830e-01,  1.4746e-01,  8.4351e-02, -2.9640e-03,  7.3242e-03,  9.3323e-02,  4.6204e-02, -1.1169e-01, -2.0691e-01, -6.2744e-02, -1.8835e-01, -6.1096e-02,  5.2429e-02, -1.9638e-02,  3.0651e-03,  7.2876e-02,\n         4.6295e-02, -1.4148e-01,  6.8970e-02,  1.0675e-01, -4.9530e-02, -1.9150e-02,  4.8431e-02, -1.0645e-01, -9.7290e-02, -3.7354e-02, -1.2366e-01,  3.9001e-02, -1.1102e-01,  8.0795e-03,  1.8042e-01,  4.4586e-02, -1.0986e-01,  6.4331e-02, -1.1273e-01,  1.2976e-01,  9.2346e-02, -6.6528e-02,  1.7664e-01,  1.1804e-01,\n         8.5693e-02,  1.1029e-01,  3.7476e-02,  1.6882e-01,  1.7212e-02, -5.7465e-02, -8.4106e-02, -5.5237e-02,  1.3039e-02,  1.1887e-02, -4.9866e-02, -1.3660e-01, -1.3733e-01, -1.8997e-02, -2.9373e-02, -1.2427e-01, -1.6467e-01, -1.2201e-01, -1.1151e-01,  2.7863e-02, -3.8269e-02, -1.7004e-01, -3.7476e-02,  7.5928e-02,\n        -5.0262e-02,  2.2003e-02, -1.9214e-01,  1.2787e-02, -1.1841e-01,  1.8372e-01, -1.3757e-01, -3.6377e-02,  3.6713e-02,  1.3757e-01, -1.0754e-01,  1.8799e-02, -4.2053e-02,  7.0007e-02, -1.9424e-02,  5.0995e-02, -3.5954e-03, -1.2830e-01,  1.1688e-01,  5.9052e-02,  9.4727e-02, -7.7454e-02,  1.1041e-01, -2.8687e-02,\n        -2.6123e-02, -7.6965e-02, -9.1919e-02,  4.7646e-03,  7.9651e-02,  9.3262e-02,  7.3486e-02, -5.7617e-02,  1.3008e-02,  4.3854e-02, -1.2323e-01,  1.5656e-02, -1.7065e-01,  7.2083e-02, -1.5686e-01,  1.3391e-01,  8.3160e-03,  1.1780e-02, -3.8605e-02, -1.0620e-01,  3.3417e-02, -4.7112e-03, -1.6858e-01,  8.9172e-02,\n        -1.2140e-01,  1.1920e-01,  1.1267e-01, -6.1920e-02, -3.5828e-02, -1.4984e-02,  1.6711e-01, -1.0090e-03, -4.0222e-02,  3.9368e-02, -1.3452e-01, -5.5481e-02, -1.7542e-01,  9.6802e-02, -6.7139e-02,  1.2079e-01, -3.5950e-02,  2.8152e-02,  1.9031e-01,  3.8971e-02,  8.4473e-02, -5.3650e-02, -4.7516e-02, -1.4809e-02,\n        -1.4429e-01,  4.6043e-03,  2.2400e-02,  5.8319e-02, -1.6150e-01,  1.2622e-01, -1.1346e-01,  5.7037e-02, -1.7407e-01,  1.6882e-01,  1.2000e-01,  5.3120e-04,  9.1980e-02,  1.0185e-02, -9.6436e-02,  1.0345e-01,  5.7983e-02, -2.5818e-02, -1.3075e-03, -1.6617e-02,  1.6638e-01, -4.3365e-02, -6.7383e-02, -6.2225e-02,\n         9.5703e-02,  1.1426e-01,  1.8129e-03, -5.4398e-03,  9.4299e-03, -2.6199e-02, -2.5940e-02,  1.0773e-02, -1.0034e-01,  2.4521e-02, -1.5405e-01,  1.0120e-01,  5.1727e-02,  9.4360e-02, -1.4490e-01,  1.2085e-01,  9.4238e-02,  1.8372e-02,  1.1940e-02,  3.9948e-02,  2.9358e-02, -2.9846e-02, -6.3477e-02, -3.4119e-02,\n         4.5349e-02, -7.0190e-02,  1.0956e-01,  8.5815e-02, -5.0354e-02, -4.3701e-02, -2.0355e-02, -7.2266e-02, -4.2084e-02, -1.7554e-01,  4.9225e-02,  1.3379e-01, -9.6741e-02,  7.0801e-02, -5.4979e-04, -9.5886e-02,  1.0071e-01,  5.0018e-02, -8.2458e-02,  1.0687e-01, -7.0007e-02, -8.4839e-02, -9.4910e-02, -9.5032e-02,\n         2.4933e-02, -1.1316e-01,  8.8684e-02,  5.7182e-03, -1.3245e-01, -2.0813e-02,  8.6853e-02, -1.3635e-01, -7.3853e-03,  9.4910e-02,  1.1499e-01,  1.3550e-01,  1.0468e-01,  9.3262e-02, -3.1143e-02,  9.3445e-02, -1.0962e-01,  1.3293e-01,  1.7920e-01,  5.0476e-02,  7.6233e-02, -1.3046e-02,  4.8798e-02, -1.8372e-01,\n        -5.5298e-02, -5.7983e-02,  1.2360e-01,  1.2781e-01, -5.4810e-02,  1.5063e-01,  1.2878e-01, -2.0984e-01,  7.5623e-02, -7.2083e-02, -6.4575e-02,  3.2867e-02, -1.7407e-01, -2.5330e-02, -9.9121e-02, -9.0027e-02,  4.2847e-02,  6.8176e-02,  1.3458e-02,  1.0553e-01, -1.0413e-01, -6.8726e-02,  2.4780e-02, -1.1853e-01,\n        -4.6539e-03, -6.1096e-02,  4.0955e-02, -8.0322e-02,  1.1285e-01, -5.1392e-02, -3.7262e-02,  1.1017e-01, -8.3496e-02, -5.1147e-02, -4.0283e-03,  9.4482e-02, -8.6243e-02,  1.9287e-01, -2.0264e-01, -1.4294e-01, -1.5137e-01, -7.9712e-02,  3.7628e-02,  1.5356e-01,  9.1309e-02, -4.8676e-02, -4.9316e-02,  1.2878e-01],\n       dtype=torch.float16), 'perceiver_resampler.layers.0.1.1.weight': tensor([[ 0.0111,  0.0131,  0.0102,  ..., -0.0450,  0.0174, -0.0191],\n        [-0.0102, -0.0194,  0.0225,  ..., -0.0038,  0.0156, -0.0237],\n        [-0.0165, -0.0603, -0.0249,  ...,  0.0233, -0.0103,  0.0068],\n        ...,\n        [-0.0605, -0.0161,  0.0474,  ..., -0.0003,  0.0023,  0.0216],\n        [-0.0233, -0.0164,  0.0380,  ...,  0.0239, -0.0186, -0.0095],\n        [ 0.0146, -0.0038,  0.0016,  ...,  0.0161,  0.0284, -0.0195]], dtype=torch.float16), 'perceiver_resampler.layers.0.1.3.weight': tensor([[ 0.0175, -0.0067, -0.0249,  ..., -0.0043, -0.0408,  0.0269],\n        [-0.0065,  0.0123, -0.0020,  ..., -0.0112, -0.0229, -0.0201],\n        [-0.0096,  0.0199, -0.0064,  ...,  0.0189, -0.0211, -0.0100],\n        ...,\n        [-0.0486,  0.0464,  0.0287,  ...,  0.0411, -0.0128, -0.0560],\n        [-0.0336,  0.0217, -0.0131,  ..., -0.0031,  0.0258,  0.0439],\n        [-0.0204, -0.0156, -0.0273,  ..., -0.0037, -0.0097, -0.0296]], dtype=torch.float16), 'perceiver_resampler.layers.1.0.norm1.weight': tensor([0.7344, 0.7256, 0.7466, 0.7925, 0.7656, 0.7939, 0.7515, 0.7773, 0.7979, 0.7534, 0.7363, 0.7285, 0.7246, 0.7964, 0.8198, 0.7783, 0.7358, 0.6494, 0.7285, 0.7471, 0.7754, 0.7354, 0.7700, 0.6919, 0.6997, 0.7661, 0.7607, 0.7676, 0.6670, 0.7681, 0.7461, 0.8281, 0.7852, 0.7817, 0.7617, 0.6885, 0.6162, 0.7505, 0.7246,\n        0.7207, 0.7729, 0.8003, 0.7725, 0.7451, 0.8086, 0.7500, 0.7222, 0.7749, 0.6733, 0.7188, 0.6821, 0.7681, 0.7314, 0.7607, 0.7480, 0.7710, 0.7422, 0.6284, 0.7578, 0.7617, 0.7217, 0.7676, 0.6792, 0.7427, 0.7764, 0.6978, 0.8071, 0.7651, 0.7178, 0.8242, 0.7354, 0.7656, 0.8022, 0.8081, 0.7524, 0.7837, 0.7139, 0.7222,\n        0.7002, 0.7617, 0.7485, 0.7510, 0.7510, 0.6836, 0.7749, 0.7310, 0.6895, 0.7476, 0.7930, 0.7583, 0.7461, 0.7705, 0.7285, 0.7461, 0.8008, 0.7437, 0.7686, 0.7080, 0.7808, 0.7158, 0.7046, 0.7207, 0.7314, 0.7158, 0.7310, 0.7402, 0.7793, 0.7739, 0.7925, 0.7524, 0.7778, 0.7788, 0.8135, 0.7812, 0.7524, 0.7998, 0.7603,\n        0.8188, 0.6470, 0.7451, 0.8057, 0.7056, 0.7646, 0.8442, 0.6987, 0.7251, 0.7397, 0.7988, 0.6172, 0.7295, 0.6978, 0.7471, 0.7559, 0.7705, 0.6841, 0.8105, 0.7266, 0.7563, 0.7959, 0.7432, 0.7310, 0.7300, 0.7036, 0.8066, 0.7344, 0.8130, 0.7754, 0.6948, 0.7930, 0.7324, 0.7227, 0.6831, 0.7373, 0.7446, 0.7437, 0.7217,\n        0.7861, 0.7500, 0.7520, 0.7559, 0.7295, 0.7559, 0.7207, 0.7241, 0.6831, 0.7939, 0.7666, 0.7227, 0.7998, 0.7271, 0.7480, 0.7212, 0.7881, 0.7451, 0.7910, 0.7529, 0.7520, 0.6870, 0.7188, 0.7041, 0.7324, 0.7524, 0.7905, 0.8052, 0.7607, 0.7705, 0.5698, 0.7568, 0.6802, 0.7266, 0.8120, 0.6152, 0.7661, 0.8076, 0.7490,\n        0.7695, 0.7378, 0.6938, 0.7583, 0.7710, 0.6963, 0.7500, 0.7134, 0.6929, 0.7314, 0.7314, 0.7070, 0.7944, 0.7070, 0.7856, 0.6973, 0.7432, 0.6660, 0.7832, 0.7095, 0.7559, 0.7905, 0.7402, 0.7690, 0.7432, 0.7183, 0.7642, 0.7305, 0.7617, 0.7505, 0.6851, 0.7900, 0.7935, 0.7178, 0.7920, 0.7739, 0.7305, 0.7559, 0.7036,\n        0.7329, 0.7168, 0.7827, 0.7681, 0.6743, 0.7700, 0.7061, 0.7876, 0.7324, 0.6943, 0.7212, 0.7388, 0.7739, 0.7827, 0.7744, 0.7607, 0.7441, 0.7329, 0.6792, 0.7002, 0.7246, 0.7197, 0.7397, 0.6528, 0.6953, 0.7217, 0.6992, 0.7344, 0.7705, 0.7871, 0.7466, 0.7251, 0.7222, 0.7637, 0.7700, 0.7778, 0.7612, 0.7578, 0.8438,\n        0.6978, 0.8047, 0.7383, 0.7822, 0.7471, 0.7280, 0.6953, 0.7290, 0.7646, 0.7368, 0.6401, 0.7485, 0.6733, 0.7358, 0.8179, 0.7544, 0.7739, 0.7275, 0.7075, 0.7275, 0.6289, 0.7866, 0.7510, 0.7290, 0.6992, 0.7593, 0.6455, 0.6650, 0.6929, 0.6523, 0.7515, 0.7202, 0.6152, 0.6479, 0.7095, 0.7695, 0.6865, 0.6982, 0.6982,\n        0.8071, 0.7529, 0.7339, 0.7861, 0.7075, 0.7007, 0.7607, 0.7866, 0.7036, 0.6919, 0.6836, 0.7134, 0.7256, 0.7715, 0.7925, 0.7886, 0.7310, 0.7612, 0.7573, 0.7163, 0.7593, 0.7363, 0.7339, 0.7837, 0.7842, 0.7139, 0.7886, 0.7217, 0.7734, 0.7202, 0.7461, 0.7236, 0.7095, 0.6851, 0.7710, 0.7793, 0.7466, 0.7222, 0.7021,\n        0.7534, 0.6426, 0.7329, 0.7109, 0.7778, 0.7656, 0.7739, 0.7495, 0.7905, 0.7681, 0.7124, 0.7788, 0.7876, 0.7529, 0.7173, 0.7129, 0.7651, 0.7461, 0.7612, 0.7495, 0.7642, 0.7427, 0.7437, 0.7275, 0.7666, 0.7764, 0.7710, 0.7114, 0.7637, 0.7017, 0.7256, 0.7305, 0.7231, 0.7583, 0.7578, 0.7290, 0.6890, 0.7295, 0.6885,\n        0.7715, 0.7964, 0.7915, 0.7271, 0.7461, 0.7485, 0.7329, 0.7275, 0.7500, 0.7441, 0.7593, 0.7095, 0.7808, 0.7383, 0.7168, 0.7900, 0.6978, 0.7510, 0.7275, 0.7505, 0.7393, 0.7578, 0.7378, 0.7720, 0.6865, 0.7935, 0.7427, 0.7295, 0.7852, 0.7422, 0.7324, 0.7490, 0.8027, 0.7251, 0.7690, 0.7891, 0.8018, 0.7808, 0.7725,\n        0.6782, 0.7544, 0.6885, 0.7109, 0.7568, 0.7822, 0.7837, 0.7212, 0.7446, 0.7573, 0.8032, 0.7583, 0.7900, 0.7188, 0.8042, 0.6890, 0.7734, 0.7578, 0.7661, 0.6978, 0.7725, 0.6885, 0.6865, 0.7573, 0.7007, 0.7549, 0.7202, 0.6729, 0.7451, 0.7041, 0.8096, 0.7368, 0.7100, 0.7090, 0.7217, 0.7412, 0.7803, 0.7827, 0.7388,\n        0.7793, 0.7739, 0.6948, 0.7344, 0.8071, 0.7002, 0.7451, 0.7632, 0.7905, 0.7627, 0.7480, 0.6899, 0.7427, 0.7476, 0.7876, 0.7378, 0.7661, 0.6885, 0.7344, 0.6821, 0.7905, 0.6528, 0.7842, 0.6587, 0.6978, 0.7104, 0.7461, 0.7534, 0.7471, 0.7866, 0.7339, 0.6846, 0.7153, 0.7754, 0.7812, 0.7285, 0.8052, 0.7266, 0.7344,\n        0.7446, 0.7637, 0.7588, 0.7661, 0.7573, 0.7715, 0.7603, 0.7681, 0.7705, 0.7744, 0.7090, 0.7422, 0.7314, 0.7681, 0.7446, 0.8027, 0.8086, 0.7646, 0.7803, 0.6294, 0.7197, 0.6865, 0.6333, 0.7681, 0.6816, 0.7456, 0.7246, 0.7905, 0.7783, 0.6768, 0.7314, 0.8125, 0.7173, 0.7505, 0.7329, 0.8179, 0.7583, 0.7700, 0.7744,\n        0.7544, 0.7344, 0.7495, 0.7632, 0.7896, 0.7905, 0.7285, 0.8047, 0.7510, 0.7388, 0.7856, 0.7324, 0.7334, 0.6953, 0.7734, 0.7378, 0.7627, 0.7480, 0.7744, 0.7725, 0.7661, 0.7129, 0.7612, 0.7710, 0.7217, 0.7959, 0.7554, 0.6470, 0.7227, 0.7329, 0.7822, 0.7905, 0.7119, 0.6992, 0.6797, 0.8062, 0.7119, 0.7881, 0.7329,\n        0.7349, 0.7261, 0.7568, 0.7954, 0.7617, 0.6846, 0.6890, 0.7153, 0.7363, 0.7124, 0.7949, 0.7607, 0.7334, 0.7407, 0.6787, 0.7417, 0.7290, 0.6519, 0.7002, 0.7690, 0.7563, 0.7397, 0.7358, 0.7681, 0.6841, 0.7280, 0.7974, 0.6748, 0.7188, 0.6987, 0.7969, 0.7256, 0.7661, 0.7646, 0.7383, 0.7378, 0.7563, 0.7261, 0.7852,\n        0.7476, 0.6240, 0.7622, 0.7954, 0.7021, 0.7612, 0.7417, 0.7583, 0.7773, 0.7617, 0.7573, 0.6860, 0.7686, 0.8076, 0.7700, 0.7832, 0.7007, 0.7070, 0.7939, 0.7817, 0.7427, 0.7427, 0.8047, 0.7036, 0.7080, 0.7778, 0.7188, 0.7114, 0.7090, 0.7437, 0.7793, 0.7441, 0.7285, 0.7681, 0.7354, 0.8267, 0.6758, 0.7227, 0.7676,\n        0.6729, 0.7549, 0.8145, 0.7842, 0.7700, 0.6816, 0.7178, 0.6523, 0.7622, 0.7744, 0.7173, 0.7495, 0.7847, 0.8179, 0.7603, 0.7373, 0.7446, 0.8076, 0.7456, 0.7378, 0.7695, 0.6846, 0.7119, 0.7451, 0.7456, 0.7578, 0.7090, 0.7559, 0.6958, 0.7397, 0.7466, 0.7207, 0.7661, 0.7090, 0.8115, 0.7617, 0.7222, 0.7441, 0.7632,\n        0.7817, 0.7407, 0.7910, 0.7456, 0.7671, 0.7637, 0.7651, 0.6958, 0.6758, 0.6997, 0.7778, 0.7305, 0.8042, 0.7178, 0.7520, 0.7759, 0.7231, 0.5933, 0.7896, 0.7441, 0.7427, 0.7466, 0.7295, 0.7207, 0.7529, 0.6523, 0.7256, 0.7832, 0.7163, 0.7349, 0.7373, 0.7246, 0.6948, 0.7334, 0.7134, 0.7686, 0.7666, 0.7358, 0.6606,\n        0.6948, 0.7935, 0.6797, 0.7339, 0.7236, 0.7085, 0.7725, 0.7417, 0.7515, 0.7544, 0.7744, 0.7593, 0.7437, 0.7622, 0.6748, 0.7598, 0.6152, 0.7222, 0.7207, 0.7505, 0.6826, 0.7007, 0.7773, 0.7588, 0.7231, 0.7256, 0.6992], dtype=torch.float16), 'perceiver_resampler.layers.1.0.norm1.bias': tensor([ 1.5091e-02,  3.3783e-02, -1.0979e-02, -8.3351e-04,  2.3682e-02, -4.1412e-02, -3.3142e-02,  2.9182e-03,  2.0340e-02, -9.3155e-03,  1.6022e-02,  1.0672e-03, -3.1433e-02,  2.3890e-04, -4.5967e-03, -1.4055e-04, -2.0657e-03, -6.9214e-02, -1.3344e-02, -2.0905e-02,  9.4681e-03,  1.1158e-03, -3.2959e-03, -2.6321e-02,\n        -2.4368e-02,  3.3417e-02, -2.5620e-02,  2.8839e-02,  2.6352e-02,  2.9984e-02,  1.0513e-02, -3.7518e-03,  1.7834e-03,  6.5002e-03, -1.5099e-02,  2.2095e-02,  6.1829e-02, -1.3933e-03,  3.0914e-02, -6.4941e-02, -2.5787e-02, -3.7899e-03,  2.8973e-03,  3.8422e-02,  2.0370e-03,  7.1335e-03,  5.1605e-02,  2.9984e-02,\n         3.3813e-02,  5.7587e-02, -1.1276e-02,  3.0960e-02,  1.7227e-02, -2.6306e-02,  3.6346e-02, -3.1143e-02,  2.0523e-02,  4.2610e-03,  3.0441e-02,  7.2479e-03,  2.2781e-02, -8.2064e-04, -1.4206e-02,  3.2990e-02,  7.1754e-03, -7.4654e-03, -2.4536e-02, -1.4954e-02,  4.5776e-02, -5.4932e-02, -1.3252e-02, -4.0436e-02,\n        -2.4704e-02,  2.0447e-02, -1.2810e-02,  1.6296e-02,  2.8595e-02,  4.1687e-02,  3.0273e-02, -1.5144e-02, -3.1281e-02, -3.4119e-02, -5.6274e-02,  7.8659e-03, -3.4058e-02, -1.7443e-03, -4.4373e-02, -4.0283e-03,  1.1696e-02,  1.5594e-02,  2.8183e-02, -7.5073e-03,  1.5823e-02,  7.8735e-03,  1.9806e-02, -1.4687e-02,\n         3.8948e-03, -3.5583e-02, -1.2178e-03, -4.4983e-02, -2.2507e-02,  2.0798e-02,  2.1225e-02, -1.7853e-02,  2.5284e-02,  2.6798e-03,  2.6947e-02, -2.7298e-02, -3.9154e-02, -3.4088e-02,  3.4973e-02, -1.8188e-02,  1.4603e-02,  2.3804e-03,  4.3091e-02, -2.3239e-02,  2.8381e-02, -3.3752e-02, -3.7651e-03,  1.3580e-02,\n        -3.9185e-02, -3.3905e-02, -6.1989e-03, -1.2955e-02, -4.2694e-02, -4.3762e-02, -1.1024e-02,  1.3374e-02,  1.0321e-01, -2.1713e-02, -8.5449e-04, -5.6793e-02,  4.2358e-02, -1.7944e-02,  7.2813e-04,  6.7101e-03, -2.4857e-02, -3.0136e-03, -1.2810e-02,  2.6360e-03, -3.6346e-02, -1.5993e-03, -4.9805e-02,  2.0523e-03,\n         1.1520e-02, -3.3264e-02,  1.9665e-03,  2.2522e-02,  6.5956e-03,  5.6244e-02, -8.5449e-03, -2.6367e-02, -3.1799e-02,  1.6556e-02, -9.2773e-03, -9.6283e-03, -1.1997e-03,  2.5284e-02,  4.5593e-02, -3.0746e-02, -1.7252e-03, -7.8487e-04,  4.1626e-02,  2.1240e-02,  1.7838e-02, -6.3095e-03, -4.4617e-02,  8.8425e-03,\n        -2.6123e-02,  1.1284e-02, -4.0100e-02,  3.1647e-02, -7.4654e-03,  4.6173e-02,  1.6937e-02,  2.2705e-02,  1.0429e-02,  4.9072e-02,  1.9653e-02, -1.8940e-03, -1.5266e-02,  1.1162e-02,  6.2866e-03,  5.1758e-02, -1.0462e-03, -3.3417e-02, -6.0699e-02,  2.3880e-02,  6.1401e-02, -1.7881e-03,  1.9653e-02, -8.2703e-03,\n        -5.2223e-03, -3.6850e-03,  1.8997e-02, -1.0033e-02, -1.0681e-02,  2.3315e-02, -9.3536e-03,  4.2572e-02,  3.4973e-02, -1.2329e-02, -2.5330e-02,  1.0208e-02, -5.0087e-03, -3.5828e-02, -6.7749e-02, -1.2405e-02, -1.5884e-02, -2.6840e-02,  7.0801e-02, -3.3661e-02,  2.9251e-02,  1.7181e-02,  4.6753e-02,  4.3373e-03,\n        -3.7201e-02,  2.0416e-02,  1.4893e-02,  1.9913e-03, -1.0948e-03,  1.8661e-02,  3.6316e-02,  1.1948e-02, -2.8717e-02, -6.3965e-02, -5.4245e-03, -1.9455e-02, -5.6885e-02, -1.7853e-02, -1.7996e-03, -1.4244e-02,  2.9159e-04, -4.5624e-02, -1.1307e-02,  2.9938e-02, -6.5460e-03, -7.9803e-03, -4.2908e-02,  5.6305e-02,\n        -3.5156e-02, -4.1924e-03, -2.7817e-02, -1.1734e-02,  7.6942e-03,  1.8806e-03, -3.0869e-02,  7.9407e-02, -1.7349e-02, -2.4094e-02,  3.4607e-02,  1.7349e-02, -3.7079e-02, -4.6173e-02, -5.4321e-03,  9.9487e-03,  3.6072e-02, -2.1561e-02, -5.8533e-02, -3.9490e-02, -3.7842e-02,  4.7180e-02,  1.8066e-02, -4.8431e-02,\n         4.2236e-02,  5.9998e-02,  4.1290e-02,  4.1962e-02,  1.7639e-02,  1.9119e-02, -9.9792e-03, -4.3121e-02,  1.2741e-02,  7.1754e-03,  2.3056e-02,  2.9846e-02, -7.5188e-03, -2.0695e-03,  9.4452e-03, -4.0161e-02,  3.9886e-02, -1.4465e-02, -1.3199e-02,  2.5070e-02,  9.3994e-03, -2.2949e-02, -1.2779e-02,  6.6566e-03,\n         1.3420e-02, -4.1733e-03, -7.1899e-02,  1.4381e-02,  1.9913e-02,  7.3059e-02, -1.2827e-03,  2.3861e-03,  2.0370e-02,  3.6240e-03, -2.1362e-02, -1.2016e-02, -3.9856e-02, -2.8793e-02, -1.8906e-02, -1.2207e-02, -2.2720e-02,  3.0029e-02,  6.8237e-02, -3.7628e-02,  3.4149e-02, -1.0384e-02,  3.6743e-02, -8.2932e-03,\n         2.4490e-02,  4.2381e-03,  1.7792e-02, -3.1494e-02, -8.9417e-03,  3.1403e-02,  1.4740e-02, -1.1110e-03, -4.4212e-03,  5.2404e-04,  3.4973e-02, -1.5335e-02, -2.1378e-02,  2.3880e-02,  5.2063e-02, -3.5248e-03,  3.8788e-02, -2.2705e-02, -8.6975e-03, -5.1117e-02, -2.7130e-02, -3.0167e-02,  3.8757e-03,  5.0831e-04,\n        -4.8157e-02, -4.4647e-02, -4.8184e-04,  1.2560e-03, -6.2132e-04,  3.1071e-03,  9.9716e-03, -3.1815e-03, -1.6413e-03,  3.6499e-02,  2.3560e-02, -4.0375e-02, -3.8242e-03,  5.2673e-02, -4.4617e-02,  9.7580e-03,  5.3284e-02,  5.3497e-02, -2.9205e-02,  1.3657e-02, -3.6285e-02,  1.5221e-03,  7.6538e-02, -2.6779e-03,\n        -2.8732e-02,  1.4229e-02,  2.3880e-02,  2.9160e-02, -2.7817e-02, -3.3997e-02,  3.5217e-02,  2.7710e-02,  5.1880e-03, -1.5625e-02,  3.8818e-02, -4.2191e-03, -4.3457e-02,  1.6510e-02,  4.8828e-02,  6.6910e-03, -6.0364e-02, -4.1556e-04, -1.4664e-02, -6.0730e-02,  1.3344e-02, -4.5242e-03, -1.3336e-02, -3.7994e-02,\n        -3.6716e-03, -6.3553e-03,  1.6251e-02,  1.6541e-02,  4.9072e-02, -3.6987e-02,  1.5221e-02, -5.4359e-03,  5.8098e-03,  3.1616e-02,  1.3123e-02, -1.2184e-02, -1.1803e-02, -2.2903e-02,  4.0314e-02,  3.8300e-03,  3.9825e-02, -3.1952e-02, -2.2354e-03, -4.3549e-02,  2.7527e-02,  2.1915e-03,  2.4780e-02,  9.0179e-03,\n         6.5041e-03, -1.8875e-02,  1.1501e-03,  1.2573e-02,  3.8055e-02, -1.5762e-02,  2.1454e-02,  4.8889e-02, -1.3725e-02, -2.3193e-02, -7.8011e-04, -2.2507e-02,  9.0714e-03, -4.0588e-02, -2.1271e-02,  3.5439e-03, -3.9856e-02,  8.7509e-03, -1.5091e-02,  6.0730e-02, -4.3427e-02,  3.3112e-02,  1.6052e-02,  4.5349e-02,\n         3.5810e-04,  2.2392e-03,  1.5383e-03, -2.7145e-02, -1.8723e-02,  1.6830e-02, -1.9272e-02,  2.4033e-03,  8.5907e-03,  6.8703e-03,  1.3451e-02, -2.1271e-02, -1.3527e-02,  2.3117e-02,  3.1555e-02,  3.6041e-02,  1.1398e-02,  1.2642e-02, -1.7303e-02, -3.0411e-02, -3.9520e-02,  2.4979e-02, -2.0046e-03,  6.5491e-02,\n        -1.7395e-02,  6.6071e-03,  3.6255e-02, -2.1515e-03, -3.7292e-02,  3.7933e-02,  5.4665e-03, -6.4735e-03,  1.0612e-02,  1.5778e-02, -1.3428e-02,  2.4277e-02, -8.3923e-03, -6.8550e-03, -1.0590e-01,  1.8127e-02,  2.6230e-02,  5.2460e-02,  3.9948e-02,  2.1553e-03, -9.2697e-03, -1.7395e-02,  1.6754e-02, -1.5572e-02,\n         2.0370e-03,  2.4933e-02, -1.5900e-02,  4.1321e-02,  9.3536e-03,  1.2535e-02, -2.8961e-02, -3.7842e-02, -2.9053e-02, -6.3721e-02,  1.5450e-03,  2.5894e-02,  3.1052e-02, -5.2460e-02, -5.1003e-03, -1.4259e-02, -3.7140e-02,  1.9791e-02, -6.6185e-03, -1.0757e-02,  1.3947e-02, -4.1779e-02,  1.1940e-02, -2.7710e-02,\n         7.0000e-03,  3.5522e-02,  7.9041e-03,  1.9569e-03, -3.7109e-02, -1.6418e-02,  7.0152e-03, -2.1896e-02,  3.6774e-02,  6.4087e-02, -3.6835e-02, -2.3987e-02, -9.3689e-03,  2.0309e-02, -1.4359e-02,  6.3610e-04, -8.0032e-03,  4.9622e-02, -5.8594e-02, -3.1338e-03, -4.6349e-03, -1.7120e-02, -2.4548e-03,  3.0422e-03,\n         1.1269e-02,  2.3895e-02, -1.5450e-03, -2.3239e-02, -1.6556e-02,  3.0472e-02, -2.8519e-02,  1.9974e-02,  4.8561e-03, -2.5055e-02,  1.4961e-02, -2.5558e-02, -7.4463e-03, -2.1420e-03, -1.3725e-02, -2.1095e-03, -1.9958e-02, -7.0496e-03, -2.2545e-03,  8.7547e-04,  2.2781e-02,  3.7201e-02,  1.6464e-02, -1.3466e-02,\n        -3.0548e-02,  3.8087e-05, -5.0903e-02,  3.0212e-02, -9.6207e-03,  1.2573e-02,  4.0009e-02,  5.8502e-02, -7.0679e-02, -4.7821e-02,  6.5193e-03,  6.6589e-02, -3.2166e-02,  1.9531e-02, -5.8784e-03, -1.5190e-02, -7.2861e-03, -2.5314e-02, -7.6294e-03, -4.9377e-02,  1.4755e-02,  1.8143e-02, -8.7433e-03, -3.1952e-02,\n        -2.4185e-02,  5.3284e-02,  8.5068e-03, -1.9913e-02,  8.3618e-03, -1.2428e-02, -5.9906e-02, -9.0027e-04,  1.8902e-03,  3.7598e-02, -3.4332e-02, -2.9037e-02, -1.8936e-02, -1.6571e-02,  3.3997e-02, -5.3253e-02,  7.6599e-03,  1.8265e-02,  3.4607e-02, -1.7670e-02, -2.8290e-02,  5.2109e-03,  1.6327e-02, -9.3155e-03,\n        -1.0620e-02, -8.8120e-03, -2.7130e-02, -3.2288e-02, -7.9727e-03, -1.0971e-02,  3.1250e-02,  1.2856e-02,  2.7695e-03, -1.3153e-02,  2.6798e-03,  2.5787e-02, -3.2104e-02,  9.8190e-03, -2.4292e-02, -3.7262e-02,  1.9287e-02, -7.9956e-03, -3.6194e-02, -4.6616e-03, -1.0651e-02,  3.1677e-02,  2.6138e-02,  6.1264e-03,\n         1.9104e-02,  8.6731e-02, -3.3630e-02,  9.8190e-03,  2.1896e-02, -1.5656e-02, -2.7695e-02, -5.0926e-03, -1.7746e-02,  1.1375e-02,  4.7638e-02, -5.9570e-02, -4.0924e-02,  1.2840e-02,  1.7426e-02, -1.2344e-02,  1.8906e-02, -1.4664e-02, -3.1338e-03,  3.6793e-03,  1.9073e-02, -2.9022e-02,  2.0950e-02, -6.9946e-02,\n         2.0096e-02,  4.9683e-02, -2.0294e-02,  4.4220e-02, -2.3651e-02, -1.5808e-02, -4.7569e-03, -3.5736e-02, -2.3483e-02,  2.2980e-02,  1.3489e-02, -1.5945e-02,  2.8687e-02,  3.8300e-02,  1.5839e-02,  1.9989e-02, -3.7415e-02, -7.4234e-03,  1.7639e-02,  1.5182e-02, -1.9012e-02, -2.2934e-02, -5.2460e-02,  2.4323e-02,\n        -3.6755e-03,  1.6769e-02, -2.6581e-02,  1.4008e-02,  6.4354e-03,  1.6998e-02, -6.9214e-02, -2.3708e-03, -1.4534e-02, -7.3090e-03, -5.2155e-02, -2.7390e-02,  1.5915e-02,  2.7191e-02, -9.3994e-03,  1.8677e-02,  7.4219e-02,  1.6403e-02,  1.0460e-02,  2.5726e-02, -1.4572e-02,  4.5166e-03,  1.9577e-02, -2.3468e-02,\n         1.9196e-02,  1.0521e-02,  2.1255e-02, -6.6772e-02,  3.5839e-03, -1.6174e-02,  3.7323e-02,  4.6173e-02, -1.5343e-02,  2.3880e-02, -2.3346e-03,  8.7357e-03,  8.9340e-03, -2.5757e-02,  1.4862e-02,  2.3365e-03,  6.9336e-02,  1.0551e-02, -8.9035e-03, -4.5090e-03, -2.8549e-02,  2.5406e-02,  1.2520e-02,  1.1877e-01,\n        -4.9072e-02,  5.0392e-03, -3.4454e-02,  1.2589e-02, -4.2877e-02,  4.1687e-02,  4.8340e-02, -7.4097e-02, -1.8036e-02, -1.3618e-02, -3.6804e-02,  4.2633e-02,  3.1143e-02,  1.0277e-02, -2.6733e-02,  3.8849e-02, -6.5689e-03,  4.9324e-03, -4.9362e-03, -6.4270e-02,  6.0997e-03,  1.3649e-02,  3.7262e-02, -4.6600e-02,\n        -2.8549e-02, -2.9297e-02,  5.0262e-02, -1.2093e-03,  2.6749e-02, -2.6413e-02, -1.8127e-02, -3.5309e-02,  1.2421e-02,  1.3924e-02,  9.5062e-03, -1.6403e-02,  4.3549e-02,  9.2850e-03,  4.0092e-03, -2.4223e-03, -4.6783e-02,  8.2764e-02,  3.2196e-02, -3.0014e-02,  8.8196e-03,  2.0111e-02,  2.1576e-02, -2.0493e-02],\n       dtype=torch.float16), 'perceiver_resampler.layers.1.0.norm2.weight': tensor([0.5908, 0.6177, 0.6460, 0.5747, 0.5874, 0.6499, 0.5996, 0.5723, 0.6030, 0.5938, 0.6069, 0.5176, 0.6099, 0.5522, 0.6294, 0.5674, 0.5986, 0.6182, 0.5771, 0.5454, 0.5718, 0.5737, 0.5825, 0.5361, 0.5938, 0.6152, 0.6367, 0.6499, 0.6025, 0.6099, 0.6377, 0.6045, 0.6626, 0.5708, 0.5786, 0.6465, 0.5430, 0.5977, 0.5684,\n        0.5742, 0.6084, 0.5884, 0.5908, 0.6074, 0.5806, 0.5063, 0.6167, 0.5977, 0.5693, 0.6353, 0.6172, 0.5693, 0.6455, 0.5962, 0.5103, 0.6401, 0.5674, 0.5254, 0.6221, 0.5493, 0.5703, 0.6265, 0.6187, 0.6284, 0.6108, 0.6001, 0.5918, 0.5269, 0.6885, 0.5693, 0.6055, 0.6196, 0.6396, 0.6099, 0.6294, 0.6587, 0.6108, 0.5322,\n        0.5615, 0.6216, 0.6387, 0.5117, 0.5840, 0.6343, 0.6016, 0.6035, 0.6079, 0.5273, 0.6016, 0.4609, 0.5928, 0.6045, 0.6162, 0.6602, 0.6191, 0.6318, 0.5513, 0.5801, 0.5786, 0.5679, 0.6226, 0.5718, 0.6094, 0.5493, 0.5737, 0.6104, 0.5781, 0.5986, 0.5977, 0.5776, 0.5835, 0.5933, 0.5757, 0.5918, 0.6138, 0.6636, 0.5845,\n        0.5889, 0.6294, 0.5664, 0.6118, 0.6274, 0.6265, 0.6084, 0.6270, 0.5840, 0.6240, 0.5752, 0.5947, 0.6353, 0.6157, 0.5190, 0.6431, 0.5977, 0.6235, 0.5854, 0.5869, 0.5923, 0.5981, 0.6064, 0.6387, 0.6284, 0.6187, 0.5117, 0.5967, 0.5913, 0.5957, 0.6255, 0.5815, 0.6318, 0.6631, 0.5532, 0.5586, 0.5879, 0.6548, 0.5781,\n        0.5474, 0.6333, 0.5601, 0.6016, 0.6406, 0.5557, 0.6021, 0.5181, 0.6489, 0.6411, 0.6138, 0.5864, 0.6367, 0.6060, 0.5654, 0.6372, 0.5952, 0.6636, 0.5474, 0.5376, 0.5806, 0.5586, 0.6113, 0.6084, 0.6016, 0.6313, 0.5669, 0.5151, 0.5728, 0.6162, 0.5815, 0.5454, 0.6152, 0.6206, 0.6191, 0.5869, 0.5591, 0.6499, 0.6201,\n        0.6177, 0.5620, 0.6016, 0.6416, 0.5981, 0.5728, 0.6099, 0.6177, 0.6343, 0.5322, 0.6260, 0.6035, 0.6079, 0.6943, 0.5342, 0.5737, 0.6631, 0.5757, 0.6099, 0.4790, 0.5835, 0.5898, 0.5825, 0.6436, 0.5518, 0.5479, 0.6191, 0.5938, 0.6045, 0.5981, 0.6494, 0.5601, 0.5894, 0.5483, 0.6421, 0.6274, 0.5356, 0.6035, 0.5942,\n        0.6460, 0.6006, 0.6396, 0.6108, 0.5693, 0.6064, 0.5479, 0.5264, 0.6196, 0.5903, 0.6226, 0.6011, 0.5752, 0.5762, 0.6436, 0.5327, 0.5605, 0.5693, 0.5669, 0.6343, 0.5591, 0.6719, 0.6572, 0.6064, 0.6025, 0.6514, 0.6050, 0.5195, 0.5728, 0.5786, 0.6274, 0.5889, 0.6382, 0.5918, 0.5981, 0.6060, 0.6387, 0.5640, 0.5474,\n        0.6274, 0.5356, 0.6440, 0.6074, 0.6265, 0.5444, 0.6221, 0.5654, 0.4685, 0.5376, 0.6040, 0.5981, 0.6074, 0.5322, 0.6572, 0.5630, 0.6343, 0.6084, 0.6045, 0.6504, 0.6455, 0.6343, 0.5742, 0.5649, 0.6167, 0.6382, 0.6001, 0.6655, 0.5479, 0.6719, 0.4529, 0.6021, 0.5371, 0.6304, 0.5527, 0.6235, 0.4666, 0.6050, 0.5713,\n        0.6025, 0.6426, 0.6392, 0.5557, 0.6113, 0.6323, 0.5830, 0.6133, 0.6162, 0.5850, 0.5366, 0.5854, 0.6826, 0.5806, 0.6123, 0.5996, 0.6274, 0.5796, 0.5879, 0.6094, 0.6450, 0.6504, 0.6138, 0.6128, 0.6040, 0.6226, 0.6030, 0.5962, 0.6470, 0.5850, 0.6440, 0.6104, 0.6235, 0.5874, 0.6265, 0.5742, 0.6567, 0.5278, 0.6440,\n        0.5649, 0.5908, 0.6519, 0.5332, 0.5879, 0.6040, 0.5391, 0.6143, 0.6143, 0.6416, 0.6060, 0.6504, 0.5894, 0.6260, 0.5781, 0.5908, 0.6265, 0.6597, 0.6162, 0.5532, 0.5728, 0.6401, 0.6108, 0.6040, 0.5923, 0.6104, 0.6416, 0.5723, 0.5728, 0.5840, 0.6504, 0.5752, 0.5928, 0.6304, 0.5889, 0.6182, 0.5796, 0.6108, 0.6064,\n        0.6309, 0.5190, 0.5718, 0.6094, 0.5605, 0.6304, 0.6553, 0.6011, 0.5903, 0.6479, 0.6152, 0.6045, 0.5757, 0.6382, 0.6230, 0.6455, 0.6353, 0.6450, 0.6401, 0.5757, 0.6006, 0.5864, 0.6465, 0.4712, 0.5405, 0.5840, 0.5552, 0.5522, 0.6460, 0.6680, 0.6250, 0.6333, 0.6069, 0.5513, 0.6650, 0.5420, 0.5771, 0.5864, 0.5508,\n        0.6245, 0.6182, 0.6016, 0.5449, 0.6416, 0.6104, 0.5908, 0.5806, 0.5752, 0.5840, 0.6069, 0.5645, 0.6318, 0.5864, 0.5952, 0.6406, 0.6387, 0.5981, 0.6143, 0.6309, 0.5483, 0.5547, 0.6060, 0.5752, 0.5713, 0.6006, 0.5283, 0.6987, 0.5884, 0.6304, 0.5088, 0.5972, 0.6255, 0.6245, 0.6284, 0.5830, 0.5854, 0.5537, 0.6338,\n        0.6064, 0.6328, 0.6201, 0.5815, 0.5542, 0.6089, 0.5513, 0.5991, 0.5112, 0.6382, 0.6045, 0.6284, 0.6021, 0.5957, 0.6382, 0.6460, 0.6011, 0.5498, 0.5957, 0.6162, 0.5601, 0.5835, 0.6060, 0.5850, 0.5645, 0.5762, 0.6138, 0.5957, 0.5693, 0.6401, 0.5557, 0.6099, 0.5527, 0.5781, 0.6021, 0.6187, 0.5815, 0.5640, 0.5854,\n        0.6406, 0.6050, 0.6392, 0.6069, 0.5776, 0.5820, 0.6152, 0.5527, 0.6401, 0.5859, 0.6309, 0.6396, 0.6436, 0.5986, 0.6577, 0.5381, 0.5469, 0.5010, 0.6016, 0.5190, 0.5337, 0.5435, 0.6465, 0.6172, 0.4670, 0.6694, 0.5972, 0.6016, 0.6196, 0.6294, 0.5024, 0.6035, 0.5532, 0.6240, 0.6099, 0.6191, 0.5850, 0.5249, 0.6108,\n        0.5928, 0.6831, 0.6187, 0.5737, 0.5889, 0.5581, 0.6338, 0.6182, 0.5796, 0.6128, 0.5518, 0.6084, 0.6064, 0.6533, 0.6572, 0.5488, 0.5801, 0.5889, 0.6196, 0.6245, 0.5610, 0.6226, 0.6167, 0.5698, 0.5918, 0.6299, 0.6191, 0.6128, 0.5742, 0.5195, 0.6030, 0.6201, 0.6323, 0.5889, 0.5791, 0.6216, 0.6372, 0.6484, 0.6201,\n        0.5508, 0.5850, 0.5928, 0.5581, 0.6108, 0.5679, 0.6157, 0.6138, 0.6475, 0.6494, 0.6235, 0.5928, 0.6323, 0.5430, 0.6050, 0.6284, 0.6167, 0.6011, 0.5786, 0.6484, 0.5728, 0.5996, 0.5586, 0.5576, 0.5942, 0.5908, 0.6157, 0.5757, 0.5801, 0.6113, 0.6318, 0.6060, 0.6323, 0.6733, 0.6099, 0.5986, 0.6216, 0.6118, 0.6104,\n        0.5830, 0.6318, 0.6597, 0.5830, 0.4954, 0.5532, 0.6001, 0.6592, 0.6025, 0.5469, 0.6250, 0.5889, 0.5933, 0.5864, 0.6011, 0.5986, 0.6187, 0.6216, 0.6743, 0.6401, 0.6001, 0.6294, 0.6655, 0.5996, 0.6567, 0.6177, 0.5610, 0.6133, 0.5962, 0.6162, 0.5938, 0.6226, 0.6162, 0.5977, 0.6343, 0.6074, 0.6621, 0.6060, 0.6328,\n        0.5972, 0.6475, 0.6309, 0.5864, 0.6035, 0.5884, 0.5728, 0.6235, 0.5923, 0.5454, 0.6401, 0.5874, 0.5776, 0.5439, 0.5742, 0.5737, 0.6074, 0.6206, 0.6523, 0.6489, 0.6050, 0.6318, 0.5815, 0.5547, 0.5913, 0.4934, 0.6411, 0.6450, 0.6470, 0.6206, 0.5435, 0.6187, 0.6050, 0.6177, 0.6284, 0.5430, 0.5947, 0.5425, 0.5845,\n        0.6191, 0.6279, 0.6357, 0.6460, 0.6040, 0.6162, 0.6240, 0.6284, 0.6152, 0.5825, 0.6162, 0.6226, 0.5840, 0.6206, 0.5767, 0.6094, 0.5527, 0.5122, 0.5806, 0.6011, 0.6230, 0.5918, 0.6069, 0.6250, 0.5757, 0.5249, 0.5977, 0.6431, 0.6206, 0.5645, 0.5205, 0.6216, 0.5859, 0.6372, 0.6055, 0.6392, 0.6309, 0.5942, 0.5947,\n        0.5210, 0.6079, 0.6504, 0.6001, 0.5449, 0.6143, 0.6431, 0.6094, 0.6421, 0.6060, 0.6270, 0.5962, 0.5859, 0.6270, 0.5518, 0.5322, 0.5562, 0.6211, 0.5830, 0.5859, 0.6201, 0.5918, 0.6152, 0.5415, 0.5317, 0.5562, 0.5508], dtype=torch.float16), 'perceiver_resampler.layers.1.0.norm2.bias': tensor([-0.0422, -0.0167, -0.0359, -0.0708, -0.0438,  0.0478, -0.0759,  0.0074,  0.0266, -0.0459,  0.0218, -0.1760,  0.0204, -0.1188,  0.0970,  0.0414,  0.0106,  0.1142, -0.0253, -0.0555, -0.1027, -0.0375, -0.0173,  0.1320, -0.0970,  0.0576,  0.0412, -0.0168,  0.0079,  0.0325,  0.0428,  0.0651, -0.0253,  0.0529,\n         0.1335,  0.0374,  0.0939,  0.0639, -0.0533, -0.0845, -0.0287,  0.0424, -0.0056,  0.0232,  0.0552, -0.0948,  0.0210,  0.0862, -0.0332,  0.0126, -0.0236,  0.1144,  0.0448,  0.0812,  0.0663,  0.0518, -0.0273,  0.0736, -0.0336,  0.0998, -0.0862,  0.0037,  0.0477, -0.0246, -0.0574,  0.0231,  0.0713,  0.1678,\n         0.0264,  0.0524, -0.0893, -0.0196, -0.0039, -0.0904, -0.0125,  0.0058, -0.0667, -0.1813,  0.1344,  0.0079,  0.0754, -0.0016,  0.0873,  0.0232,  0.0374,  0.0778, -0.0254, -0.1335, -0.1011, -0.1963,  0.1009, -0.0516,  0.0574, -0.0111, -0.0602, -0.0972, -0.0204, -0.0787, -0.0861,  0.0684,  0.0792,  0.0696,\n         0.0440, -0.1500,  0.0804,  0.0319,  0.0154, -0.0573,  0.0412,  0.0828, -0.0777,  0.0306, -0.0435, -0.0982,  0.0458, -0.0212,  0.1274, -0.0645,  0.0112, -0.0410, -0.0043, -0.0651, -0.0393, -0.0272,  0.0064,  0.1152,  0.0372, -0.0430,  0.0373, -0.0675, -0.0231,  0.1663,  0.0260,  0.0634, -0.0406, -0.0096,\n        -0.0861,  0.0854, -0.0650,  0.0363,  0.0335, -0.0608,  0.0927,  0.1477, -0.0973, -0.1138,  0.0164, -0.0213,  0.0584, -0.0108, -0.0027,  0.0274, -0.1136, -0.0412, -0.0360, -0.1257,  0.1193,  0.0317,  0.0259, -0.0431,  0.0784, -0.0605, -0.0192, -0.1431,  0.0008, -0.0496, -0.0554, -0.0175,  0.0298,  0.0513,\n        -0.0049,  0.0228,  0.0188, -0.0407, -0.1527, -0.1804, -0.0587,  0.0684,  0.0451, -0.1313,  0.0625,  0.0944,  0.1362,  0.0255,  0.0538, -0.0502,  0.0441, -0.0838,  0.0035,  0.0226, -0.0592,  0.0959,  0.0911, -0.0246, -0.0485, -0.0095,  0.1257, -0.0474,  0.0569, -0.0723,  0.0795,  0.0336,  0.0118,  0.0469,\n         0.0864,  0.0354, -0.0740, -0.0368,  0.0900, -0.0114,  0.1133, -0.0504, -0.0845, -0.0905,  0.1709,  0.1294, -0.0023, -0.0823, -0.0147,  0.1689, -0.0298, -0.0236, -0.0649,  0.1024, -0.0388,  0.0832,  0.1749,  0.0886, -0.1090, -0.0123, -0.0384,  0.1616,  0.0637,  0.0793, -0.0234,  0.0748, -0.0375, -0.0911,\n         0.1681,  0.0522, -0.0219,  0.0311,  0.0762,  0.0618, -0.0900, -0.0031,  0.0866,  0.0253, -0.0482,  0.1206,  0.0670,  0.0523,  0.1237,  0.0452,  0.1128, -0.0218, -0.0652,  0.0862,  0.0941,  0.0626, -0.0555,  0.1833,  0.0820, -0.0311, -0.0122, -0.0023,  0.0241, -0.0101,  0.0530,  0.0683,  0.0641,  0.1445,\n        -0.0450, -0.0556,  0.1252,  0.0002,  0.0997,  0.0598,  0.0778, -0.0029,  0.0091, -0.1753,  0.1677, -0.1025, -0.0493,  0.0518, -0.0248,  0.0118,  0.0882, -0.0006, -0.0519,  0.0879, -0.0606, -0.0302, -0.0081,  0.1068, -0.1080,  0.1058,  0.0376, -0.0179,  0.0472, -0.0306, -0.0381, -0.2400,  0.0506, -0.0253,\n         0.0583,  0.1548,  0.0107, -0.1840,  0.0433, -0.0738, -0.0501,  0.0305,  0.0641,  0.1223, -0.0207, -0.0353, -0.1076,  0.0880,  0.1021, -0.1320, -0.0635, -0.1255, -0.0836,  0.0237,  0.0568, -0.0291, -0.0243,  0.0587,  0.1267, -0.0694,  0.0768,  0.0572,  0.0285,  0.0116, -0.0135, -0.0317,  0.0618, -0.0498,\n         0.0677, -0.0609, -0.0273,  0.0516,  0.0734,  0.1155, -0.0204,  0.0884,  0.0218,  0.0137, -0.0535, -0.1541, -0.0726, -0.0359,  0.1177, -0.0630,  0.0312, -0.1079,  0.0864, -0.0480, -0.0008,  0.0575, -0.0102,  0.1298, -0.0621,  0.0539,  0.0808,  0.0068,  0.0217, -0.0205, -0.0743,  0.0136, -0.0079, -0.0645,\n         0.0093,  0.0665, -0.0922, -0.0842, -0.0632, -0.0117, -0.1025,  0.0124, -0.0509,  0.0696,  0.0120,  0.0114, -0.0706,  0.0743,  0.0555, -0.0864,  0.0252, -0.1602, -0.1493,  0.0231,  0.0878,  0.0204, -0.0268, -0.0165,  0.0065,  0.0092,  0.0770,  0.0321,  0.0889,  0.0691, -0.0804, -0.0260, -0.0670,  0.0286,\n        -0.0282, -0.0808, -0.0243, -0.0652,  0.0377, -0.1335, -0.1489, -0.0574, -0.1694,  0.1489,  0.0313,  0.0435,  0.0670, -0.0618, -0.0237, -0.0315,  0.0315,  0.1653, -0.0605,  0.1102, -0.1138,  0.0008, -0.0693, -0.0157,  0.1267, -0.0556, -0.0324,  0.1287, -0.0179, -0.0963,  0.0692,  0.0515,  0.1333, -0.0132,\n         0.0309,  0.0499,  0.0407, -0.0566, -0.1146,  0.0260,  0.0301, -0.1327, -0.0086, -0.0535,  0.0527, -0.0418,  0.0861,  0.1615,  0.0177, -0.0269,  0.0397,  0.1309, -0.0580, -0.0767,  0.0054,  0.0413, -0.1010, -0.0109, -0.0273, -0.0174, -0.0226,  0.0246, -0.0771, -0.0777, -0.1035, -0.1169, -0.0927, -0.0490,\n         0.1351,  0.0714,  0.0285, -0.0246,  0.0259,  0.0652, -0.0753,  0.0145,  0.0594, -0.0609, -0.0650, -0.0012,  0.0622, -0.0348,  0.0406,  0.1013, -0.0060, -0.0991, -0.0345,  0.0881,  0.0829,  0.0064,  0.1420,  0.1197, -0.1036,  0.0963, -0.0864,  0.0393, -0.0846,  0.0854, -0.1097, -0.0075,  0.0323,  0.0690,\n        -0.0949,  0.1094, -0.0049,  0.0323,  0.1312, -0.0353,  0.0268, -0.0104, -0.0345, -0.0775,  0.0953, -0.0368,  0.1841, -0.1456, -0.0779,  0.0302, -0.1434, -0.1182, -0.0891, -0.0064, -0.0512, -0.2045,  0.0157,  0.0381,  0.0222, -0.0280, -0.0202,  0.0016,  0.0269,  0.1172,  0.0374, -0.0142,  0.0490,  0.0820,\n         0.1036,  0.0836,  0.0194, -0.0151,  0.0694,  0.1232,  0.0267, -0.0996, -0.0236, -0.0091,  0.0542, -0.1229,  0.1497, -0.0740,  0.0739, -0.0200, -0.0140, -0.1888, -0.0306,  0.0323,  0.0206, -0.0506,  0.0524, -0.0120, -0.0147,  0.1119,  0.0387, -0.0274, -0.0666,  0.0935, -0.1166, -0.1230,  0.0860,  0.0733,\n         0.0259, -0.0437, -0.0582, -0.0419, -0.0160,  0.0272, -0.0454, -0.0060,  0.0715, -0.0080,  0.1288, -0.0359,  0.0708, -0.0872,  0.0421, -0.0753,  0.0153, -0.0247, -0.0706,  0.0189,  0.0675, -0.0569,  0.0273, -0.0291, -0.0825,  0.0879,  0.0509,  0.1039, -0.0620,  0.0101,  0.0300, -0.0126,  0.0710, -0.0128,\n         0.0790, -0.0520,  0.0192,  0.0138, -0.0031,  0.0422, -0.0308, -0.0106, -0.0891,  0.0054,  0.0109,  0.0277,  0.0848, -0.0658,  0.0413, -0.1002,  0.1125, -0.1002, -0.0058, -0.0196,  0.1053, -0.1157, -0.0034, -0.0172, -0.0726,  0.0714, -0.0599, -0.0723,  0.0174, -0.0188, -0.0238, -0.0324, -0.0967,  0.0618,\n        -0.0077,  0.0351,  0.0022, -0.0509,  0.0901, -0.0173,  0.0678,  0.0091,  0.0213,  0.0478,  0.0765, -0.0840,  0.0707, -0.0779,  0.0330, -0.0519,  0.0565, -0.0996, -0.0916, -0.0224, -0.0607, -0.0108,  0.0494,  0.0912,  0.0703,  0.0819,  0.0074,  0.0436, -0.0496, -0.0715,  0.0892,  0.0930, -0.0488,  0.0884,\n         0.0082,  0.0490, -0.0198, -0.0955,  0.0161, -0.0193, -0.1538,  0.0087, -0.1232, -0.0554, -0.0117,  0.0045,  0.0385,  0.0140,  0.0251,  0.0668, -0.0685,  0.0309, -0.0846, -0.0737,  0.1155, -0.0193,  0.0024, -0.0365,  0.0793, -0.0397, -0.0560, -0.0968, -0.0042, -0.0123, -0.0089, -0.0122,  0.0259, -0.0424,\n        -0.0869, -0.0332, -0.0951,  0.0850, -0.1057,  0.1836, -0.0425,  0.0056, -0.0497, -0.0700,  0.0636,  0.0318, -0.1088,  0.1511, -0.0744,  0.1226,  0.1201, -0.0871,  0.1676,  0.0215,  0.1089,  0.0331, -0.0454, -0.0643, -0.0316, -0.0961,  0.0442,  0.1526,  0.0234, -0.0181,  0.0765,  0.0737, -0.0352,  0.0850,\n        -0.0601, -0.0025,  0.0974, -0.0586,  0.1166,  0.0298, -0.0582, -0.0380,  0.1611, -0.1367,  0.0591,  0.0715,  0.0789, -0.0192, -0.0129, -0.0609, -0.0895, -0.0133,  0.1616, -0.1062], dtype=torch.float16), 'perceiver_resampler.layers.1.0.to_q.weight': tensor([[ 0.0194, -0.0086,  0.0033,  ..., -0.0130, -0.0089, -0.0125],\n        [-0.0436, -0.0211, -0.0741,  ...,  0.0263,  0.0086, -0.0072],\n        [-0.0245,  0.0075,  0.0044,  ..., -0.0078,  0.0191,  0.0349],\n        ...,\n        [-0.0406, -0.0367,  0.0094,  ..., -0.0025, -0.0050,  0.0237],\n        [-0.0049, -0.0241,  0.0273,  ..., -0.0068,  0.0256,  0.0175],\n        [ 0.0265,  0.0104,  0.0020,  ...,  0.0693, -0.0046, -0.0053]], dtype=torch.float16), 'perceiver_resampler.layers.1.0.to_kv.weight': tensor([[-0.0125,  0.0191,  0.0296,  ..., -0.0424,  0.0221, -0.0014],\n        [ 0.0467, -0.0298,  0.0335,  ...,  0.0205,  0.0122, -0.0267],\n        [ 0.0193,  0.0361,  0.0268,  ...,  0.0159,  0.0149,  0.0088],\n        ...,\n        [ 0.0079,  0.0013, -0.0250,  ..., -0.0016, -0.0070,  0.0668],\n        [ 0.0010, -0.0267, -0.0192,  ..., -0.0006,  0.0104, -0.0113],\n        [-0.0036,  0.0090,  0.0305,  ...,  0.0272,  0.0240, -0.0384]], dtype=torch.float16), 'perceiver_resampler.layers.1.0.to_out.weight': tensor([[ 0.0042, -0.0216,  0.0410,  ...,  0.0030,  0.0493, -0.0262],\n        [-0.0586, -0.0706,  0.0138,  ...,  0.0468,  0.0006,  0.0101],\n        [-0.0097,  0.0205, -0.0143,  ..., -0.0306, -0.0126, -0.0384],\n        ...,\n        [-0.0481, -0.0646,  0.0159,  ...,  0.0194,  0.0019, -0.0172],\n        [-0.0116,  0.0259, -0.0192,  ...,  0.0010,  0.0635, -0.0098],\n        [ 0.0185, -0.0068,  0.0145,  ..., -0.0860, -0.0174,  0.0303]], dtype=torch.float16), 'perceiver_resampler.layers.1.1.0.weight': tensor([0.8760, 0.7798, 0.8755, 0.8711, 0.7456, 0.8687, 0.8535, 0.8169, 0.8140, 0.8179, 0.9160, 0.9043, 0.8667, 0.7856, 0.8516, 0.7642, 0.8472, 0.8130, 0.8584, 0.8281, 0.9297, 0.8110, 0.7544, 0.8174, 0.8516, 0.8540, 0.8096, 0.8584, 0.9072, 0.8838, 0.7793, 0.6880, 0.8867, 0.9355, 0.8599, 0.8223, 0.8062, 0.7861, 0.9126,\n        0.9004, 0.8335, 0.6885, 0.8535, 0.8281, 0.7686, 0.7715, 0.8252, 0.9111, 0.8501, 0.8838, 0.8848, 0.8457, 0.8677, 0.8315, 0.6826, 0.8418, 0.8516, 0.8804, 0.8745, 0.8052, 0.7651, 0.8481, 0.9180, 0.8584, 0.8599, 0.8501, 0.8325, 0.9316, 0.9292, 0.8970, 0.7148, 0.8774, 0.8677, 0.8672, 0.8545, 0.8145, 0.8394, 0.8857,\n        0.8872, 0.8877, 0.8706, 0.7534, 0.8657, 0.7959, 0.8657, 0.8584, 0.8286, 0.9180, 0.8862, 0.8682, 0.9355, 0.7651, 0.8496, 0.8838, 0.8540, 0.9229, 0.7051, 0.8667, 0.7954, 0.8374, 0.9009, 0.7695, 0.8296, 0.8755, 0.8589, 0.9028, 0.8804, 0.8418, 0.9111, 0.8726, 0.8037, 0.8584, 0.8022, 0.6777, 0.9287, 0.8940, 0.9160,\n        0.8550, 0.9048, 0.8081, 0.8506, 0.9009, 0.8745, 0.8945, 0.8438, 0.8467, 0.7339, 0.8130, 0.7739, 0.9351, 0.8682, 0.7744, 0.8193, 0.9116, 0.8779, 0.8506, 0.9136, 0.8564, 0.7798, 0.8306, 0.8384, 0.8296, 0.8760, 0.7476, 0.9053, 0.8799, 0.7578, 0.8179, 0.8652, 0.8228, 0.8496, 0.8271, 0.9248, 0.8589, 0.7988, 0.8867,\n        0.8970, 0.8071, 0.6748, 0.8574, 0.8862, 0.7651, 0.8687, 0.6870, 0.8433, 0.8652, 0.8496, 0.8574, 0.8525, 0.9019, 0.8037, 0.8599, 0.8818, 0.8945, 0.8340, 0.9165, 0.8086, 0.8496, 0.8423, 0.9380, 0.7705, 0.8477, 0.8110, 0.8066, 0.7788, 0.8701, 0.8242, 0.7568, 0.8491, 0.8706, 0.8901, 0.8936, 0.8896, 0.9023, 0.8042,\n        0.8975, 0.8442, 0.8569, 0.8755, 0.8198, 0.6479, 0.8818, 0.8135, 0.8955, 0.8237, 0.8882, 0.9136, 0.7363, 0.9048, 0.8730, 0.8906, 0.7773, 0.8452, 0.9019, 0.6787, 0.8623, 0.8057, 0.7480, 0.8911, 0.9321, 0.8525, 0.8838, 0.8833, 0.8667, 0.8389, 0.8315, 0.9678, 0.8921, 0.8018, 0.7900, 0.8618, 0.9238, 0.8442, 0.8794,\n        0.8867, 0.8291, 0.8638, 0.9160, 0.9429, 0.7739, 0.7666, 0.7188, 0.7910, 0.8164, 0.8838, 0.8472, 0.8521, 0.7944, 0.8428, 0.9126, 0.7393, 0.7832, 0.8364, 0.8374, 0.8916, 0.9038, 0.9043, 0.8086, 0.8335, 0.7905, 0.9414, 0.8130, 0.8730, 0.8335, 0.8540, 0.6982, 0.8696, 0.8071, 0.7949, 0.8320, 0.7559, 0.9053, 0.8418,\n        0.8774, 0.9214, 0.8442, 0.9229, 0.7832, 0.8330, 0.9458, 0.8467, 0.7842, 0.9424, 0.9395, 0.8916, 0.8408, 0.6694, 0.8872, 0.8896, 0.8687, 0.8926, 0.8667, 0.8535, 0.8950, 0.8594, 0.9087, 0.8042, 0.8970, 0.8359, 0.8369, 0.8638, 0.8853, 0.8506, 0.7681, 0.8340, 0.5962, 0.8530, 0.8452, 0.8564, 0.7900, 0.7993, 0.7812,\n        0.8491, 0.8110, 0.9351, 0.8198, 0.8379, 0.8491, 0.8638, 0.8486, 0.9023, 0.8652, 0.7827, 0.9219, 1.0215, 0.7505, 0.8970, 0.8853, 0.8521, 0.8711, 0.9722, 0.8257, 0.9028, 0.8838, 0.7700, 0.7769, 0.8438, 0.8604, 0.8784, 0.8667, 0.8755, 0.8398, 0.8438, 0.9189, 0.8555, 0.8696, 0.8501, 0.8799, 0.8613, 0.6714, 0.8765,\n        0.7710, 0.9316, 0.8584, 0.9287, 0.8706, 0.8013, 0.7920, 0.8584, 0.8511, 0.9033, 0.8169, 0.8408, 0.8633, 0.8691, 0.8550, 0.8638, 0.8428, 0.8604, 0.8730, 0.8267, 0.8311, 0.8921, 0.9219, 0.8228, 0.8047, 0.8184, 0.9370, 0.7671, 0.8457, 0.8857, 0.8882, 0.8672, 0.8735, 0.9199, 0.8594, 0.8901, 0.8423, 0.8374, 0.8843,\n        0.8770, 0.8672, 0.9380, 0.8364, 0.8716, 0.8618, 0.8604, 0.9082, 0.7529, 0.8862, 0.8667, 0.7866, 0.8081, 0.9448, 0.8931, 0.9004, 0.8062, 0.8262, 0.8379, 0.9229, 0.8779, 0.8120, 0.8677, 0.7876, 0.7471, 0.8418, 0.9136, 0.8872, 0.8975, 0.9106, 0.8511, 0.8979, 0.8066, 0.8198, 0.8208, 0.9160, 0.7183, 0.9102, 0.8623,\n        0.8784, 0.7988, 0.8862, 0.8174, 0.8481, 0.8643, 0.8506, 0.7749, 0.9180, 0.7012, 0.8911, 0.9282, 0.8184, 0.7017, 0.8252, 0.9121, 0.8833, 0.8652, 0.8574, 0.8188, 0.8921, 0.8887, 0.8193, 0.8071, 0.8296, 0.8716, 0.9141, 0.8135, 0.7925, 0.8486, 0.7788, 0.8511, 0.8335, 0.7739, 0.8325, 0.7891, 0.8115, 0.7681, 0.8984,\n        0.8804, 0.8701, 0.9189, 0.7935, 0.9023, 0.8374, 0.7251, 0.8198, 0.8428, 0.9531, 0.8491, 0.7676, 0.7910, 0.7876, 0.8721, 0.8511, 0.7642, 0.6831, 0.8145, 0.8154, 0.8735, 0.8901, 0.8486, 0.8105, 0.7310, 0.8115, 0.7710, 0.8784, 0.9175, 0.8354, 0.8989, 0.7861, 0.8120, 0.8457, 0.8657, 0.7695, 0.7700, 0.9194, 0.8555,\n        0.8979, 0.7871, 0.8071, 0.9126, 0.8872, 0.7700, 0.8335, 0.8896, 0.9028, 0.9180, 0.8501, 0.8506, 0.8237, 0.8960, 0.8936, 0.7915, 0.8647, 0.6040, 0.8481, 0.8823, 0.8486, 0.8359, 0.8379, 0.8418, 0.7578, 0.8848, 0.8872, 0.8115, 0.8374, 0.8203, 0.7642, 0.8989, 0.9160, 0.9038, 0.8574, 0.8423, 0.8267, 0.7256, 0.8755,\n        0.8271, 0.8579, 0.8496, 0.9365, 0.8120, 0.8862, 0.8604, 0.9004, 0.7275, 0.8857, 0.9272, 0.9248, 0.8350, 0.8755, 0.8223, 0.9263, 0.8408, 0.8379, 0.8701, 0.8706, 0.6143, 0.8413, 0.8926, 0.9219, 0.8857, 0.8965, 0.8540, 0.9023, 0.8765, 0.7183, 0.8315, 0.8555, 0.8584, 0.8335, 0.8530, 0.9302, 0.8530, 0.8584, 0.8657,\n        0.7002, 0.8613, 0.8145, 0.8882, 0.8442, 0.8677, 0.8711, 0.7720, 0.8438, 0.8848, 0.8477, 0.9097, 0.8662, 0.8032, 0.9297, 0.8730, 0.8115, 0.8896, 0.7109, 0.8286, 0.8062, 0.8311, 0.8442, 0.7905, 0.8022, 0.8828, 0.8066, 0.8823, 0.7939, 0.8315, 0.8540, 0.7886, 0.8462, 0.8125, 0.8931, 0.8550, 0.8306, 0.8730, 0.8613,\n        0.8501, 0.8906, 0.8682, 0.8521, 0.7437, 0.8218, 0.8638, 0.8428, 0.8677, 0.8818, 0.8994, 0.8691, 0.8638, 0.8721, 0.6694, 0.7793, 0.8394, 0.8984, 0.8716, 0.8462, 0.9043, 0.8428, 0.8672, 0.8525, 0.8154, 0.9155, 0.6406, 0.8555, 0.8418, 0.7656, 0.8511, 0.8301, 0.8784, 0.8535, 0.8984, 0.9233, 0.8867, 0.8760, 0.8794,\n        0.8730, 0.8569, 0.8936, 0.7886, 0.8442, 0.8379, 0.8213, 0.8657, 0.7910, 0.7603, 0.8604, 0.8823, 0.8872, 0.8066, 0.7759, 0.7656, 0.8911, 0.8364, 0.8652, 0.8721, 0.9033, 0.8164, 0.9253, 0.8442, 0.8369, 0.9233, 0.8203, 0.8535, 0.8315, 0.7866, 0.7109, 0.8613, 0.8828, 0.8745, 0.8618, 0.8926, 0.6162, 0.8618, 0.7417,\n        0.7939, 0.8691, 0.8613, 0.8857, 0.8931, 0.9014, 0.8623, 0.8716, 0.8696, 0.8101, 0.8809, 0.8091, 0.9209, 0.8877, 0.9365, 0.8530, 0.7441, 0.8857, 0.9150, 0.8022, 0.8271, 0.8203, 0.8516, 0.8213, 0.8501, 0.9351, 0.8862, 0.8682, 0.8823, 0.9004, 0.8394, 0.8599, 0.8506, 0.9087, 0.8652, 0.8052, 0.8691, 0.8921, 0.8735,\n        0.7656, 0.8521, 0.8677, 0.8438, 0.8506, 0.7754, 0.8540, 0.8032, 0.8760, 0.8921, 0.8438, 0.7422, 0.8716, 0.8149, 0.8711, 0.7949, 0.9287, 0.9243, 0.8916, 0.8232, 0.8652, 0.8213, 0.8735, 0.8711, 0.5288, 0.7681, 0.8135], dtype=torch.float16), 'perceiver_resampler.layers.1.1.0.bias': tensor([ 1.0559e-01, -4.7089e-02, -2.0493e-02,  1.2286e-01,  2.4353e-02, -7.2205e-02,  4.4289e-03,  1.8936e-02, -5.7587e-02, -1.4465e-02, -1.7004e-01,  1.8970e-01, -8.7214e-04,  3.1616e-02, -8.8074e-02, -8.7280e-02,  6.5979e-02, -1.2927e-01, -1.6003e-01,  3.8391e-02,  1.0504e-01,  2.0275e-03,  1.3867e-01, -1.4404e-01,\n         1.4050e-01, -8.5815e-02, -1.1322e-02,  9.1064e-02, -2.7466e-02, -1.0223e-01,  1.0468e-01,  8.8577e-03,  1.5735e-01, -1.5649e-01, -1.6772e-01, -1.2329e-01, -9.4299e-02, -5.5756e-02,  1.2744e-01,  1.7822e-01,  4.1260e-02,  1.5114e-02,  4.8279e-02,  1.1612e-02, -6.8970e-02,  1.2549e-01,  6.5613e-02, -1.1700e-01,\n         1.0760e-01,  4.2877e-02, -4.9072e-02, -1.2622e-01, -7.6111e-02, -3.2257e-02, -1.7493e-01, -5.9570e-02,  4.0527e-02, -1.7786e-01,  1.7426e-02, -1.2201e-01,  5.0446e-02, -2.3758e-02, -1.4404e-01,  3.2768e-03,  6.9824e-02, -3.9185e-02, -2.0477e-02, -1.8945e-01, -3.2196e-02, -1.8042e-01,  1.2769e-01, -4.2572e-03,\n         6.5918e-02,  8.3740e-02, -3.2410e-02, -4.1008e-03,  1.1523e-01,  1.4954e-01, -1.2878e-01, -5.3436e-02, -1.1523e-01,  1.1969e-01, -1.6492e-01,  2.9388e-02, -6.7322e-02, -1.2152e-01,  2.0752e-02,  1.0895e-01,  1.3574e-01,  1.4514e-01, -1.8665e-01, -6.1951e-02, -1.2671e-01,  3.1372e-02,  7.2388e-02,  1.1652e-01,\n        -1.2291e-02,  1.4478e-01,  1.1157e-01, -1.6003e-01, -6.0158e-03, -8.6670e-02, -5.5275e-03,  1.4038e-01, -9.4971e-02, -7.3547e-02, -7.9712e-02,  1.0022e-01, -1.3025e-01, -1.4587e-01,  4.8340e-02,  3.2104e-02,  6.0892e-04,  4.6501e-03, -9.1064e-02, -3.0884e-02, -1.7786e-01,  5.3040e-02,  6.3171e-02,  2.7176e-02,\n         1.0779e-01,  1.4783e-01,  4.1168e-02,  8.4167e-02,  9.3140e-02, -4.8615e-02, -1.1848e-02,  6.4148e-02,  1.2000e-01,  1.3733e-01,  3.8391e-02, -5.3101e-02, -3.1052e-02, -1.4905e-01,  5.6122e-02, -5.1819e-02,  1.5979e-01, -1.1804e-01,  3.2898e-02, -4.9469e-02,  1.7609e-02, -1.2402e-01, -8.8379e-02, -6.1310e-02,\n         1.3452e-01,  6.3904e-02,  3.2013e-02, -5.5389e-02, -1.3489e-01,  6.2012e-02, -5.1537e-03, -1.3123e-01,  1.5430e-01,  9.0210e-02,  8.0505e-02,  1.6785e-01, -1.7358e-01, -7.5760e-03, -1.0876e-01,  1.1682e-01,  5.5420e-02,  1.2878e-01, -5.7892e-02,  1.9006e-01, -3.7323e-02,  2.1561e-02,  8.9722e-02,  2.7145e-02,\n        -9.1492e-02, -1.3171e-01, -5.7907e-03, -6.7627e-02, -9.9609e-02,  8.2474e-03,  1.1420e-01,  1.9873e-01,  6.5857e-02, -9.2407e-02, -8.1909e-02,  1.6797e-01,  9.4116e-02, -4.5288e-02, -1.4954e-01, -4.1016e-02, -8.2092e-02,  5.8197e-02, -1.2213e-01,  1.4380e-01,  8.0872e-02, -8.1848e-02,  5.7526e-02, -3.0792e-02,\n        -1.2817e-01,  1.0272e-01,  1.3184e-01,  6.1798e-02, -9.7412e-02, -1.5259e-02, -2.2186e-02,  3.5248e-02, -4.6112e-02, -1.0504e-01, -7.3486e-02, -1.6028e-01, -5.7770e-02, -8.8989e-02,  1.0352e-01,  7.6111e-02, -9.2712e-02,  9.3750e-02, -1.5198e-01,  2.9572e-02,  1.2366e-01,  1.2683e-01, -1.7041e-01, -9.4543e-02,\n         1.2688e-02,  3.3438e-05,  8.7280e-02, -1.7310e-01,  5.3406e-02,  1.1395e-01,  5.3955e-02,  2.5330e-02,  4.0039e-02, -4.7485e-02, -1.9019e-01, -4.7150e-02,  1.0486e-01, -4.8706e-02,  3.1235e-02, -2.0422e-01, -1.2463e-01, -4.3335e-02,  8.9111e-02, -7.7881e-02,  5.4199e-02,  1.6089e-01, -1.9458e-01, -1.2891e-01,\n        -4.0955e-02,  3.5400e-02, -7.8491e-02, -4.9438e-02,  1.2323e-01, -5.6549e-02, -1.4160e-01, -6.9153e-02,  1.9775e-02, -1.6321e-01,  1.0510e-01, -1.3885e-02, -1.4868e-01, -9.8389e-02, -1.4185e-01,  1.1890e-01,  9.1980e-02, -5.3345e-02, -5.7312e-02, -9.4910e-03,  1.7078e-01, -1.1011e-01, -1.0986e-01, -6.4270e-02,\n         6.7078e-02, -1.1407e-01, -9.0881e-02, -1.1177e-02, -2.5330e-02, -5.6427e-02, -1.3367e-01, -1.5137e-01,  4.8370e-02,  5.6915e-02, -1.8164e-01,  6.6040e-02, -1.4758e-01, -2.9037e-02, -7.4829e-02,  1.3135e-01, -4.2648e-03,  1.5588e-01, -1.8274e-01,  1.4868e-01,  1.8872e-01, -1.8021e-02,  2.2980e-02,  2.9907e-02,\n        -1.5662e-01, -4.7180e-02,  1.3049e-01, -5.5267e-02, -2.2186e-02,  5.8289e-02,  1.2636e-03, -6.8359e-02, -2.1271e-02, -1.3037e-01, -9.6924e-02,  1.4038e-01,  1.7029e-02,  1.3831e-01,  2.1057e-02,  1.5356e-01, -4.1046e-02, -7.3853e-02,  1.0400e-01, -1.3428e-01, -8.2153e-02,  1.5845e-01,  6.8909e-02,  1.6174e-01,\n         9.4299e-02, -9.3079e-02, -1.2549e-01, -6.8726e-02,  2.2919e-02,  8.2947e-02,  1.3977e-01, -7.8918e-02, -9.5276e-02,  1.6028e-01,  8.3008e-03,  1.7053e-01,  1.7883e-01, -3.9642e-02, -1.2598e-01,  8.0994e-02, -3.7506e-02, -2.5818e-02, -1.5479e-01,  6.8542e-02, -4.8431e-02, -2.7420e-02, -3.7842e-02, -1.3879e-01,\n         1.1969e-01,  3.0624e-02, -7.0190e-02,  9.4666e-02, -1.3501e-01,  1.0211e-01,  1.4551e-01, -1.5161e-01, -1.8005e-02, -1.2439e-01,  3.9444e-03, -1.3965e-01, -3.3813e-02,  5.5847e-02,  3.1708e-02,  3.5248e-02,  1.3782e-01,  8.3862e-02, -1.5845e-01,  1.0986e-01, -2.5253e-02,  1.1444e-02, -4.7424e-02, -1.8110e-03,\n        -1.0321e-01,  6.6101e-02,  7.8049e-03, -1.0522e-01,  1.1871e-01, -4.0710e-02, -8.2336e-02, -6.3843e-02,  1.4908e-02,  2.5955e-02,  1.0596e-01, -3.9703e-02,  6.7932e-02,  1.6699e-01,  3.7476e-02, -9.1309e-02,  5.8441e-02,  1.3440e-01,  4.4067e-02, -1.1459e-02,  1.5405e-01,  5.1025e-02,  5.5267e-02, -1.3293e-01,\n        -2.8244e-02, -3.2444e-03,  1.2250e-01, -4.2023e-02, -1.0944e-01,  1.1108e-01,  3.6883e-04,  1.6443e-01,  1.6968e-01, -2.5604e-02, -1.0107e-01, -5.2094e-02,  2.6154e-02, -3.2410e-02, -8.5327e-02, -1.1957e-01, -1.3831e-01, -1.1963e-02, -9.7351e-02, -1.2634e-01,  7.5500e-02,  9.9548e-02,  8.8379e-02,  5.4596e-02,\n         3.2410e-02,  1.2201e-01, -3.2013e-02,  9.5337e-02, -1.1084e-01,  1.8726e-01,  1.8188e-01,  3.6926e-02,  9.6924e-02, -1.2598e-01, -1.3147e-01, -1.4343e-01, -1.1981e-01,  9.8877e-02,  7.4341e-02,  2.5681e-02,  1.3074e-01, -1.6138e-01, -3.0457e-02, -1.4539e-01,  1.2085e-01, -4.0894e-02,  8.9417e-02,  3.8361e-02,\n        -1.1688e-01,  7.5867e-02,  1.4441e-01, -1.0797e-01, -3.5431e-02,  1.2549e-01, -8.4900e-02, -3.6896e-02, -1.4880e-01,  1.1810e-02, -5.7953e-02, -9.5749e-03, -1.0986e-02,  4.6448e-02,  6.0791e-02, -1.0187e-01, -8.8623e-02,  1.1694e-01,  8.3847e-03,  6.8420e-02,  1.4372e-03,  7.5195e-02, -7.2693e-02, -1.6455e-01,\n        -1.6312e-02,  9.8450e-02,  1.2527e-02, -1.2079e-01,  4.7760e-02,  3.8422e-02,  7.6233e-02, -5.5603e-02,  3.4210e-02, -6.3293e-02,  4.5441e-02,  6.9153e-02,  2.6226e-03,  6.4735e-03,  1.4917e-01,  7.7057e-04,  1.2231e-01, -3.6133e-02,  1.7670e-02,  7.1899e-02, -1.2866e-01, -8.8623e-02, -8.3801e-02, -3.5370e-02,\n        -9.0027e-02, -2.1225e-02,  1.1926e-01, -1.9531e-02,  9.0088e-02,  2.3804e-02,  8.4534e-02, -6.8550e-03, -9.0576e-02,  4.0466e-02,  4.4922e-02, -7.9041e-02,  1.9577e-02,  1.3831e-01,  1.1633e-01, -1.2323e-01, -1.9238e-01, -1.2219e-01, -1.4172e-01, -8.6853e-02,  4.4312e-02, -3.0777e-02,  6.8176e-02, -4.1962e-03,\n         4.2496e-03, -1.7749e-01,  1.2634e-01,  1.7358e-01, -1.1206e-01, -6.7932e-02,  1.0852e-01, -1.0785e-01, -1.4172e-01, -1.2001e-02, -1.3257e-01,  4.5685e-02, -6.0547e-02, -3.1311e-02, -1.3199e-02,  5.7220e-02, -1.2469e-01,  3.6163e-02, -1.3525e-01,  1.0730e-01,  9.8022e-02, -4.0375e-02,  1.3403e-01,  1.6162e-01,\n         1.2262e-01,  1.2256e-01,  6.2683e-02,  1.6577e-01, -9.2102e-02,  3.8116e-02, -1.1517e-01,  2.4200e-02, -1.3359e-02,  1.4551e-01, -9.7595e-02, -1.7273e-01, -1.1322e-01,  1.5063e-01, -4.6051e-02, -9.4299e-02, -1.4771e-01, -1.6382e-01, -5.5817e-02,  2.1545e-02, -9.1736e-02, -1.5381e-01, -6.9153e-02,  1.3037e-01,\n         6.7383e-02,  2.8610e-02, -1.1938e-01,  1.0876e-01, -1.5332e-01,  1.6223e-01, -7.9834e-02, -9.3994e-02,  2.2934e-02,  1.9543e-01, -7.0129e-02, -1.3718e-02,  7.9041e-02,  7.1678e-03,  7.6660e-02,  1.3306e-01,  6.5735e-02, -1.6321e-01, -7.8369e-02,  6.0577e-02,  6.2012e-02, -1.3037e-01,  1.3611e-01,  2.9251e-02,\n        -4.8065e-02, -1.0913e-01, -7.4036e-02,  8.1543e-02,  7.6172e-02,  1.5369e-01,  6.5247e-02, -9.0820e-02,  1.2866e-01,  4.1901e-02, -1.8219e-02,  3.0182e-02, -1.2024e-01,  1.2164e-01, -1.3855e-01,  1.0321e-01, -6.9275e-02,  1.0400e-01, -2.5620e-02,  6.5552e-02,  1.8469e-01,  7.2289e-03, -2.3865e-02,  1.4709e-01,\n        -1.3342e-01,  4.2938e-02,  1.4893e-01,  2.0462e-02, -4.7455e-02, -4.0710e-02,  1.2842e-01, -6.9214e-02, -2.1149e-02,  1.3220e-01, -1.2585e-01, -5.3444e-03, -1.4307e-01,  7.2815e-02, -8.8745e-02,  8.1177e-02, -4.0192e-02, -1.1511e-01,  1.0535e-01,  2.6520e-02,  8.5373e-03, -6.5918e-02, -1.1700e-01, -9.2468e-02,\n        -5.1819e-02,  1.4001e-01, -1.8768e-02,  8.0933e-02, -1.7163e-01,  1.1975e-01, -9.4238e-02,  9.3201e-02, -5.3894e-02,  1.4355e-01, -1.2299e-01,  5.1575e-02,  7.2510e-02, -1.9318e-02, -3.4485e-02,  1.4221e-01, -1.7395e-03,  8.1543e-02, -5.4352e-02,  1.0010e-01,  1.3440e-01, -7.3547e-02,  1.4000e-02, -1.0980e-01,\n        -2.1545e-02,  1.2360e-01, -1.6327e-02,  1.4534e-02, -3.8071e-03,  1.1314e-02, -1.7929e-02, -4.7729e-02, -7.2876e-02,  1.0132e-02, -9.4299e-02,  1.6602e-01, -2.7954e-02,  9.0515e-02, -1.3013e-01,  1.2634e-01,  1.4404e-01,  1.0193e-01,  9.5398e-02, -1.7761e-02,  2.3453e-02, -5.8777e-02, -9.1736e-02,  1.1414e-02,\n         1.1041e-01, -2.4323e-02,  1.1554e-01,  3.9978e-02, -1.6251e-02,  2.6352e-02, -7.9407e-02, -6.7688e-02, -1.7944e-02, -1.4624e-01, -3.4637e-03,  1.4929e-01, -5.1544e-02,  2.0615e-02,  1.1981e-01, -6.0638e-02,  1.4771e-01,  8.8867e-02,  7.1167e-02, -4.7646e-03,  3.1815e-03,  3.4210e-02,  4.3030e-02, -8.2336e-02,\n        -2.1927e-02, -7.6172e-02,  1.2469e-01,  1.1920e-01, -9.9854e-02, -1.7258e-02,  4.7943e-02,  7.2594e-03, -1.0449e-01,  6.9519e-02,  1.9067e-01,  1.3818e-01,  3.1464e-02,  2.4734e-02, -9.4421e-02, -1.8509e-02, -6.9885e-02,  8.0994e-02,  1.3293e-01,  1.0474e-01,  1.7456e-01, -7.0557e-02,  6.8604e-02, -1.2115e-01,\n         8.5205e-02,  5.5351e-03, -4.2847e-02,  1.0864e-01, -9.4727e-02,  1.6663e-02,  1.1627e-01, -1.9617e-01,  1.3647e-01, -1.2476e-01, -1.1420e-01,  1.3452e-01, -1.1597e-01,  8.6121e-02, -1.1377e-01, -4.5868e-02,  8.8440e-02,  6.1188e-02,  7.4768e-02,  8.6914e-02, -9.0149e-02, -8.2626e-03, -3.9001e-02, -8.7830e-02,\n        -8.8440e-02, -9.8572e-02,  2.5085e-02, -1.0272e-01,  9.7580e-03, -3.5065e-02, -1.5393e-01,  1.0278e-01, -5.3802e-02, -7.0251e-02,  8.0139e-02,  1.6101e-01, -8.3862e-02,  1.2140e-01, -1.2140e-01, -7.7332e-02, -8.1177e-02,  1.2769e-01,  5.3070e-02,  9.3201e-02,  7.6172e-02,  1.0162e-01, -1.0803e-01,  9.5337e-02],\n       dtype=torch.float16), 'perceiver_resampler.layers.1.1.1.weight': tensor([[ 0.0072, -0.0214,  0.0046,  ...,  0.0155,  0.0296,  0.0099],\n        [ 0.0120, -0.0180,  0.0327,  ...,  0.0120, -0.0205,  0.0174],\n        [-0.0111, -0.0159,  0.0089,  ..., -0.0241,  0.0120, -0.0293],\n        ...,\n        [ 0.0061,  0.0196,  0.0041,  ...,  0.0142,  0.0300, -0.0172],\n        [-0.0403, -0.0425,  0.0425,  ..., -0.0350,  0.0617, -0.0200],\n        [-0.0137,  0.0262,  0.0500,  ...,  0.0085,  0.0399,  0.0032]], dtype=torch.float16), 'perceiver_resampler.layers.1.1.3.weight': tensor([[-0.0103, -0.0249, -0.0071,  ..., -0.0133, -0.0111, -0.0232],\n        [ 0.0072, -0.0017, -0.0133,  ...,  0.0093, -0.0363, -0.0386],\n        [ 0.0221,  0.0071, -0.0087,  ..., -0.0022,  0.0006, -0.0188],\n        ...,\n        [-0.0251,  0.0392,  0.0216,  ...,  0.0779, -0.0274,  0.0182],\n        [-0.0049,  0.0042,  0.0534,  ...,  0.0202, -0.0014,  0.0227],\n        [ 0.0158, -0.0044, -0.0285,  ...,  0.0107,  0.0215, -0.0209]], dtype=torch.float16), 'perceiver_resampler.layers.2.0.norm1.weight': tensor([0.7285, 0.7319, 0.7065, 0.7954, 0.7510, 0.7715, 0.7700, 0.7017, 0.7676, 0.7583, 0.6919, 0.7441, 0.7559, 0.8003, 0.7466, 0.6855, 0.7866, 0.6943, 0.7979, 0.7935, 0.8413, 0.8008, 0.7861, 0.7422, 0.7495, 0.7231, 0.7515, 0.6919, 0.6904, 0.7393, 0.7773, 0.8262, 0.7715, 0.7632, 0.7461, 0.7397, 0.6250, 0.7554, 0.7266,\n        0.7612, 0.7671, 0.7817, 0.8130, 0.7480, 0.7456, 0.7935, 0.7168, 0.7471, 0.7388, 0.6616, 0.7124, 0.7827, 0.7402, 0.7119, 0.7432, 0.7856, 0.7363, 0.6899, 0.7471, 0.7930, 0.7354, 0.7891, 0.7549, 0.7544, 0.7915, 0.7539, 0.7896, 0.8105, 0.7666, 0.7148, 0.7852, 0.7920, 0.7886, 0.7998, 0.7393, 0.8198, 0.7188, 0.7236,\n        0.8013, 0.6968, 0.7876, 0.7900, 0.7339, 0.6943, 0.7793, 0.7422, 0.7778, 0.7656, 0.8047, 0.7178, 0.7739, 0.7119, 0.7441, 0.6772, 0.7837, 0.7388, 0.7769, 0.6890, 0.7739, 0.7817, 0.7310, 0.7729, 0.7109, 0.7695, 0.7061, 0.7373, 0.7266, 0.7856, 0.7319, 0.7891, 0.7456, 0.7935, 0.8174, 0.7554, 0.7241, 0.7676, 0.7695,\n        0.8433, 0.7144, 0.7397, 0.7905, 0.7192, 0.7524, 0.8335, 0.7241, 0.7217, 0.7739, 0.7563, 0.6167, 0.7505, 0.7056, 0.6768, 0.7559, 0.7817, 0.7383, 0.7759, 0.7861, 0.7090, 0.7808, 0.7373, 0.6934, 0.7065, 0.6807, 0.8311, 0.7563, 0.7827, 0.7881, 0.7202, 0.7954, 0.7637, 0.7349, 0.7271, 0.7583, 0.7227, 0.7759, 0.7188,\n        0.7026, 0.6997, 0.8057, 0.7148, 0.6597, 0.7554, 0.7725, 0.7627, 0.7202, 0.7778, 0.7710, 0.7485, 0.7373, 0.7598, 0.7681, 0.7231, 0.7607, 0.7402, 0.7456, 0.7207, 0.7490, 0.7300, 0.6270, 0.7119, 0.7749, 0.6606, 0.8027, 0.7832, 0.8232, 0.7344, 0.5908, 0.7783, 0.7100, 0.7334, 0.7866, 0.6162, 0.7656, 0.7749, 0.7373,\n        0.7368, 0.6919, 0.6616, 0.7339, 0.8154, 0.7573, 0.7910, 0.7373, 0.8037, 0.7158, 0.7686, 0.6196, 0.7793, 0.7808, 0.7622, 0.7036, 0.7339, 0.6543, 0.7764, 0.8096, 0.6963, 0.7583, 0.7778, 0.7852, 0.7271, 0.7471, 0.7593, 0.7461, 0.7334, 0.7627, 0.6777, 0.7808, 0.7715, 0.6802, 0.7544, 0.7368, 0.7017, 0.8120, 0.7163,\n        0.7368, 0.6938, 0.8018, 0.7637, 0.6929, 0.7144, 0.6938, 0.7681, 0.7002, 0.7725, 0.7188, 0.7466, 0.7559, 0.7734, 0.7559, 0.7925, 0.7490, 0.7104, 0.7026, 0.6919, 0.6802, 0.7715, 0.7832, 0.7632, 0.7427, 0.7485, 0.7241, 0.7622, 0.7754, 0.7349, 0.7314, 0.7241, 0.7173, 0.7769, 0.7412, 0.7578, 0.7749, 0.7070, 0.8594,\n        0.7222, 0.7676, 0.7764, 0.7568, 0.7070, 0.7617, 0.6729, 0.7896, 0.7686, 0.7666, 0.6729, 0.7832, 0.6909, 0.7427, 0.7793, 0.7529, 0.7656, 0.7280, 0.6753, 0.7090, 0.6338, 0.7656, 0.7139, 0.7041, 0.7783, 0.7461, 0.6797, 0.7671, 0.6924, 0.6221, 0.7905, 0.7510, 0.6318, 0.7241, 0.7529, 0.7310, 0.7251, 0.7451, 0.7070,\n        0.7173, 0.7637, 0.7578, 0.7637, 0.7300, 0.7710, 0.7534, 0.7793, 0.7007, 0.7495, 0.7012, 0.6719, 0.7974, 0.7612, 0.7417, 0.7251, 0.7471, 0.8081, 0.7285, 0.7212, 0.7339, 0.7480, 0.7222, 0.7661, 0.7729, 0.7368, 0.7969, 0.7866, 0.7671, 0.7725, 0.7285, 0.7129, 0.7544, 0.7466, 0.7593, 0.7861, 0.8354, 0.7256, 0.7471,\n        0.7148, 0.6938, 0.7441, 0.7651, 0.8027, 0.7603, 0.7441, 0.7832, 0.7378, 0.7559, 0.7651, 0.7310, 0.8306, 0.7041, 0.7002, 0.7441, 0.7764, 0.7578, 0.7798, 0.7432, 0.8052, 0.7715, 0.7656, 0.7505, 0.7876, 0.7959, 0.7344, 0.8105, 0.7910, 0.7319, 0.7573, 0.7559, 0.7515, 0.7310, 0.7275, 0.7305, 0.6982, 0.7319, 0.7378,\n        0.7515, 0.7749, 0.7983, 0.6792, 0.7559, 0.7397, 0.7642, 0.7021, 0.7939, 0.7656, 0.8208, 0.7417, 0.7827, 0.7876, 0.7461, 0.7944, 0.6978, 0.7666, 0.7515, 0.7339, 0.7744, 0.7490, 0.7241, 0.7661, 0.6426, 0.7544, 0.7539, 0.7554, 0.7759, 0.7241, 0.6763, 0.7651, 0.8623, 0.7617, 0.7568, 0.7793, 0.7622, 0.7183, 0.7144,\n        0.6807, 0.8271, 0.7261, 0.7822, 0.7812, 0.7607, 0.7627, 0.7554, 0.7485, 0.7451, 0.7930, 0.7642, 0.7417, 0.7251, 0.7031, 0.7158, 0.7749, 0.8066, 0.8003, 0.7368, 0.7686, 0.7051, 0.7397, 0.7593, 0.7710, 0.7637, 0.7163, 0.6890, 0.7422, 0.7134, 0.7969, 0.6187, 0.7451, 0.6772, 0.6934, 0.6943, 0.7554, 0.7607, 0.7422,\n        0.7446, 0.7524, 0.6680, 0.7705, 0.7734, 0.7271, 0.7632, 0.7402, 0.7646, 0.7886, 0.7681, 0.6846, 0.7104, 0.7402, 0.8037, 0.7148, 0.7974, 0.6792, 0.7480, 0.6875, 0.7622, 0.7046, 0.6924, 0.7129, 0.7515, 0.7310, 0.7632, 0.7539, 0.7388, 0.7881, 0.7651, 0.7402, 0.7373, 0.7773, 0.7544, 0.7310, 0.7847, 0.7183, 0.7969,\n        0.7393, 0.7710, 0.7505, 0.8018, 0.7466, 0.7402, 0.7632, 0.7588, 0.8037, 0.8066, 0.7031, 0.7305, 0.7671, 0.7461, 0.7549, 0.7769, 0.7944, 0.8193, 0.7437, 0.6787, 0.7539, 0.7378, 0.6729, 0.7017, 0.6631, 0.7837, 0.7310, 0.8252, 0.7476, 0.6836, 0.7041, 0.7642, 0.7490, 0.7695, 0.7578, 0.7949, 0.7695, 0.6938, 0.8159,\n        0.7285, 0.7900, 0.7729, 0.7798, 0.7222, 0.7993, 0.7334, 0.8193, 0.8032, 0.7021, 0.8301, 0.7329, 0.8145, 0.7246, 0.7549, 0.7246, 0.6938, 0.7637, 0.8135, 0.7344, 0.7637, 0.7852, 0.7793, 0.6860, 0.7290, 0.7690, 0.7734, 0.6919, 0.6978, 0.7471, 0.7686, 0.7480, 0.6831, 0.7349, 0.7080, 0.7808, 0.7549, 0.8149, 0.7397,\n        0.7207, 0.7808, 0.7446, 0.7549, 0.7476, 0.6807, 0.7212, 0.7285, 0.7998, 0.7119, 0.8062, 0.8467, 0.7188, 0.7563, 0.6748, 0.7090, 0.6953, 0.7041, 0.6797, 0.7197, 0.7329, 0.7021, 0.7168, 0.8047, 0.6733, 0.7520, 0.7769, 0.6982, 0.7173, 0.6982, 0.7764, 0.7417, 0.7886, 0.7427, 0.7788, 0.7256, 0.7949, 0.7295, 0.7939,\n        0.7822, 0.6953, 0.7183, 0.7271, 0.7886, 0.7676, 0.7334, 0.7969, 0.7661, 0.7744, 0.7241, 0.7617, 0.7656, 0.8232, 0.7866, 0.7495, 0.7065, 0.7324, 0.7573, 0.7817, 0.7202, 0.8052, 0.8286, 0.7686, 0.7466, 0.7681, 0.7251, 0.7432, 0.7153, 0.6826, 0.7593, 0.7080, 0.6924, 0.7993, 0.7568, 0.8579, 0.7480, 0.7998, 0.8052,\n        0.6577, 0.7153, 0.8052, 0.8369, 0.7729, 0.7441, 0.7290, 0.6777, 0.7422, 0.7593, 0.7163, 0.7837, 0.7480, 0.7349, 0.7700, 0.7871, 0.7153, 0.7764, 0.7466, 0.7393, 0.8018, 0.7544, 0.6440, 0.7520, 0.7524, 0.7397, 0.6860, 0.7617, 0.7134, 0.7598, 0.6821, 0.7739, 0.7588, 0.6978, 0.7578, 0.7773, 0.7764, 0.7271, 0.7935,\n        0.7847, 0.6904, 0.7266, 0.7412, 0.7451, 0.7490, 0.8120, 0.7456, 0.6812, 0.7363, 0.7368, 0.7627, 0.7725, 0.7549, 0.7944, 0.7627, 0.7305, 0.6260, 0.8086, 0.7808, 0.7471, 0.7393, 0.7681, 0.7690, 0.7817, 0.6724, 0.7495, 0.7651, 0.7397, 0.7773, 0.7710, 0.6709, 0.7344, 0.7324, 0.7368, 0.7319, 0.7368, 0.7095, 0.7354,\n        0.7358, 0.8184, 0.6841, 0.7139, 0.7295, 0.7134, 0.7705, 0.7769, 0.7803, 0.7559, 0.7529, 0.8052, 0.7876, 0.7891, 0.6924, 0.7646, 0.5928, 0.7290, 0.7256, 0.7583, 0.6699, 0.7822, 0.7754, 0.7651, 0.7686, 0.7007, 0.7319], dtype=torch.float16), 'perceiver_resampler.layers.2.0.norm1.bias': tensor([ 8.3466e-03,  8.0566e-03,  6.3416e-02,  8.8882e-03, -1.9592e-02,  3.3234e-02,  2.8320e-02, -1.4206e-02, -1.5930e-02, -2.9953e-02,  2.6062e-02,  8.7814e-03, -1.1963e-02,  3.6255e-02, -6.9733e-03, -2.6367e-02, -7.4387e-03,  1.1406e-02, -9.4070e-03,  2.6291e-02,  7.1907e-03,  3.7262e-02,  3.0396e-02, -2.4353e-02,\n         2.1118e-02,  1.0345e-02,  5.3368e-03,  5.7251e-02, -2.4582e-02,  3.4370e-03,  3.1311e-02,  4.6295e-02,  3.6163e-02,  6.4507e-03, -4.5609e-04,  1.6846e-02,  8.4305e-03, -1.0826e-02,  1.2947e-02, -7.8125e-03, -2.9694e-02,  1.3969e-02,  2.2675e-02, -3.4760e-02,  3.2349e-02, -3.1403e-02, -3.0579e-02,  8.2016e-03,\n         1.8295e-02,  2.9846e-02,  3.2745e-02, -2.6398e-02, -1.7536e-04,  1.0719e-02, -4.0207e-03, -8.0200e-02, -2.2293e-02, -3.8086e-02, -3.1525e-02,  3.1052e-02,  3.4943e-02, -3.0716e-02, -1.4404e-02, -1.7975e-02, -1.6861e-02, -1.0323e-02,  7.9956e-03,  3.8513e-02, -4.0863e-02,  7.1838e-02, -9.9335e-03,  1.6388e-02,\n         1.0223e-02, -1.3285e-03,  3.5896e-03,  2.4765e-02,  8.1787e-03, -2.4033e-02, -3.2410e-02,  5.4260e-02, -9.3002e-03,  2.6443e-02,  2.4246e-02, -3.0365e-02, -6.4011e-03,  1.6205e-02,  1.0048e-02,  1.9012e-02,  6.5994e-03, -7.8440e-04, -3.6896e-02, -1.1848e-02, -2.7283e-02, -3.9001e-02, -1.7792e-02,  3.0884e-02,\n        -1.5945e-02, -5.0659e-03, -3.3447e-02,  2.1164e-02, -2.6825e-02,  1.2787e-02,  5.7411e-03, -1.0513e-02, -9.4681e-03, -4.9782e-03,  2.7924e-02,  2.4841e-02, -1.3306e-02, -2.5772e-02, -2.8076e-02,  2.1652e-02, -1.6220e-02,  1.4969e-02,  4.6959e-03,  2.2705e-02, -1.5106e-02,  2.2385e-02,  8.9645e-03, -1.2484e-03,\n        -3.9368e-02,  1.7288e-02,  2.0691e-02,  1.5312e-02, -2.5439e-04, -2.1652e-02, -1.5961e-02, -4.8981e-02,  2.6207e-03, -1.7975e-02, -1.8555e-02,  5.7037e-02,  2.9160e-02,  2.2995e-02,  3.3813e-02, -3.0319e-02,  4.6844e-03,  4.3640e-02, -3.9787e-03, -3.0716e-02, -2.2446e-02, -2.9030e-03,  4.2725e-03, -3.1433e-02,\n        -3.2318e-02,  1.2497e-02, -2.0809e-03,  2.0493e-02, -3.2501e-02,  3.5715e-04, -3.0121e-02,  4.6326e-02,  1.4221e-02, -6.4697e-03,  2.6611e-02, -3.4180e-02,  1.7502e-02,  3.2410e-02, -3.4912e-02,  6.6406e-02,  3.3417e-02, -2.3575e-02,  2.7634e-02, -5.3711e-02,  5.5145e-02, -2.8778e-02, -8.0795e-03, -1.0101e-02,\n         2.9022e-02,  1.9180e-02, -6.1035e-03, -5.2551e-02,  1.8753e-02, -1.5915e-02,  5.6686e-03, -8.8654e-03, -4.8859e-02, -1.7822e-02,  4.7882e-02,  3.3875e-02, -2.4048e-02,  1.2276e-02,  5.1346e-03,  2.5085e-02, -1.6861e-02,  7.4425e-03, -2.3108e-01, -4.5593e-02, -5.9906e-02,  1.1986e-02, -1.0309e-03,  2.5528e-02,\n        -2.5192e-02, -3.5034e-02, -3.1082e-02, -3.1662e-04, -4.8256e-03, -1.4526e-02, -4.8828e-02, -2.1076e-03, -2.6657e-02,  2.5681e-02, -1.3710e-02,  7.5722e-03, -2.4872e-03, -2.7847e-03,  1.1463e-03,  3.5095e-02,  3.9177e-03, -5.9242e-03, -7.3730e-02,  5.3291e-03, -1.0358e-01, -4.3762e-02,  1.7624e-02,  3.4424e-02,\n        -1.3603e-02, -3.6011e-02, -3.2074e-02,  1.9867e-02, -1.1787e-02,  1.0864e-02,  2.4216e-02,  2.6672e-02, -1.1055e-02, -2.7756e-02,  2.5421e-02,  8.8806e-03,  2.2446e-02,  1.8387e-02,  2.6836e-03,  3.1281e-02,  1.2314e-02,  5.3740e-04,  9.2010e-03, -7.6599e-03, -1.2121e-03,  8.5068e-03,  2.6413e-02,  2.0370e-02,\n         1.4908e-02,  4.6921e-03,  9.4910e-03,  2.4399e-02, -2.5406e-02, -1.7075e-02, -9.1267e-04, -3.0575e-03,  6.2752e-03,  2.2186e-02,  1.3329e-02, -5.4932e-02,  1.6220e-02, -1.1635e-04,  1.3794e-02, -2.4681e-03, -4.0924e-02,  3.5591e-03, -2.1591e-02,  1.0590e-02,  4.2572e-02, -9.5978e-03, -1.2413e-02, -1.4175e-02,\n         1.8341e-02,  6.0730e-03, -3.7611e-05,  3.3569e-02,  1.3145e-02, -1.4305e-02,  2.4414e-02,  2.1378e-02,  4.2847e-02,  5.4138e-02,  1.7105e-02,  9.6970e-03, -3.6682e-02, -2.1469e-02,  5.8594e-02,  2.7359e-02,  6.7978e-03,  3.8483e-02, -2.9755e-02, -1.4008e-02, -9.9716e-03, -2.4155e-02,  2.4963e-02, -2.9648e-02,\n         4.8370e-03,  3.6049e-03,  4.6021e-02,  2.3499e-03,  1.1368e-02,  2.1515e-02,  6.7787e-03,  2.2552e-02,  2.5314e-02,  1.4420e-02,  2.2049e-02,  9.5596e-03,  3.7598e-02, -7.4844e-03, -2.5574e-02,  5.0316e-03,  1.5427e-02, -3.8605e-02, -1.1978e-02, -2.3102e-02,  2.8961e-02, -5.4657e-02, -3.2623e-02, -8.5526e-03,\n        -1.6617e-02,  1.2276e-02,  3.3386e-02,  3.7384e-02,  1.9211e-02, -1.3924e-02, -2.4033e-02, -1.3916e-02, -1.3405e-02,  4.3144e-03,  5.4321e-03, -2.5818e-02, -1.8112e-02, -1.4544e-03,  1.6541e-02,  1.0361e-02, -1.4748e-02,  1.5511e-02, -1.1978e-02,  4.6173e-02, -2.4475e-02,  1.6861e-02,  3.9093e-02,  1.0841e-02,\n         2.4811e-02, -2.7145e-02,  8.6441e-03,  2.9236e-02, -4.0588e-02,  3.8879e-02,  3.7689e-02, -4.1382e-02, -1.8044e-03, -3.8757e-03,  1.9043e-02,  1.1871e-02, -1.4029e-03,  4.8866e-03,  4.1504e-03,  3.3936e-02, -5.0888e-03,  5.2399e-02,  1.8753e-02,  3.4668e-02,  3.9368e-02, -5.5176e-02, -2.8629e-03,  2.6550e-02,\n        -1.9669e-02, -1.3290e-02,  9.1982e-04, -2.5040e-02,  4.2206e-02,  4.8187e-02,  5.4810e-02, -5.5790e-04,  1.2825e-02,  2.1622e-02, -2.5345e-02,  1.9302e-02,  1.1169e-02,  1.1452e-02, -3.8483e-02,  1.9318e-02, -9.1705e-03,  8.1711e-03,  2.0538e-02,  4.1138e-02, -3.8605e-02, -6.8207e-03,  5.0497e-04, -1.8936e-02,\n        -1.7288e-02,  5.9357e-03,  3.4454e-02,  1.9287e-02,  1.3237e-02,  3.8361e-02, -1.4381e-03, -2.3499e-02,  3.3386e-02,  9.8953e-03, -1.3931e-02, -2.1378e-02,  4.0985e-02, -1.6556e-02,  7.1068e-03,  2.6733e-02, -1.2932e-02,  3.4027e-02, -4.1161e-03,  4.6425e-03, -6.5880e-03,  2.8183e-02, -1.7471e-02,  1.3611e-02,\n         1.2560e-03,  3.5400e-02,  6.1218e-02, -4.3549e-02,  6.8207e-03, -1.2001e-02, -3.0670e-02, -6.5247e-02,  5.3192e-02, -6.2294e-03,  4.8004e-02,  4.1077e-02, -2.1133e-02,  4.8566e-04,  2.5742e-02,  1.6220e-02,  4.8462e-02, -2.1515e-02, -2.7420e-02, -2.1378e-02,  2.0950e-02, -6.1584e-02,  3.5896e-03,  7.5226e-03,\n         2.0523e-02, -2.3270e-02,  2.5513e-02,  9.9411e-03, -2.4002e-02, -7.7019e-03,  2.1347e-02,  3.8055e-02, -5.3596e-03,  3.6865e-02,  3.7659e-02, -4.1748e-02, -3.0167e-02, -4.7058e-02,  1.7380e-02,  1.4168e-02, -3.2043e-02,  3.6682e-02, -4.0863e-02,  2.7054e-02,  2.2537e-02,  1.2482e-02,  2.0370e-02, -2.6169e-02,\n        -1.1101e-02, -3.9787e-03, -7.1594e-02,  3.8147e-02, -3.0869e-02,  2.2293e-02,  4.7546e-02, -8.2642e-02, -1.0109e-02, -5.8556e-03,  1.4046e-02, -3.7598e-02,  1.5945e-02, -2.6901e-02,  7.1289e-02, -3.0579e-02,  2.2491e-02, -1.2840e-02,  2.3514e-02,  6.3354e-02,  3.8357e-03,  3.1464e-02, -2.8992e-03,  5.5359e-02,\n        -1.7761e-02, -5.7259e-03,  1.9073e-02, -3.0994e-03, -2.6749e-02, -1.0178e-02, -3.0457e-02,  3.1067e-02, -1.8600e-02, -2.4052e-03, -5.5008e-03,  1.5249e-03,  6.6528e-03,  2.7496e-02, -1.1757e-02,  1.0155e-02,  6.5002e-03, -2.5223e-02, -2.0172e-02, -3.9459e-02,  4.4525e-02,  4.4922e-02,  7.2441e-03,  3.6469e-02,\n        -1.5411e-02,  5.7068e-03, -1.7563e-02,  6.3782e-03,  4.7150e-02,  6.1798e-03, -3.9734e-02,  1.8251e-04, -9.7733e-03,  1.2550e-02,  3.4058e-02, -1.3176e-02, -2.1133e-02, -2.4277e-02,  1.7532e-02, -5.9853e-03, -1.2009e-02, -3.9246e-02, -9.3994e-03, -1.8600e-02, -4.0009e-02, -8.7662e-03,  3.5461e-02,  2.5436e-02,\n        -5.9570e-02,  2.4857e-02,  4.4800e-02, -7.0751e-05, -1.3306e-02, -1.4915e-02,  7.1831e-03,  3.0960e-02, -2.2186e-02, -1.0506e-02,  4.7112e-03,  5.0995e-02,  4.2023e-02,  9.8572e-03,  2.6962e-02,  1.5732e-02, -1.0881e-03, -3.5629e-03,  1.1177e-02, -2.9335e-03,  1.5388e-02,  1.7792e-02, -2.4109e-02, -4.4212e-03,\n        -7.4005e-03, -2.3178e-02,  2.8076e-02, -3.5706e-03,  3.7140e-02,  1.4664e-02, -4.0131e-02, -1.2390e-02,  2.8610e-02,  3.4332e-02, -1.4603e-02, -1.9241e-02,  2.1011e-02,  4.4975e-03, -3.9398e-02, -1.1864e-02,  5.8136e-03, -1.4305e-02,  1.9501e-02,  2.5925e-02,  3.4912e-02, -1.1206e-01,  1.5478e-03,  5.5939e-02,\n        -9.2392e-03,  9.3842e-03, -4.8737e-02,  9.7885e-03, -9.1782e-03, -2.5692e-03,  2.4689e-02, -5.1003e-03, -2.5574e-02, -2.6718e-02,  2.3575e-03, -2.1759e-02, -1.1162e-02,  4.5837e-02,  4.4220e-02,  2.7191e-02,  2.4887e-02, -3.2379e-02, -2.4323e-02,  1.0574e-02,  3.2578e-03,  1.5137e-02,  2.7008e-03,  1.5793e-02,\n        -1.1902e-02,  5.1025e-02, -4.6417e-02, -5.4810e-02,  2.8687e-02, -3.6201e-03, -2.2186e-02, -1.2970e-02,  2.8687e-02, -1.5213e-02, -1.1963e-02,  1.3168e-02,  1.5869e-02, -2.6031e-02,  3.2196e-02,  1.2794e-02, -1.5099e-02, -2.0020e-02,  2.6978e-02,  5.0049e-03, -6.6948e-03,  3.3894e-03,  9.3079e-03,  3.7384e-02,\n        -3.6087e-03, -4.7546e-02,  6.0760e-02, -8.7662e-03, -9.2621e-03,  1.8253e-03, -1.9287e-02, -1.1765e-02, -2.4780e-02, -3.7041e-03,  1.0574e-02,  1.6037e-02,  9.5901e-03,  2.0966e-02,  3.4729e-02,  1.0170e-02,  6.4888e-03,  4.7379e-03,  1.7639e-02, -3.1342e-02, -5.7861e-02,  4.2633e-02,  5.6953e-03,  5.6000e-02,\n        -3.5278e-02, -3.7872e-02,  1.3344e-02, -1.9806e-02, -2.8351e-02,  2.4548e-03,  3.8483e-02,  5.3741e-02, -7.0763e-03, -4.6806e-03, -2.9755e-02,  1.4786e-02, -4.5898e-02, -1.5747e-02, -1.5869e-02, -7.9651e-03,  1.0681e-02,  2.1805e-02,  2.1027e-02,  7.4043e-03, -1.7136e-02,  5.3558e-02,  4.5593e-02,  2.1896e-02,\n        -8.8263e-04,  5.8105e-02,  1.0834e-02,  3.6469e-02,  1.8082e-02, -2.0218e-02,  4.2450e-02, -4.8828e-02,  3.5858e-02,  3.6133e-02, -9.8419e-03,  1.6113e-02,  3.9856e-02, -1.7120e-02,  1.5306e-03, -1.8951e-02, -6.3232e-02,  9.4681e-03,  1.2489e-02,  4.3678e-03, -6.7863e-03, -2.6779e-02,  3.6133e-02,  1.8951e-02,\n        -4.6515e-04,  1.0712e-02, -1.1665e-02, -2.7130e-02,  4.1382e-02, -3.0884e-02, -2.9449e-02, -6.1493e-03, -2.6001e-02,  4.8920e-02, -8.5449e-03,  6.5193e-03,  1.2077e-02, -3.1700e-03, -1.1024e-02, -5.4131e-03,  7.0953e-03, -1.9760e-02,  2.3079e-03,  2.1347e-02, -6.3896e-03,  1.1932e-02, -6.4087e-03,  8.8135e-02,\n         1.7929e-02,  1.9638e-02,  2.9312e-02,  2.7878e-02,  1.9165e-02,  1.7929e-02,  1.3214e-02,  8.0017e-02,  1.6403e-02, -9.6664e-03,  2.5101e-02,  1.0231e-02, -9.0637e-03,  3.9856e-02,  6.1920e-02, -3.2291e-03, -2.8305e-02, -3.1281e-02, -5.0697e-03,  4.0588e-02,  3.0701e-02, -4.0131e-03, -3.7048e-02, -1.7426e-02,\n         2.3315e-02,  1.0300e-02, -3.2898e-02, -1.6060e-03, -3.7201e-02, -3.6285e-02, -7.4921e-03, -1.6861e-03,  2.0554e-02, -4.0436e-02,  2.9556e-02,  6.8115e-02, -3.4546e-02, -1.3757e-01,  2.2675e-02,  2.1393e-02,  3.5370e-02, -4.9255e-02, -5.2063e-02,  1.6281e-02, -4.5654e-02, -5.0011e-03,  4.6692e-02,  5.9652e-04],\n       dtype=torch.float16), 'perceiver_resampler.layers.2.0.norm2.weight': tensor([0.5522, 0.6113, 0.6685, 0.5625, 0.5713, 0.6206, 0.6377, 0.6030, 0.5776, 0.5967, 0.6030, 0.6113, 0.6392, 0.5322, 0.5591, 0.5679, 0.6284, 0.5757, 0.6606, 0.6426, 0.5874, 0.6064, 0.5732, 0.5269, 0.5347, 0.6138, 0.6084, 0.6265, 0.6382, 0.6406, 0.6030, 0.5513, 0.6343, 0.6030, 0.5767, 0.6494, 0.5674, 0.6504, 0.6431,\n        0.6284, 0.6289, 0.5659, 0.6436, 0.6055, 0.5986, 0.5581, 0.5928, 0.5508, 0.6079, 0.5908, 0.6289, 0.5947, 0.5962, 0.6846, 0.5635, 0.6763, 0.6289, 0.6045, 0.6196, 0.5811, 0.5942, 0.6172, 0.5908, 0.6323, 0.6152, 0.5513, 0.6172, 0.6016, 0.6709, 0.6191, 0.5674, 0.6099, 0.6201, 0.6392, 0.6318, 0.6172, 0.6328, 0.5151,\n        0.5396, 0.6201, 0.6177, 0.5713, 0.5942, 0.5977, 0.6182, 0.6118, 0.6479, 0.6001, 0.5591, 0.5034, 0.6118, 0.5815, 0.6182, 0.6162, 0.5977, 0.6357, 0.5791, 0.6489, 0.6235, 0.6094, 0.6357, 0.5820, 0.6440, 0.5459, 0.6069, 0.6270, 0.5820, 0.6260, 0.5693, 0.6182, 0.5942, 0.5693, 0.6753, 0.5845, 0.6353, 0.6577, 0.5757,\n        0.6392, 0.6187, 0.6118, 0.5801, 0.6025, 0.6382, 0.6245, 0.6060, 0.6240, 0.6226, 0.6250, 0.5688, 0.6421, 0.6094, 0.5547, 0.6040, 0.6309, 0.5742, 0.6665, 0.6074, 0.5942, 0.6094, 0.6030, 0.6631, 0.6143, 0.6265, 0.5586, 0.6377, 0.6079, 0.6514, 0.5947, 0.6230, 0.6064, 0.5908, 0.5952, 0.6113, 0.5786, 0.5674, 0.5684,\n        0.6113, 0.6152, 0.5552, 0.6714, 0.6523, 0.5728, 0.6753, 0.5396, 0.6025, 0.6138, 0.6055, 0.5986, 0.6094, 0.6187, 0.6440, 0.6235, 0.5737, 0.6089, 0.5713, 0.5078, 0.6216, 0.5864, 0.6572, 0.5659, 0.5942, 0.6035, 0.5215, 0.5591, 0.6401, 0.5957, 0.5845, 0.5747, 0.6025, 0.6240, 0.5913, 0.6147, 0.6035, 0.6802, 0.6113,\n        0.6426, 0.6001, 0.6118, 0.6504, 0.6099, 0.5791, 0.6646, 0.6406, 0.6309, 0.6006, 0.6123, 0.6260, 0.5752, 0.6392, 0.6060, 0.5859, 0.6304, 0.6104, 0.6128, 0.5981, 0.6030, 0.5645, 0.5923, 0.6118, 0.5259, 0.6216, 0.6279, 0.6040, 0.5952, 0.5542, 0.5957, 0.5625, 0.6133, 0.5972, 0.6621, 0.6147, 0.5864, 0.5327, 0.5947,\n        0.6426, 0.5742, 0.6709, 0.5962, 0.6309, 0.5596, 0.6460, 0.5728, 0.6011, 0.5400, 0.6318, 0.5747, 0.6436, 0.6221, 0.6143, 0.5938, 0.6079, 0.5361, 0.6343, 0.6362, 0.5508, 0.6167, 0.6489, 0.5786, 0.6187, 0.5923, 0.6445, 0.6045, 0.6440, 0.6655, 0.6533, 0.5674, 0.6367, 0.6079, 0.6553, 0.5947, 0.6172, 0.5767, 0.5752,\n        0.6655, 0.5674, 0.6333, 0.6064, 0.5796, 0.6162, 0.6592, 0.6182, 0.4844, 0.5859, 0.5972, 0.6460, 0.6191, 0.5430, 0.6299, 0.5796, 0.6357, 0.5679, 0.5972, 0.6294, 0.5981, 0.6772, 0.5693, 0.6040, 0.6279, 0.6157, 0.5898, 0.6621, 0.5942, 0.5918, 0.5640, 0.6689, 0.5659, 0.6572, 0.6021, 0.6250, 0.5654, 0.6118, 0.6167,\n        0.5908, 0.6704, 0.5669, 0.5508, 0.6064, 0.6567, 0.5815, 0.5659, 0.6802, 0.5488, 0.5986, 0.5903, 0.6899, 0.5293, 0.6084, 0.5791, 0.6172, 0.6328, 0.6108, 0.5522, 0.5830, 0.6470, 0.6260, 0.5938, 0.6128, 0.5825, 0.5542, 0.6162, 0.5981, 0.5928, 0.6714, 0.6279, 0.5918, 0.5645, 0.6274, 0.6025, 0.6509, 0.5654, 0.6572,\n        0.5425, 0.5762, 0.6289, 0.5649, 0.6602, 0.6318, 0.5825, 0.5791, 0.5913, 0.6494, 0.6230, 0.5781, 0.6016, 0.5967, 0.5977, 0.5908, 0.6265, 0.6201, 0.6201, 0.6362, 0.6079, 0.6685, 0.5996, 0.6221, 0.6113, 0.6050, 0.6289, 0.5737, 0.6025, 0.6025, 0.6089, 0.5845, 0.6357, 0.6025, 0.6064, 0.5962, 0.5776, 0.5781, 0.5762,\n        0.5952, 0.5601, 0.6528, 0.6270, 0.5771, 0.6484, 0.5820, 0.5962, 0.6069, 0.6265, 0.6191, 0.5317, 0.5894, 0.6323, 0.6074, 0.6118, 0.6001, 0.6426, 0.6123, 0.5718, 0.6279, 0.5767, 0.5957, 0.5327, 0.5298, 0.6455, 0.5488, 0.6250, 0.6289, 0.6177, 0.6694, 0.6060, 0.6211, 0.5532, 0.6919, 0.5601, 0.5723, 0.6475, 0.6030,\n        0.6362, 0.5986, 0.5913, 0.5601, 0.5854, 0.6582, 0.6138, 0.5991, 0.5933, 0.6562, 0.6582, 0.5181, 0.5952, 0.5474, 0.5884, 0.5781, 0.6230, 0.5786, 0.6602, 0.5830, 0.6050, 0.6060, 0.5659, 0.5615, 0.6519, 0.5767, 0.5132, 0.6460, 0.5728, 0.6084, 0.5654, 0.6440, 0.6284, 0.5801, 0.5688, 0.6069, 0.6060, 0.5586, 0.6523,\n        0.6182, 0.6382, 0.6196, 0.6011, 0.6479, 0.6323, 0.6040, 0.5811, 0.6006, 0.6470, 0.5791, 0.6548, 0.6030, 0.6270, 0.6665, 0.6411, 0.5645, 0.5801, 0.5669, 0.5498, 0.5767, 0.5840, 0.5752, 0.6343, 0.5674, 0.5679, 0.5547, 0.5664, 0.6763, 0.6333, 0.5981, 0.5757, 0.5522, 0.5996, 0.5835, 0.6104, 0.6167, 0.5659, 0.5576,\n        0.6479, 0.6802, 0.6431, 0.6289, 0.6465, 0.5776, 0.6187, 0.5400, 0.6406, 0.6152, 0.5713, 0.6211, 0.6191, 0.5688, 0.6719, 0.6250, 0.6060, 0.6191, 0.6367, 0.5142, 0.5562, 0.6211, 0.6040, 0.6323, 0.5269, 0.6255, 0.6108, 0.5967, 0.6147, 0.6250, 0.5781, 0.6167, 0.5518, 0.6162, 0.6123, 0.6548, 0.6074, 0.5239, 0.6519,\n        0.6050, 0.6011, 0.6436, 0.6221, 0.6162, 0.5967, 0.6211, 0.6646, 0.5825, 0.6167, 0.6147, 0.5879, 0.5752, 0.6367, 0.5542, 0.5811, 0.6479, 0.6250, 0.6191, 0.6328, 0.5894, 0.6211, 0.6318, 0.6060, 0.5972, 0.5508, 0.6216, 0.6216, 0.5938, 0.5400, 0.6211, 0.5278, 0.6240, 0.6846, 0.5771, 0.6289, 0.6040, 0.6401, 0.5942,\n        0.5454, 0.6309, 0.6152, 0.6157, 0.6445, 0.5918, 0.5967, 0.5444, 0.5747, 0.6187, 0.6099, 0.5781, 0.6294, 0.5825, 0.6641, 0.6289, 0.6372, 0.6089, 0.5601, 0.6445, 0.5991, 0.5913, 0.5879, 0.5957, 0.6626, 0.5820, 0.6509, 0.6030, 0.5732, 0.5703, 0.6021, 0.5435, 0.5791, 0.6172, 0.5996, 0.6504, 0.5566, 0.5884, 0.5869,\n        0.5757, 0.6348, 0.5630, 0.6230, 0.5742, 0.6606, 0.6157, 0.6289, 0.6030, 0.5962, 0.6772, 0.6050, 0.6025, 0.6113, 0.5312, 0.5981, 0.6440, 0.6074, 0.6841, 0.6201, 0.6499, 0.5830, 0.6543, 0.6348, 0.6616, 0.6777, 0.5317, 0.6079, 0.5693, 0.6167, 0.6660, 0.6240, 0.6372, 0.6021, 0.6416, 0.5981, 0.6240, 0.6289, 0.6367,\n        0.6465, 0.6245, 0.6577, 0.5854, 0.6416, 0.6187, 0.5962, 0.6338, 0.5718, 0.6055, 0.5923, 0.6396, 0.6138, 0.5933, 0.5850, 0.6426, 0.6118, 0.5986, 0.6694, 0.6284, 0.5815, 0.5366, 0.5791, 0.6177, 0.6172, 0.6050, 0.6616, 0.5146, 0.6201, 0.6162, 0.5674, 0.5840, 0.6338, 0.6182, 0.6294, 0.6143, 0.5874, 0.6025, 0.6099,\n        0.6128, 0.5962, 0.6270, 0.6401, 0.6191, 0.5903, 0.5576, 0.6025, 0.6421, 0.6401, 0.5586, 0.6152, 0.6089, 0.6265, 0.6050, 0.6172, 0.5508, 0.5332, 0.6338, 0.6577, 0.5859, 0.5835, 0.6060, 0.6104, 0.5659, 0.6489, 0.5747, 0.6187, 0.6323, 0.5898, 0.5796, 0.6279, 0.5913, 0.6650, 0.6333, 0.5967, 0.6016, 0.5884, 0.6245,\n        0.5630, 0.6069, 0.6699, 0.6104, 0.5693, 0.6191, 0.6040, 0.5957, 0.6089, 0.6118, 0.6045, 0.6040, 0.6265, 0.5845, 0.6182, 0.5371, 0.5996, 0.6201, 0.6211, 0.6216, 0.6138, 0.5845, 0.6294, 0.6211, 0.5967, 0.5693, 0.6152], dtype=torch.float16), 'perceiver_resampler.layers.2.0.norm2.bias': tensor([-4.0009e-02, -1.4091e-02, -1.5465e-02, -1.0492e-01, -4.6173e-02,  2.5192e-02, -2.0096e-02,  2.9190e-02,  4.5197e-02, -5.4962e-02,  4.9927e-02, -9.3567e-02, -1.2611e-02, -1.1743e-01,  9.5032e-02,  2.4185e-02, -9.3918e-03,  3.6041e-02, -2.3026e-02, -4.6265e-02, -8.4473e-02, -5.4054e-03,  3.7022e-03,  9.9548e-02,\n        -8.8623e-02, -1.6632e-02,  6.1310e-02, -4.4220e-02,  2.3163e-02,  2.8152e-02,  4.8981e-02,  1.0291e-01, -4.3304e-02,  5.7739e-02,  8.1665e-02,  1.2901e-02,  5.5939e-02,  3.3966e-02,  4.9362e-03, -1.4450e-02,  6.5575e-03,  8.2886e-02, -3.3356e-02, -6.8703e-03, -1.2238e-02, -3.4576e-02, -3.2997e-03,  8.2886e-02,\n         6.7101e-03,  5.2071e-03,  1.3702e-02,  4.2847e-02,  3.2898e-02,  3.3783e-02,  5.0293e-02, -1.3885e-02,  8.6517e-03,  6.3965e-02, -5.1483e-02,  9.0637e-02, -1.2311e-01,  2.1439e-02,  2.2736e-02, -2.2598e-02, -2.7664e-02,  4.1931e-02,  6.1218e-02,  1.1847e-01,  1.4191e-02,  5.4291e-02, -6.6895e-02, -4.6509e-02,\n         1.0033e-02, -7.5073e-02, -3.8361e-02, -6.3286e-03, -5.5664e-02, -1.3501e-01,  1.6394e-01,  1.9226e-02,  3.0060e-02,  1.9093e-03,  4.4739e-02, -2.7161e-02,  1.0696e-02,  9.6863e-02, -3.1433e-03, -8.4534e-02, -1.0907e-01, -1.8005e-01,  8.7891e-02, -6.8054e-02, -1.2093e-02, -3.2684e-02, -2.6337e-02, -6.0181e-02,\n        -5.8411e-02, -6.1989e-04, -2.6047e-02,  5.0812e-02,  6.3416e-02, -6.5918e-03,  3.6346e-02, -1.4612e-01,  4.7546e-02, -1.7471e-02,  1.4229e-02, -4.2572e-02,  9.3140e-02,  4.6051e-02, -6.8359e-02,  3.5065e-02, -4.1077e-02, -1.0913e-01,  4.1321e-02,  2.6688e-02,  9.3018e-02, -5.7281e-02, -1.9516e-02, -2.9358e-02,\n         5.3215e-03, -5.4688e-02,  1.3458e-02,  4.2305e-03, -3.7567e-02,  5.6488e-02, -2.0874e-02, -5.3284e-02,  6.4453e-02, -5.2460e-02, -1.6617e-02,  1.3428e-01, -9.0179e-03,  3.4729e-02, -4.9561e-02,  9.8705e-05, -8.1238e-02,  9.1309e-02, -6.3110e-02,  6.1920e-02, -2.6302e-03,  5.1727e-03,  2.7832e-02,  1.8762e-01,\n        -5.7861e-02, -7.8552e-02,  8.0948e-03, -2.7695e-02,  4.9133e-02,  1.3817e-02,  4.7913e-03,  5.5695e-02, -4.8981e-02, -7.0862e-02, -3.7079e-02, -9.1980e-02,  8.7769e-02,  1.6083e-02, -2.6062e-02, -4.8676e-02,  3.6194e-02, -6.2805e-02, -3.2745e-02, -5.6885e-02,  5.1193e-03, -7.2815e-02, -2.5375e-02, -4.0466e-02,\n         1.2909e-02,  2.1057e-02,  1.1627e-02,  3.3936e-02, -6.8855e-04, -7.3576e-04, -8.0750e-02, -1.3745e-01, -3.1769e-02,  7.6843e-02,  2.7618e-02, -8.2275e-02,  7.0068e-02,  6.0913e-02,  1.2476e-01,  4.7821e-02,  5.1331e-02, -3.7018e-02, -5.4741e-03, -7.9712e-02, -1.4091e-02,  3.3478e-02, -3.6896e-02,  6.5674e-02,\n         7.8613e-02, -1.4153e-02, -5.0323e-02, -1.4572e-02,  1.2537e-01, -1.6083e-02,  4.5380e-02, -6.0333e-02,  1.0809e-01,  1.5778e-02, -2.4826e-02,  4.3335e-02,  9.4543e-02,  1.4374e-02, -4.3427e-02, -2.1790e-02,  7.3730e-02,  2.7115e-02,  5.3192e-02, -3.9917e-02, -5.6824e-02, -3.8483e-02,  1.2311e-01,  4.3579e-02,\n        -9.5749e-03, -6.5979e-02,  6.9656e-03,  1.2610e-01,  3.5801e-03, -4.9530e-02, -3.5492e-02,  1.8127e-02, -4.1077e-02,  5.4779e-02,  1.0040e-01,  5.8868e-02, -4.6295e-02, -1.6994e-03, -4.1229e-02,  9.9121e-02,  7.7393e-02,  5.4504e-02, -2.3560e-02,  5.2795e-02, -1.6769e-02, -8.2581e-02,  7.8430e-02,  4.4281e-02,\n        -3.0243e-02,  7.2327e-02,  5.1270e-02,  1.3354e-01, -5.6915e-02,  1.6769e-02,  2.3712e-02,  7.3486e-02, -3.5858e-02,  1.0126e-01,  5.3650e-02,  8.4412e-02,  7.0496e-02,  4.7791e-02,  9.5642e-02, -2.5604e-02, -1.7059e-02,  8.9417e-02,  8.2397e-02,  1.4374e-02, -3.9948e-02,  1.5881e-01,  5.9967e-03, -4.0100e-02,\n        -2.1317e-02, -5.3986e-02,  2.9907e-02,  2.8076e-02, -2.8519e-02,  2.7008e-02,  4.2389e-02,  1.0779e-01, -7.2083e-02, -3.1372e-02,  1.1206e-01,  2.7599e-03,  7.5684e-02,  2.3529e-02,  5.1819e-02, -1.0315e-02,  2.7847e-02, -1.4819e-01,  9.4604e-02, -8.4656e-02, -4.5807e-02,  1.1971e-02, -7.5012e-02,  1.3474e-02,\n         5.0934e-02,  1.6037e-02, -5.5756e-02,  4.2053e-02, -3.9429e-02, -5.0018e-02, -2.7176e-02,  5.8350e-02, -7.8308e-02,  5.6946e-02, -2.7985e-02, -5.8708e-03,  3.6041e-02, -1.9363e-02, -2.5009e-02, -1.8005e-01,  2.1286e-02, -4.5990e-02, -4.1885e-03,  9.5703e-02,  3.5114e-03, -9.4238e-02,  3.4760e-02, -8.7585e-02,\n        -2.3331e-02, -3.4485e-02,  7.8735e-02,  1.6980e-01, -2.4277e-02, -5.1117e-02, -1.4050e-01,  9.4299e-02,  2.3270e-02, -8.3679e-02, -5.0934e-02, -8.1848e-02, -8.4961e-02, -2.7649e-02,  5.4779e-02, -4.9530e-02, -2.5711e-02,  4.2938e-02,  1.2469e-01, -1.2384e-01,  9.8450e-02,  4.2908e-02, -2.8515e-03, -2.2369e-02,\n        -1.9897e-02,  4.0817e-03,  7.9773e-02, -3.8452e-02,  5.5267e-02, -4.9377e-02, -5.2338e-02,  3.2959e-02,  5.3741e-02,  8.4961e-02, -2.7299e-04,  2.9922e-02,  1.0080e-03,  2.3376e-02, -8.3084e-03, -1.7468e-01, -6.1890e-02, -4.4823e-03,  8.9294e-02, -1.2939e-02,  4.0253e-02, -4.5837e-02,  7.0618e-02, -3.0884e-02,\n        -2.3758e-02,  2.7908e-02,  1.5991e-02,  6.4148e-02, -2.4689e-02,  6.4148e-02,  5.3009e-02,  2.3972e-02,  1.0658e-02, -4.6997e-02, -5.4779e-02,  3.9703e-02, -4.2206e-02, -5.6305e-02, -3.8727e-02,  6.0059e-02, -9.3079e-02, -3.9246e-02, -2.2217e-02, -1.8082e-02, -5.0262e-02, -2.3560e-02, -7.6408e-03,  3.6041e-02,\n         9.8133e-04,  1.6190e-02, -3.9246e-02,  4.3549e-02,  6.1432e-02, -3.4363e-02,  1.5774e-03, -1.0040e-01, -8.9233e-02,  7.5264e-03,  1.0699e-01,  1.7578e-02, -5.6427e-02,  3.7109e-02,  2.1591e-03,  3.7506e-02,  4.7943e-02,  2.6413e-02,  5.1392e-02,  8.3069e-02, -1.4984e-02,  1.2856e-02, -2.8534e-02,  2.2217e-02,\n         2.5330e-02, -6.4880e-02, -4.0802e-02, -6.3477e-02,  1.1345e-02, -7.5317e-02, -1.4441e-01, -5.4810e-02, -1.5698e-01,  1.1902e-01,  4.2084e-02,  3.2562e-02,  1.2680e-02, -1.9363e-02, -2.7054e-02, -6.9153e-02,  1.5701e-02,  1.2219e-01, -3.1891e-02,  3.1891e-02, -6.2073e-02,  2.8885e-02, -1.1432e-01, -1.3390e-03,\n         5.4321e-02, -7.8613e-02, -4.8714e-03,  9.2041e-02, -1.5671e-02, -7.1899e-02,  6.3354e-02,  1.6861e-02,  1.5344e-01, -5.2429e-02, -3.3054e-03,  9.1309e-02,  2.0706e-02, -8.8120e-03, -8.8806e-02, -1.5808e-02,  7.8583e-03, -4.9835e-02,  7.0610e-03, -5.3284e-02,  4.2480e-02,  8.7662e-03,  4.4342e-02,  1.5674e-01,\n        -6.5384e-03,  1.2497e-02, -8.9798e-03,  9.3689e-02, -3.0746e-02, -3.9612e-02,  3.1769e-02,  3.1799e-02, -3.1204e-02, -5.6488e-02,  3.2623e-02, -1.8890e-02, -5.3589e-02,  1.8295e-02, -5.7739e-02, -1.0730e-01, -5.9052e-02, -7.2144e-02, -4.7150e-02, -1.9745e-02,  8.4961e-02,  7.7393e-02,  5.2490e-02, -4.1962e-02,\n         2.7740e-02,  1.7975e-02, -6.2012e-02,  2.9068e-03,  3.2135e-02, -7.0068e-02, -3.5278e-02,  3.9482e-03,  2.3712e-02, -2.3712e-02,  1.8585e-02,  6.2866e-02,  3.0930e-02, -7.2205e-02, -5.4779e-02,  7.0923e-02,  4.4617e-02,  5.8228e-02,  1.0901e-01,  8.3008e-02, -8.4045e-02,  4.8187e-02, -1.0254e-01,  8.7708e-02,\n        -3.8788e-02,  1.0352e-01, -6.7322e-02, -1.3031e-02,  9.4757e-03,  7.2876e-02, -6.0669e-02,  6.0883e-02,  2.5444e-03,  5.1331e-02,  9.2773e-02, -1.4824e-02,  3.7445e-02,  4.5776e-02, -2.6245e-02, -6.6406e-02,  8.1482e-02,  1.7380e-02,  1.4526e-01, -8.6121e-02, -1.1223e-02, -2.9266e-02, -1.8091e-01, -5.9082e-02,\n        -4.5837e-02, -4.1931e-02, -5.1086e-02, -1.8616e-01,  5.5603e-02,  3.0319e-02, -1.7197e-02, -1.0788e-02, -2.5726e-02,  7.9422e-03, -5.0354e-03,  9.2102e-02,  5.4199e-02, -1.9379e-02,  3.0746e-02,  2.6443e-02,  6.5125e-02,  7.9346e-02,  1.8158e-02,  3.8879e-02,  5.0934e-02,  7.4524e-02, -5.8823e-03, -4.7638e-02,\n         1.5998e-04,  4.5276e-04, -1.3878e-02, -1.2476e-01,  7.2571e-02, -2.8397e-02,  6.8848e-02,  3.0396e-02,  2.4124e-02, -1.3965e-01, -1.0544e-02, -1.4900e-02, -2.6978e-02, -2.6489e-02,  6.1768e-02,  2.7313e-03,  1.3222e-02,  7.4036e-02, -1.5869e-02, -4.8950e-02, -4.2633e-02,  7.1045e-02, -1.1578e-01, -1.6772e-01,\n         7.4219e-02,  7.4158e-02,  1.8723e-02,  1.3561e-03, -3.6407e-02, -2.8839e-02,  3.3844e-02,  6.3820e-03, -5.6854e-02, -4.1779e-02,  9.7961e-03, -1.8951e-02,  1.0358e-01, -3.9825e-02,  5.6152e-02, -7.0251e-02,  5.7617e-02, -6.8787e-02,  3.4424e-02, -3.0701e-02, -4.7729e-02, -1.5259e-02,  5.5939e-02, -3.3600e-02,\n         2.1698e-02, -2.0676e-02, -3.9581e-02,  1.1713e-01,  6.9031e-02,  8.3130e-02, -7.3242e-02,  1.4572e-02,  6.2141e-03,  3.9276e-02,  3.7994e-02, -4.4861e-02,  2.3972e-02, -8.0795e-03, -2.2522e-02, -1.5198e-02,  1.2589e-02,  6.5002e-02, -4.5959e-02, -1.6693e-02, -2.7725e-02, -1.3618e-02,  8.1787e-02,  6.5660e-04,\n         7.2632e-02, -5.5237e-02, -3.1891e-02, -6.6040e-02,  5.3314e-02, -8.5022e-02,  9.4681e-03, -2.1759e-02,  4.6234e-02, -5.7526e-02,  2.2614e-02,  4.4098e-03, -8.9905e-02,  7.7454e-02, -1.3843e-01, -5.2948e-02, -1.5511e-02, -2.2308e-02, -7.7286e-03, -1.5587e-02, -5.8044e-02,  2.3071e-02,  1.2604e-02,  3.4363e-02,\n         6.4850e-03, -4.2786e-02,  8.8135e-02,  6.2370e-03,  5.6915e-02, -7.4730e-03,  1.1147e-02,  3.0716e-02, -1.5732e-02, -3.7537e-02,  3.8177e-02, -8.8928e-02,  3.4760e-02,  2.4445e-02,  2.4063e-02, -6.9336e-02, -8.1726e-02, -2.8809e-02, -5.0903e-02,  3.7613e-03,  3.2257e-02,  7.2388e-02,  4.9774e-02,  4.8492e-02,\n        -2.1896e-03,  4.3854e-02, -3.6560e-02, -6.8542e-02,  9.4666e-02,  8.2703e-02, -5.6152e-02,  3.6530e-02, -9.8114e-03, -4.6997e-03, -1.7960e-02, -7.7881e-02,  6.0547e-02, -2.9007e-02, -1.3025e-01,  4.1901e-02, -6.7444e-02, -4.4312e-02,  8.3008e-03,  1.3138e-02,  2.6825e-02,  6.8298e-02,  2.3193e-02,  5.3741e-02,\n         1.7929e-02,  3.2623e-02, -1.1615e-01, -6.4819e-02,  8.7463e-02, -6.0303e-02,  2.4673e-02, -4.2145e-02,  9.2102e-02,  2.9205e-02, -6.1981e-02, -6.1798e-02,  2.9602e-02, -1.1047e-02, -2.0889e-02, -5.0385e-02,  4.0894e-02, -2.1835e-02, -4.3976e-02, -1.3374e-02, -5.8777e-02,  4.0466e-02, -1.4429e-01,  1.8774e-01,\n        -1.9516e-02,  1.0910e-02, -1.7853e-02, -3.3325e-02,  8.0505e-02,  4.6539e-02, -9.1980e-02,  7.8796e-02, -6.9092e-02,  8.0750e-02,  6.2103e-02, -7.8796e-02,  1.1877e-01,  1.3885e-02,  2.3315e-02,  1.8234e-02,  1.1086e-02, -1.2581e-02, -4.3732e-02, -8.5754e-02,  3.1143e-02,  1.5039e-01,  1.1772e-02,  5.8533e-02,\n         7.2266e-02,  4.5471e-02, -2.3819e-02,  6.7017e-02, -7.1106e-02, -1.5459e-03,  5.6091e-02, -4.5593e-02,  1.1017e-01,  3.4271e-02, -3.2928e-02, -3.9459e-02,  1.1926e-01, -1.0052e-01,  4.5319e-02,  4.9042e-02,  8.0322e-02,  1.7288e-02, -1.9119e-02, -5.5084e-02, -2.8000e-02,  3.9551e-02,  1.5991e-01, -5.4382e-02],\n       dtype=torch.float16), 'perceiver_resampler.layers.2.0.to_q.weight': tensor([[ 0.0217,  0.0137, -0.0125,  ...,  0.0424, -0.0128,  0.0031],\n        [ 0.0041,  0.0040,  0.0129,  ..., -0.0088, -0.0063,  0.0078],\n        [-0.0030, -0.0035, -0.0001,  ..., -0.0232,  0.0200, -0.0351],\n        ...,\n        [-0.0147, -0.0140, -0.0330,  ...,  0.0146,  0.0033,  0.0205],\n        [-0.0128,  0.0254,  0.0010,  ..., -0.0455, -0.0190,  0.0170],\n        [ 0.0066,  0.0154,  0.0076,  ..., -0.0394,  0.0031,  0.0238]], dtype=torch.float16), 'perceiver_resampler.layers.2.0.to_kv.weight': tensor([[ 0.0113, -0.0146, -0.0035,  ...,  0.0418, -0.0186, -0.0181],\n        [ 0.0133, -0.0096, -0.0021,  ..., -0.0115,  0.0052, -0.0010],\n        [ 0.0184, -0.0028, -0.0626,  ..., -0.0403,  0.0356,  0.0384],\n        ...,\n        [-0.0335, -0.0046,  0.0169,  ..., -0.0597,  0.0431,  0.0125],\n        [-0.0151,  0.0163,  0.0404,  ..., -0.0164, -0.0241, -0.0293],\n        [-0.0302,  0.0595, -0.0186,  ..., -0.0146, -0.0128,  0.0302]], dtype=torch.float16), 'perceiver_resampler.layers.2.0.to_out.weight': tensor([[ 0.0096, -0.0101, -0.0124,  ...,  0.0016,  0.0067, -0.0339],\n        [ 0.0197,  0.0172, -0.0244,  ...,  0.0006,  0.0232, -0.0168],\n        [-0.0040, -0.0419, -0.0266,  ..., -0.0014,  0.0219,  0.0247],\n        ...,\n        [-0.0225,  0.0254, -0.0050,  ...,  0.0626, -0.0133,  0.0148],\n        [-0.0476, -0.0088,  0.0788,  ...,  0.0168, -0.0053, -0.0501],\n        [-0.0184,  0.0003,  0.0027,  ...,  0.0190, -0.0260, -0.0013]], dtype=torch.float16), 'perceiver_resampler.layers.2.1.0.weight': tensor([0.7998, 0.8193, 0.8350, 0.8613, 0.7798, 0.8765, 0.8604, 0.8110, 0.8203, 0.8213, 0.9028, 0.9116, 0.8828, 0.7832, 0.8530, 0.7871, 0.8657, 0.7676, 0.7935, 0.8423, 0.8418, 0.7886, 0.7734, 0.8169, 0.8340, 0.9189, 0.7710, 0.8989, 0.8228, 0.8696, 0.7720, 0.7402, 0.8872, 0.9268, 0.8013, 0.8135, 0.7573, 0.8325, 0.8599,\n        0.8574, 0.8271, 0.7280, 0.8643, 0.8032, 0.8086, 0.7759, 0.8286, 0.9141, 0.8066, 0.8735, 0.8999, 0.8184, 0.8320, 0.8354, 0.7148, 0.8569, 0.8408, 0.8491, 0.8384, 0.8164, 0.8252, 0.8950, 0.8867, 0.8066, 0.8760, 0.8159, 0.7861, 0.8794, 0.8423, 0.9092, 0.7661, 0.8579, 0.8638, 0.8564, 0.8257, 0.7817, 0.8467, 0.8843,\n        0.8813, 0.8535, 0.8589, 0.7456, 0.8428, 0.7842, 0.8315, 0.8843, 0.7852, 0.8843, 0.9082, 0.8672, 0.9360, 0.7632, 0.8267, 0.8750, 0.8433, 0.9072, 0.7349, 0.8545, 0.8052, 0.7676, 0.8398, 0.7422, 0.8428, 0.9028, 0.7832, 0.8604, 0.8486, 0.9053, 0.9014, 0.8311, 0.7808, 0.8198, 0.8066, 0.7520, 0.8955, 0.8662, 0.8369,\n        0.8027, 0.9019, 0.8530, 0.8037, 0.8750, 0.8828, 0.8403, 0.7993, 0.8452, 0.7617, 0.8359, 0.8022, 0.9004, 0.8472, 0.8208, 0.8188, 0.8853, 0.8657, 0.7998, 0.8989, 0.8223, 0.7563, 0.8491, 0.8525, 0.7910, 0.8320, 0.7808, 0.9131, 0.8730, 0.7739, 0.7915, 0.8135, 0.8184, 0.8237, 0.8438, 0.9404, 0.8242, 0.8062, 0.8760,\n        0.8628, 0.8447, 0.7646, 0.8975, 0.8750, 0.7817, 0.8091, 0.7612, 0.8516, 0.8345, 0.8594, 0.8130, 0.8398, 0.8389, 0.8506, 0.8267, 0.8467, 0.8516, 0.8252, 0.9023, 0.7788, 0.8091, 0.8550, 0.9502, 0.7939, 0.8794, 0.8042, 0.8291, 0.7559, 0.9097, 0.7900, 0.7559, 0.8066, 0.8823, 0.8735, 0.8486, 0.8936, 0.8862, 0.8184,\n        0.8745, 0.8618, 0.8345, 0.8960, 0.8042, 0.7202, 0.7969, 0.8052, 0.8784, 0.8394, 0.8218, 0.9175, 0.7554, 0.8330, 0.8198, 0.8486, 0.7412, 0.8276, 0.8877, 0.7007, 0.8970, 0.8188, 0.7695, 0.8345, 0.8906, 0.7832, 0.8735, 0.9185, 0.8193, 0.8008, 0.8433, 0.9375, 0.8584, 0.7969, 0.7876, 0.8486, 0.8950, 0.8174, 0.8657,\n        0.8330, 0.7783, 0.7964, 0.8892, 0.9453, 0.7725, 0.7432, 0.8101, 0.7998, 0.7822, 0.8706, 0.8916, 0.8535, 0.7910, 0.8560, 0.9058, 0.7686, 0.7666, 0.8584, 0.8711, 0.8882, 0.8442, 0.8726, 0.8062, 0.8408, 0.8281, 0.9272, 0.8599, 0.8745, 0.8330, 0.8506, 0.6899, 0.8682, 0.7744, 0.7876, 0.8477, 0.8540, 0.8638, 0.8198,\n        0.8560, 0.9233, 0.8457, 0.9282, 0.8027, 0.8735, 0.8926, 0.8633, 0.8018, 0.9277, 0.9131, 0.8428, 0.8086, 0.6968, 0.8647, 0.8667, 0.8926, 0.8511, 0.8730, 0.8506, 0.8540, 0.7915, 0.9106, 0.8008, 0.8350, 0.8164, 0.8125, 0.8711, 0.7954, 0.8120, 0.7612, 0.8755, 0.7070, 0.7998, 0.8315, 0.8130, 0.8110, 0.8521, 0.7554,\n        0.8105, 0.7998, 0.9185, 0.8394, 0.8438, 0.8223, 0.8447, 0.8828, 0.9048, 0.8296, 0.8037, 0.8906, 0.9722, 0.7661, 0.8491, 0.8594, 0.8384, 0.8403, 0.9814, 0.8071, 0.8940, 0.8979, 0.8071, 0.8013, 0.8521, 0.8696, 0.8652, 0.8677, 0.8950, 0.8638, 0.8984, 0.8169, 0.8970, 0.8853, 0.8062, 0.7979, 0.8867, 0.7158, 0.8521,\n        0.7856, 0.9165, 0.8511, 0.8604, 0.9023, 0.8164, 0.8198, 0.8472, 0.8569, 0.8516, 0.8110, 0.7759, 0.8643, 0.8750, 0.7700, 0.8564, 0.8320, 0.8208, 0.8511, 0.8384, 0.8804, 0.8174, 0.8804, 0.7949, 0.8433, 0.8726, 0.9058, 0.7598, 0.9062, 0.8623, 0.8276, 0.8657, 0.8784, 0.8569, 0.9165, 0.8574, 0.8022, 0.8535, 0.8179,\n        0.8525, 0.8530, 0.8579, 0.8511, 0.8789, 0.8896, 0.8105, 0.8418, 0.7539, 0.8403, 0.8848, 0.8022, 0.8032, 0.8901, 0.8506, 0.8394, 0.8213, 0.8389, 0.8696, 0.8662, 0.8530, 0.7993, 0.8638, 0.7275, 0.7510, 0.8232, 0.8721, 0.8896, 0.8647, 0.8691, 0.9263, 0.8911, 0.8052, 0.8110, 0.7681, 0.8892, 0.7368, 0.9141, 0.8467,\n        0.8477, 0.7368, 0.8433, 0.7803, 0.8403, 0.8315, 0.8481, 0.7856, 0.8882, 0.7222, 0.8105, 0.9214, 0.8145, 0.7183, 0.8516, 0.8418, 0.8652, 0.8643, 0.8423, 0.7983, 0.8154, 0.8691, 0.8828, 0.8096, 0.7812, 0.8384, 0.8628, 0.8179, 0.7544, 0.8066, 0.8135, 0.8706, 0.8354, 0.7822, 0.8130, 0.7998, 0.7422, 0.7969, 0.8467,\n        0.8833, 0.8188, 0.8530, 0.7808, 0.8584, 0.8291, 0.7632, 0.7856, 0.8364, 0.8989, 0.8486, 0.7300, 0.8257, 0.8091, 0.8481, 0.8193, 0.7671, 0.7212, 0.8037, 0.8379, 0.7920, 0.8418, 0.8867, 0.8394, 0.7397, 0.7832, 0.7861, 0.8843, 0.9243, 0.7925, 0.9189, 0.7764, 0.7710, 0.8403, 0.8452, 0.7441, 0.7593, 0.8726, 0.8335,\n        0.8555, 0.8379, 0.8276, 0.8750, 0.8589, 0.7656, 0.8276, 0.8848, 0.8726, 0.9043, 0.7993, 0.8306, 0.8164, 0.8335, 0.8730, 0.7129, 0.8628, 0.6641, 0.8296, 0.9272, 0.7822, 0.8149, 0.9082, 0.8647, 0.7495, 0.8545, 0.8228, 0.7856, 0.8296, 0.8281, 0.7705, 0.8545, 0.8818, 0.8853, 0.8374, 0.8457, 0.8364, 0.7314, 0.8730,\n        0.8262, 0.8315, 0.9155, 0.9404, 0.8320, 0.8682, 0.8989, 0.8438, 0.7627, 0.9263, 0.9038, 0.8926, 0.8486, 0.8237, 0.8096, 1.0010, 0.8218, 0.8018, 0.8447, 0.8691, 0.7070, 0.8252, 0.8198, 0.9038, 0.8584, 0.8789, 0.8530, 0.8550, 0.8545, 0.7886, 0.9014, 0.8306, 0.8335, 0.8164, 0.9048, 0.8984, 0.8032, 0.8789, 0.8154,\n        0.6665, 0.8237, 0.8164, 0.8809, 0.8589, 0.8555, 0.8896, 0.7817, 0.8481, 0.8384, 0.7456, 0.8813, 0.9048, 0.8022, 0.8906, 0.8169, 0.8169, 0.8281, 0.7974, 0.8164, 0.8359, 0.8154, 0.7793, 0.7979, 0.7954, 0.8535, 0.8442, 0.8369, 0.7852, 0.8667, 0.8105, 0.8345, 0.8428, 0.8140, 0.8359, 0.8896, 0.8032, 0.8799, 0.8159,\n        0.9038, 0.8550, 0.8833, 0.8896, 0.7725, 0.8774, 0.8403, 0.8369, 0.8594, 0.8228, 0.8237, 0.7837, 0.8911, 0.9077, 0.7393, 0.7490, 0.8428, 0.8921, 0.8335, 0.8813, 0.9434, 0.8042, 0.8652, 0.8701, 0.8667, 0.8999, 0.6943, 0.8311, 0.8101, 0.8159, 0.8799, 0.9058, 0.8481, 0.8677, 0.8472, 0.8838, 0.9092, 0.8545, 0.8379,\n        0.8730, 0.8457, 0.9136, 0.7803, 0.7197, 0.8013, 0.7915, 0.8799, 0.8145, 0.7485, 0.7891, 0.9180, 0.8921, 0.7817, 0.7993, 0.7910, 0.8584, 0.8423, 0.7983, 0.8188, 0.8945, 0.7651, 0.8408, 0.8477, 0.8613, 0.8584, 0.8325, 0.8306, 0.8940, 0.7798, 0.7397, 0.8374, 0.8716, 0.8701, 0.8452, 0.8818, 0.6792, 0.8232, 0.7656,\n        0.7432, 0.8486, 0.8472, 0.8652, 0.7983, 0.8247, 0.8374, 0.8438, 0.8408, 0.8457, 0.8208, 0.7983, 0.8770, 0.9009, 0.8755, 0.8154, 0.7876, 0.8833, 0.8628, 0.8159, 0.8447, 0.8188, 0.8408, 0.8252, 0.8105, 0.8857, 0.8320, 0.8169, 0.8970, 0.9233, 0.8198, 0.8828, 0.8306, 0.8506, 0.8315, 0.7861, 0.7979, 0.9111, 0.8354,\n        0.8003, 0.8647, 0.8535, 0.8042, 0.8174, 0.7827, 0.8506, 0.7622, 0.8408, 0.8789, 0.8330, 0.8008, 0.8491, 0.8223, 0.8105, 0.7837, 0.9111, 0.8901, 0.8896, 0.8394, 0.8491, 0.8320, 0.8496, 0.8730, 0.6167, 0.7734, 0.7979], dtype=torch.float16), 'perceiver_resampler.layers.2.1.0.bias': tensor([ 1.2012e-01,  1.9562e-02, -5.5634e-02,  1.2067e-01,  9.6741e-03,  9.8572e-03,  2.9938e-02, -2.3544e-02, -1.3100e-02,  4.9561e-02, -1.3879e-01,  2.0410e-01, -1.1383e-02,  5.9540e-02, -6.7139e-02, -7.8125e-02,  4.3304e-02, -7.5928e-02, -9.3079e-02, -2.7313e-02,  1.0565e-01,  3.7956e-03,  8.9111e-02, -1.3074e-01,\n         1.0797e-01, -1.0852e-01, -3.1494e-02,  1.2164e-01, -2.8687e-02, -1.2830e-01,  2.0035e-02,  3.5187e-02,  1.4331e-01, -1.8176e-01, -1.5356e-01, -1.0938e-01,  4.5280e-03, -8.3191e-02,  9.2224e-02,  1.5967e-01, -2.1408e-02,  3.3234e-02,  4.4037e-02, -6.4270e-02, -9.2773e-02,  9.7717e-02,  5.6641e-02, -8.9294e-02,\n        -1.6693e-02,  6.9397e-02, -4.1351e-02, -6.8481e-02, -6.8176e-02, -4.1779e-02, -8.9722e-02, -7.7637e-02,  4.1733e-03, -1.8091e-01,  8.6853e-02, -5.8655e-02,  6.6223e-02, -8.0750e-02, -8.6975e-02,  1.7319e-02,  1.2335e-01, -7.1411e-02,  2.4300e-03, -1.3184e-01, -2.5005e-03, -1.2451e-01,  1.0925e-01, -1.4229e-02,\n        -2.8809e-02,  7.2754e-02, -6.3049e-02,  3.5095e-04,  7.7332e-02,  1.0486e-01, -1.0138e-01, -7.8430e-02, -5.1453e-02,  8.1482e-02, -1.4172e-01,  1.7654e-02, -6.5430e-02, -1.7126e-01,  2.0966e-02,  1.2903e-01,  1.8701e-01,  1.6162e-01, -2.0496e-01,  2.7817e-02, -1.1877e-01,  6.2408e-02,  7.8613e-02,  8.0872e-02,\n        -1.7761e-02,  1.2598e-01,  1.1035e-01, -5.4871e-02, -6.3538e-02, -8.1055e-02, -1.0022e-01,  1.3049e-01, -5.9753e-02, -6.7505e-02, -1.0162e-01,  7.4402e-02, -1.2341e-01, -1.2488e-01,  5.1880e-02, -1.9012e-02,  4.9469e-02,  4.0192e-02, -1.4819e-01, -5.8517e-03, -1.3232e-01,  5.0476e-02, -7.4463e-03,  6.1737e-02,\n         6.8176e-02,  1.1505e-01,  1.1475e-01,  1.0303e-01,  6.9153e-02, -8.9294e-02, -5.8899e-03,  7.4707e-02,  7.3669e-02,  2.0752e-01,  2.4475e-02, -8.4229e-02,  1.8295e-02, -1.1719e-01,  5.0720e-02, -5.0385e-02,  1.4819e-01, -9.7839e-02, -1.4503e-02, -7.3547e-02, -2.7283e-02, -4.5288e-02, -6.8237e-02, -8.1055e-02,\n         1.5088e-01,  3.4790e-02, -1.7151e-02,  5.3864e-02, -9.2041e-02,  2.9388e-02, -2.0111e-02, -1.4331e-01,  1.8579e-01,  9.1187e-02,  7.1655e-02,  1.6956e-01, -1.3916e-01,  1.9455e-02, -4.4495e-02,  1.0980e-01,  9.8083e-02,  1.2347e-01, -5.9479e-02,  1.1859e-01, -6.7673e-03,  5.8258e-02,  1.1847e-01,  7.5439e-02,\n        -9.1431e-02, -1.1523e-01,  4.5074e-02, -8.1604e-02, -5.4932e-02, -3.2867e-02,  1.3037e-01,  1.8433e-01,  5.8022e-03, -4.3060e-02, -6.9702e-02,  2.3645e-01,  6.7261e-02, -4.9622e-02, -1.0760e-01, -1.0187e-01,  1.7197e-02,  1.2659e-01, -8.1116e-02,  1.1432e-01,  1.4130e-02, -7.1838e-02,  2.8183e-02, -5.8411e-02,\n        -1.0376e-01,  1.7236e-01,  1.1652e-01,  1.1543e-02, -1.5076e-01,  6.1401e-02, -5.3528e-02,  3.9642e-02,  1.2489e-02, -9.2896e-02, -2.1400e-03, -1.2537e-01, -9.3689e-02, -2.1759e-02,  1.1969e-01,  8.5571e-02,  1.6357e-02,  5.7648e-02, -1.0962e-01,  1.2650e-02,  7.5989e-02,  1.1963e-01, -9.4543e-02, -1.1450e-01,\n        -6.3477e-03, -1.1299e-02,  6.8542e-02, -1.5674e-01,  5.7678e-02,  1.1096e-01,  9.6436e-02, -9.2163e-03,  8.2016e-03, -8.1604e-02, -1.7908e-01, -4.5563e-02,  7.9773e-02, -4.4067e-02,  3.7079e-02, -2.0471e-01, -1.1157e-01, -9.3628e-02,  8.2458e-02, -4.5441e-02,  1.4709e-02,  1.9775e-01, -1.8884e-01, -1.0590e-01,\n         7.0496e-02,  1.8738e-02, -4.1138e-02, -1.1978e-02,  1.1725e-01, -6.9771e-03, -1.3428e-01, -1.8646e-02,  1.1572e-01, -1.4966e-01,  7.9346e-02,  7.4348e-03, -9.5825e-02, -1.3037e-01, -1.6260e-01,  7.5928e-02,  8.6548e-02, -2.6642e-02, -6.8481e-02, -7.7332e-02,  1.8225e-01, -7.7332e-02, -1.8262e-01, -2.7695e-02,\n         7.7881e-02, -7.1777e-02, -3.3478e-02, -2.7725e-02, -5.1605e-02, -4.5746e-02, -9.1370e-02, -1.4136e-01,  5.9448e-02,  4.8950e-02, -1.5784e-01,  1.6403e-02, -1.6553e-01, -8.4656e-02, -8.1604e-02,  1.3635e-01, -1.8509e-02,  1.5674e-01, -2.1082e-01,  1.4307e-01,  1.4490e-01, -3.9825e-02, -6.7673e-03,  5.4047e-02,\n        -1.3843e-01, -2.9861e-02,  1.2695e-01, -1.1212e-01,  4.3060e-02,  7.8735e-02,  3.3691e-02, -1.3574e-01,  4.0009e-02, -2.7939e-02, -5.1994e-03,  9.0210e-02,  6.7932e-02,  1.3684e-01, -3.5767e-02,  1.0870e-01, -1.0175e-01,  3.2635e-03,  1.5335e-02, -1.0028e-01, -9.2224e-02,  1.4209e-01, -7.5134e-02,  1.2537e-01,\n         4.2847e-02, -9.8999e-02, -1.2030e-01, -6.3904e-02,  3.2623e-02,  4.3427e-02,  9.8511e-02, -7.8857e-02, -1.1023e-01,  1.1584e-01,  4.9316e-02,  1.6394e-01,  1.7078e-01,  2.5314e-02, -5.6610e-02,  1.1292e-01, -9.8389e-02, -4.7791e-02, -1.6809e-01,  4.6997e-02, -1.0944e-01,  1.5354e-04,  1.9836e-02, -7.2388e-02,\n         1.3672e-01,  3.4241e-02, -1.0016e-01,  1.2329e-01, -1.0516e-01,  8.3313e-02,  1.8286e-01, -7.8125e-02, -3.6926e-02, -1.3354e-01,  2.8275e-02, -1.2646e-01, -3.4271e-02,  2.4292e-02,  1.1528e-02, -1.6203e-03,  2.0154e-01,  7.3608e-02, -9.9426e-02,  1.2781e-01, -3.9490e-02,  6.7566e-02, -1.2189e-01,  1.6388e-02,\n        -1.1304e-01,  7.1533e-02,  2.6245e-03, -1.3171e-01,  7.3486e-02,  5.9235e-02, -1.0028e-01, -7.2083e-02,  3.9185e-02,  6.0883e-02,  1.3916e-01, -4.0863e-02,  2.2018e-02,  1.6577e-01,  3.9043e-03, -4.4128e-02,  6.3782e-02,  1.2891e-01,  2.4323e-02,  1.9547e-02,  1.5515e-01, -4.2633e-02,  2.2720e-02, -1.0876e-01,\n         2.2415e-02, -1.4124e-01,  4.8096e-02, -5.8823e-03, -8.7402e-02,  9.7290e-02,  1.0376e-02,  1.9177e-01,  1.4783e-01, -2.5101e-02, -6.4392e-02, -1.0858e-01, -1.3027e-03, -2.5177e-02, -2.4948e-03, -1.4917e-01, -8.5144e-02, -9.6008e-02, -1.0205e-01, -1.8433e-01,  9.7107e-02,  8.4961e-02,  7.6355e-02,  9.7122e-03,\n         3.8910e-02,  1.2939e-01, -4.6265e-02,  1.1902e-01, -1.4893e-01,  1.4648e-01,  1.5198e-01,  1.2001e-02,  1.1115e-01, -1.2213e-01, -1.2384e-01, -1.3269e-01, -1.1768e-01,  9.9670e-02,  8.6121e-02,  9.0393e-02,  1.1279e-01, -1.5759e-01,  3.9005e-03, -1.7944e-01,  1.2988e-01,  1.2360e-02,  1.0178e-02,  1.2093e-02,\n        -1.0126e-01,  8.9111e-02,  1.6833e-01, -6.8909e-02, -6.2866e-02,  1.4319e-01, -3.6682e-02, -5.6152e-02, -1.5247e-01, -4.9973e-04, -6.2012e-02, -1.7868e-02, -7.3767e-04,  8.0200e-02,  7.8308e-02, -2.8366e-02, -6.0791e-02,  1.3721e-01, -3.9330e-03,  4.3427e-02,  4.0558e-02,  5.8632e-03, -1.3831e-01, -1.3464e-01,\n        -1.7151e-02, -1.5396e-02, -2.4872e-02, -1.2500e-01,  8.2458e-02,  4.2694e-02,  7.0007e-02, -3.1250e-02,  3.6285e-02,  2.6520e-02, -2.0187e-02,  8.4167e-02, -2.6794e-02,  1.0425e-01,  1.0822e-01,  2.5314e-02,  7.4158e-02,  4.6844e-03,  1.5926e-03,  7.0007e-02, -7.8186e-02, -1.1377e-01, -7.4097e-02,  6.7825e-03,\n        -1.0040e-01, -2.0874e-02,  6.5674e-02, -8.2092e-03,  6.8481e-02, -6.7291e-03,  3.7048e-02, -4.9629e-03, -7.8918e-02, -1.2199e-02, -1.0602e-01, -8.6609e-02,  3.6682e-02,  3.3051e-02,  4.7150e-02, -1.4893e-01, -1.7261e-01, -8.8562e-02, -1.6956e-01, -3.6743e-02,  7.1335e-03, -9.6130e-02,  1.4380e-01, -3.4119e-02,\n         3.6285e-02, -1.5442e-01,  1.0785e-01,  9.1553e-02, -8.5876e-02, -5.3467e-02,  1.0449e-01, -9.4238e-02, -1.0529e-01, -9.1858e-02, -1.3940e-01,  1.1523e-01, -8.4656e-02, -3.5736e-02, -6.2561e-02,  3.2562e-02, -1.1755e-01,  6.8298e-02, -5.9418e-02,  1.1151e-01,  2.1057e-02, -5.9929e-03,  1.5100e-01,  1.0480e-01,\n         1.1383e-02,  1.1951e-01,  4.3213e-02,  1.1169e-01, -2.4277e-02,  1.5030e-02, -7.0557e-02, -5.2765e-02, -2.9602e-02,  6.6650e-02, -4.5502e-02, -1.5125e-01, -1.3696e-01,  1.3440e-01, -3.4149e-02, -1.2744e-01, -8.3130e-02, -1.1133e-01, -4.1351e-02, -5.7617e-02, -1.3049e-01, -1.3806e-01, -1.0986e-01,  9.3811e-02,\n        -5.1155e-03,  2.7832e-02, -6.6406e-02,  1.4758e-01, -1.3806e-01,  1.4941e-01, -6.0913e-02, -6.7688e-02, -2.1912e-02,  2.2729e-01, -4.7760e-02, -7.0862e-02,  4.4098e-02,  4.3915e-02,  2.4826e-02,  5.4626e-02,  6.7566e-02, -1.7810e-01, -3.0991e-02,  9.6924e-02,  6.7749e-02, -1.4062e-01,  1.4514e-01,  9.4177e-02,\n        -1.5625e-01, -8.2092e-02, -2.6749e-02,  1.1276e-02,  7.2754e-02,  1.6626e-01, -1.4748e-02, -9.9670e-02,  1.0645e-01,  3.1872e-03,  9.5673e-03,  4.0802e-02, -1.2006e-01,  7.8918e-02, -1.4709e-01,  1.0022e-01, -6.2134e-02,  4.6478e-02,  3.0106e-02,  5.4596e-02,  1.2878e-01,  3.5278e-02, -4.8462e-02,  1.3464e-01,\n        -1.0266e-01,  4.3701e-02,  1.6504e-01,  1.5007e-02, -9.2102e-02, -6.7825e-03,  2.2049e-02,  1.2146e-02, -1.4221e-02,  3.5339e-02, -7.0129e-02,  8.2169e-03, -1.1755e-01,  9.2468e-02, -7.8979e-02,  7.3425e-02,  3.6255e-02, -8.0261e-02,  9.0027e-02, -2.5101e-03,  5.6976e-02, -4.8737e-02, -1.1914e-01, -5.1361e-02,\n        -2.9694e-02,  1.2018e-01,  2.6566e-02,  7.7393e-02, -9.8816e-02,  1.5222e-01, -7.9468e-02,  8.1055e-02, -5.8044e-02,  1.3147e-01, -5.9143e-02,  5.1361e-02,  1.1755e-01, -1.4148e-01,  1.2955e-02,  5.9967e-03, -4.5105e-02,  1.1353e-01, -6.6528e-02,  9.0759e-02,  1.6919e-01, -7.5500e-02, -2.0233e-02, -1.0187e-01,\n        -9.3445e-02,  1.4453e-01,  2.9240e-03,  4.0192e-02, -5.4565e-02,  4.5044e-02,  6.0987e-04,  6.3782e-02, -4.3221e-03, -1.7715e-02, -5.1056e-02,  1.3855e-01, -1.3928e-01,  3.6259e-03, -9.1919e-02,  1.3623e-01,  2.5589e-02,  1.3171e-01,  1.0272e-01, -3.2379e-02, -5.2460e-02, -7.0068e-02, -9.2163e-02, -4.3945e-02,\n        -1.8372e-02,  4.9530e-02,  1.4136e-01,  9.0881e-02,  3.3234e-02, -2.2339e-02, -6.5979e-02, -7.0129e-02, -8.4381e-03, -1.0962e-01,  2.2385e-02,  1.2903e-01,  3.0655e-02, -3.1494e-02,  1.1945e-01, -5.3192e-02,  1.3782e-01, -9.3842e-03,  5.3009e-02,  3.2928e-02, -6.2141e-03,  3.0579e-02,  7.3669e-02, -4.6112e-02,\n        -1.5465e-02, -5.8807e-02,  1.1029e-01,  3.7323e-02, -7.4219e-02, -1.5930e-02,  2.7267e-02,  4.2145e-02, -1.0089e-01,  4.2328e-02,  1.1761e-01,  1.0474e-01, -7.5912e-03,  2.9022e-02, -8.5815e-02,  5.2429e-02, -3.0640e-02,  1.3586e-01,  4.1626e-02,  7.1106e-02,  1.0663e-01, -2.4750e-02,  6.7383e-02, -6.0303e-02,\n         7.3303e-02,  6.2347e-02, -1.3329e-02,  9.3079e-03, -7.0862e-02, -5.3070e-02,  9.4421e-02, -1.9617e-01,  5.8411e-02, -1.0797e-01, -7.4890e-02,  1.6467e-01, -9.9609e-02,  1.3416e-01, -1.4514e-01, -9.2468e-03,  1.1407e-01,  4.8126e-02,  4.4434e-02,  1.0449e-01, -6.2927e-02, -3.0807e-02, -5.8258e-02, -3.7567e-02,\n        -4.1656e-02,  4.2908e-02,  5.2551e-02, -9.3384e-02, -3.5309e-02, -8.3160e-04, -7.7332e-02,  3.1311e-02, -8.0627e-02, -1.1456e-01,  4.8676e-02,  1.3464e-01, -7.3364e-02,  1.0980e-01, -2.0410e-01, -4.5074e-02, -9.8633e-02,  1.2744e-01, -2.8564e-02,  1.1572e-01,  7.7026e-02,  9.2087e-03, -9.6741e-02,  1.5656e-02],\n       dtype=torch.float16), 'perceiver_resampler.layers.2.1.1.weight': tensor([[ 1.9928e-02,  2.5558e-02, -3.7384e-02,  ..., -3.4821e-02, -1.8555e-02,  4.2763e-03],\n        [ 3.6335e-03, -2.1729e-02,  4.2305e-03,  ..., -1.3031e-02,  1.1833e-02, -2.2369e-02],\n        [ 2.8839e-02, -1.6298e-03,  4.6959e-03,  ..., -2.1912e-02,  1.8738e-02,  1.8326e-02],\n        ...,\n        [-4.5357e-03,  9.6817e-03, -4.2999e-02,  ..., -2.9007e-02,  2.4796e-02,  2.2293e-02],\n        [-2.8172e-03, -3.2898e-02,  5.1928e-04,  ..., -1.6907e-02,  1.6422e-03,  1.5610e-02],\n        [ 3.5309e-02, -5.1856e-06, -2.0126e-02,  ..., -8.4763e-03,  4.6539e-02, -3.2410e-02]], dtype=torch.float16), 'perceiver_resampler.layers.2.1.3.weight': tensor([[-0.0481,  0.0066,  0.0099,  ..., -0.0383, -0.0097, -0.0163],\n        [ 0.0493, -0.0042,  0.0010,  ...,  0.0362, -0.0059, -0.0194],\n        [ 0.0165, -0.0070, -0.0018,  ..., -0.0112,  0.0005, -0.0239],\n        ...,\n        [ 0.0082, -0.0343, -0.0194,  ...,  0.0151, -0.0472, -0.0011],\n        [-0.0166, -0.0325,  0.0084,  ...,  0.0244, -0.0204,  0.0396],\n        [ 0.0023,  0.0115, -0.0123,  ...,  0.0142,  0.0110, -0.0283]], dtype=torch.float16), 'perceiver_resampler.layers.3.0.norm1.weight': tensor([0.7251, 0.7427, 0.6470, 0.7793, 0.7197, 0.7930, 0.7305, 0.7314, 0.7876, 0.7451, 0.7222, 0.6836, 0.7402, 0.7573, 0.8003, 0.7446, 0.7837, 0.6792, 0.7495, 0.7368, 0.7510, 0.7729, 0.7251, 0.6948, 0.6919, 0.7676, 0.7319, 0.6909, 0.6880, 0.7397, 0.7705, 0.7275, 0.7344, 0.7256, 0.7363, 0.6655, 0.6372, 0.7119, 0.6831,\n        0.7710, 0.8105, 0.7993, 0.7715, 0.7300, 0.7466, 0.7344, 0.6631, 0.7319, 0.7183, 0.6904, 0.7090, 0.7217, 0.7324, 0.7227, 0.6968, 0.7598, 0.7256, 0.6553, 0.7490, 0.7827, 0.7427, 0.7817, 0.7266, 0.7632, 0.7866, 0.6875, 0.7729, 0.7490, 0.7417, 0.7705, 0.7715, 0.7256, 0.7383, 0.7637, 0.6992, 0.7588, 0.6714, 0.7329,\n        0.7368, 0.7368, 0.7603, 0.7803, 0.7827, 0.6948, 0.7944, 0.7661, 0.7041, 0.7139, 0.8008, 0.7158, 0.7510, 0.7153, 0.6768, 0.7427, 0.7373, 0.7075, 0.7837, 0.7363, 0.7451, 0.7598, 0.6826, 0.7266, 0.7524, 0.7368, 0.7915, 0.7241, 0.7490, 0.7393, 0.7471, 0.7686, 0.7227, 0.7388, 0.7554, 0.7451, 0.7158, 0.7354, 0.6968,\n        0.7905, 0.6523, 0.7183, 0.7656, 0.7212, 0.7397, 0.8955, 0.7354, 0.7119, 0.7178, 0.7495, 0.6055, 0.7334, 0.6914, 0.6904, 0.7275, 0.7324, 0.7134, 0.7690, 0.7573, 0.7178, 0.7861, 0.6948, 0.7217, 0.7202, 0.7373, 0.7017, 0.6816, 0.7788, 0.7900, 0.7114, 0.8071, 0.7461, 0.7173, 0.7485, 0.7627, 0.7329, 0.7148, 0.7446,\n        0.7095, 0.6543, 0.7456, 0.7266, 0.7007, 0.7056, 0.7095, 0.7485, 0.7031, 0.7773, 0.7422, 0.6855, 0.7935, 0.7520, 0.7388, 0.7153, 0.7261, 0.7490, 0.7622, 0.6660, 0.7236, 0.7026, 0.6763, 0.7153, 0.7446, 0.7168, 0.7441, 0.7852, 0.8008, 0.7744, 0.5327, 0.7510, 0.6758, 0.6836, 0.8003, 0.6113, 0.7271, 0.7363, 0.7275,\n        0.7163, 0.7119, 0.7148, 0.7632, 0.8369, 0.6685, 0.7290, 0.6704, 0.6890, 0.7324, 0.7637, 0.6899, 0.7314, 0.7261, 0.7549, 0.6558, 0.7402, 0.6357, 0.7949, 0.6851, 0.6958, 0.7739, 0.7754, 0.7715, 0.7822, 0.7163, 0.7461, 0.7085, 0.7456, 0.7612, 0.6460, 0.7959, 0.7729, 0.6943, 0.7158, 0.7476, 0.7441, 0.7261, 0.6919,\n        0.7368, 0.7114, 0.7583, 0.7891, 0.6758, 0.7466, 0.7144, 0.7212, 0.6963, 0.6821, 0.6855, 0.7061, 0.7554, 0.7866, 0.7295, 0.7983, 0.7993, 0.7031, 0.6807, 0.7021, 0.6860, 0.7021, 0.7866, 0.7334, 0.6943, 0.7334, 0.7344, 0.7456, 0.7642, 0.7114, 0.7246, 0.7100, 0.7017, 0.7422, 0.7681, 0.7290, 0.7329, 0.7212, 0.8057,\n        0.7202, 0.7280, 0.7446, 0.8047, 0.6978, 0.7549, 0.6729, 0.7583, 0.7061, 0.7300, 0.6353, 0.7324, 0.6323, 0.7603, 0.7832, 0.7725, 0.7524, 0.7275, 0.6514, 0.7358, 0.5942, 0.7100, 0.7266, 0.7769, 0.7349, 0.7529, 0.6562, 0.7349, 0.6851, 0.6167, 0.7866, 0.7202, 0.6206, 0.7432, 0.7476, 0.7544, 0.7046, 0.7241, 0.7231,\n        0.7422, 0.7271, 0.7017, 0.7925, 0.7192, 0.7153, 0.7256, 0.8340, 0.7275, 0.7339, 0.6978, 0.6738, 0.7485, 0.7017, 0.7661, 0.7207, 0.7461, 0.7007, 0.6089, 0.6777, 0.7134, 0.7290, 0.6914, 0.7231, 0.7900, 0.7275, 0.7925, 0.6855, 0.7476, 0.7358, 0.7144, 0.7173, 0.7339, 0.7603, 0.7197, 0.7666, 0.7510, 0.7256, 0.6699,\n        0.6968, 0.7104, 0.7334, 0.7134, 0.7773, 0.7544, 0.7324, 0.7656, 0.6772, 0.7314, 0.7363, 0.7344, 0.8047, 0.7036, 0.6821, 0.7148, 0.7690, 0.7529, 0.7256, 0.7397, 0.7925, 0.7573, 0.7725, 0.7676, 0.7573, 0.7783, 0.7349, 0.6992, 0.7510, 0.7056, 0.6904, 0.7026, 0.7095, 0.7402, 0.7261, 0.7417, 0.7124, 0.7026, 0.7109,\n        0.7510, 0.7700, 0.7607, 0.7197, 0.7031, 0.7354, 0.7046, 0.6772, 0.7495, 0.7573, 0.7988, 0.7163, 0.7612, 0.7310, 0.7495, 0.7949, 0.6914, 0.7544, 0.7021, 0.7671, 0.7095, 0.7231, 0.6919, 0.7256, 0.6479, 0.7671, 0.7017, 0.7432, 0.7246, 0.7544, 0.6826, 0.7539, 0.7695, 0.8120, 0.7612, 0.7139, 0.7158, 0.7158, 0.7236,\n        0.7329, 0.7383, 0.6641, 0.7720, 0.7793, 0.7427, 0.7090, 0.7397, 0.7612, 0.7510, 0.7515, 0.7212, 0.7344, 0.6997, 0.7695, 0.7070, 0.7734, 0.7949, 0.7593, 0.7222, 0.7544, 0.6543, 0.6689, 0.7437, 0.6895, 0.7607, 0.7256, 0.6699, 0.7271, 0.7446, 0.8203, 0.7134, 0.7646, 0.7285, 0.6328, 0.7109, 0.7158, 0.7666, 0.7148,\n        0.7339, 0.7759, 0.6963, 0.7485, 0.7637, 0.6733, 0.7495, 0.7314, 0.7192, 0.7114, 0.7646, 0.7104, 0.7412, 0.7202, 0.7817, 0.7129, 0.7690, 0.6875, 0.7886, 0.6802, 0.7212, 0.6851, 0.7427, 0.6289, 0.7314, 0.6694, 0.7388, 0.7583, 0.7607, 0.7266, 0.6963, 0.7324, 0.7461, 0.7407, 0.6826, 0.6611, 0.7461, 0.6792, 0.7231,\n        0.7329, 0.6655, 0.7495, 0.7104, 0.7622, 0.6787, 0.7798, 0.7329, 0.7930, 0.7490, 0.7373, 0.7666, 0.7358, 0.7319, 0.7529, 0.8076, 0.7798, 0.7715, 0.7295, 0.6396, 0.7104, 0.6548, 0.5938, 0.7451, 0.6538, 0.7393, 0.6772, 0.7622, 0.7515, 0.6748, 0.7441, 0.7739, 0.6992, 0.7344, 0.7192, 0.7974, 0.6895, 0.7031, 0.7471,\n        0.7251, 0.7598, 0.7437, 0.7612, 0.7627, 0.7930, 0.7554, 0.7949, 0.8091, 0.6685, 0.8110, 0.6768, 0.7095, 0.7295, 0.7778, 0.6963, 0.7417, 0.7456, 0.7339, 0.6616, 0.7305, 0.7578, 0.7563, 0.7212, 0.7119, 0.8052, 0.7305, 0.6567, 0.6689, 0.7017, 0.7798, 0.6636, 0.7324, 0.7261, 0.6909, 0.7783, 0.7471, 0.8276, 0.7285,\n        0.6924, 0.7666, 0.7168, 0.7607, 0.7534, 0.6865, 0.7515, 0.6812, 0.7764, 0.6885, 0.7393, 0.7773, 0.7471, 0.7104, 0.6904, 0.7095, 0.6641, 0.6372, 0.7119, 0.7622, 0.7163, 0.6978, 0.7124, 0.7808, 0.6465, 0.7344, 0.7778, 0.6973, 0.7144, 0.7080, 0.7407, 0.6973, 0.7612, 0.7861, 0.7534, 0.7515, 0.7480, 0.7451, 0.7764,\n        0.7490, 0.6528, 0.7358, 0.7583, 0.7090, 0.7324, 0.7148, 0.7461, 0.7598, 0.7578, 0.7988, 0.7314, 0.7183, 0.7480, 0.6992, 0.6943, 0.7480, 0.7036, 0.7832, 0.7329, 0.6943, 0.7256, 0.8022, 0.7158, 0.6899, 0.7788, 0.7144, 0.6792, 0.7388, 0.6802, 0.6797, 0.7026, 0.7212, 0.7485, 0.7266, 0.7886, 0.7163, 0.7163, 0.7319,\n        0.6719, 0.7241, 0.7451, 0.8291, 0.7168, 0.7314, 0.6899, 0.6831, 0.7251, 0.7480, 0.6963, 0.7808, 0.7451, 0.7212, 0.7764, 0.7231, 0.7217, 0.7778, 0.7451, 0.7070, 0.7319, 0.7212, 0.7007, 0.7471, 0.7217, 0.7500, 0.7368, 0.7710, 0.7017, 0.7485, 0.6948, 0.7349, 0.7422, 0.6924, 0.7725, 0.7705, 0.7207, 0.6831, 0.7388,\n        0.7534, 0.6304, 0.6895, 0.7036, 0.7500, 0.7368, 0.8047, 0.7041, 0.7207, 0.6626, 0.7144, 0.7295, 0.7930, 0.7129, 0.7358, 0.7402, 0.6792, 0.6089, 0.7495, 0.7905, 0.7388, 0.7144, 0.7153, 0.7002, 0.6953, 0.6777, 0.6904, 0.7920, 0.7188, 0.7358, 0.7368, 0.6851, 0.7363, 0.7529, 0.7515, 0.6997, 0.7212, 0.7046, 0.7246,\n        0.6411, 0.7422, 0.7129, 0.7446, 0.7144, 0.6943, 0.7251, 0.7510, 0.7671, 0.7607, 0.7378, 0.7471, 0.7471, 0.7183, 0.7129, 0.7681, 0.6294, 0.7192, 0.7144, 0.7378, 0.6855, 0.7319, 0.7397, 0.7466, 0.6816, 0.6851, 0.6797], dtype=torch.float16), 'perceiver_resampler.layers.3.0.norm1.bias': tensor([ 1.4565e-02, -2.9388e-02,  4.8187e-02, -3.0327e-03,  3.2806e-02, -3.1738e-02,  7.3090e-03,  2.7866e-03, -2.2447e-04, -2.4681e-03,  3.1643e-03,  4.4220e-02,  1.9882e-02, -1.4313e-02,  3.0228e-02,  1.0155e-02, -1.1375e-02,  7.1259e-03,  1.4099e-02, -3.3295e-02, -2.6536e-04, -4.7684e-03, -2.0676e-02,  2.1408e-02,\n         2.6871e-02,  2.0611e-04, -1.6312e-02,  2.5085e-02, -6.0638e-02, -4.9805e-02, -1.5656e-02, -1.2146e-02,  3.2074e-02, -2.5696e-02, -2.5606e-04, -3.9253e-03,  1.0292e-02, -2.0027e-03, -4.0588e-03,  2.5757e-02,  3.0716e-02, -4.7035e-03, -1.7212e-02, -2.6855e-02, -1.6968e-02, -5.4626e-03, -4.1473e-02, -2.0569e-02,\n         1.6281e-02,  1.9989e-02,  1.9363e-02,  1.0361e-02, -4.6463e-03, -7.8344e-04, -4.9973e-03, -1.2268e-02,  4.3915e-02,  2.1729e-02, -1.3718e-02, -8.6594e-03, -7.0152e-03,  1.6127e-03, -5.0485e-05,  1.2001e-02,  2.4681e-03,  2.4857e-02,  1.2505e-02, -1.6144e-02, -3.2898e-02,  5.5908e-02,  1.8524e-02,  1.8768e-02,\n         4.5562e-04, -1.4183e-02, -3.3569e-02, -2.8473e-02,  4.3144e-03, -2.7256e-03, -2.1149e-02,  3.0823e-02, -5.3635e-03, -1.6846e-02, -5.4855e-03, -2.9907e-02, -2.2751e-02,  2.9907e-02,  4.7211e-02, -1.8661e-02,  9.1553e-03,  9.3079e-03, -2.5818e-02, -1.7328e-03, -5.2277e-02,  3.3844e-02, -3.9307e-02,  3.1219e-02,\n        -3.6804e-02, -1.4084e-02,  8.4381e-03, -2.8046e-02,  3.9795e-02, -2.6417e-03,  3.1757e-03, -1.9867e-02,  6.9962e-03, -1.3008e-02,  1.2512e-02, -3.6041e-02,  3.3081e-02, -1.9211e-02, -4.6501e-03,  1.8005e-02,  1.0788e-02, -2.7061e-04, -3.3691e-02, -3.4809e-03, -1.2283e-02, -5.0049e-03, -8.1940e-03,  1.0101e-02,\n         1.7776e-02, -6.3591e-03, -4.0016e-03, -7.7553e-03, -1.2711e-02,  9.2545e-03,  1.1795e-02,  8.1558e-03,  4.3091e-02,  4.9591e-02,  2.0203e-02,  3.5919e-02, -1.7105e-02, -1.4000e-02, -2.2278e-02,  1.2527e-02,  4.1504e-02, -5.4073e-04, -1.0208e-02, -2.2491e-02,  4.2367e-04, -6.1340e-03,  2.9816e-02, -3.2532e-02,\n         1.6678e-02, -2.8244e-02,  2.1469e-02,  1.2306e-02, -1.7563e-02,  1.0635e-02,  3.6835e-02,  6.0005e-03,  1.2749e-02,  1.9760e-02, -3.2825e-03,  2.4719e-03, -5.2681e-03, -3.9154e-02, -7.3776e-03, -2.3697e-02,  1.6983e-02,  4.4525e-02, -2.9984e-02, -1.4618e-02, -4.2801e-03,  2.8107e-02,  2.1759e-02, -1.4893e-02,\n         2.6749e-02, -2.1790e-02,  1.2245e-02,  2.8290e-02, -7.4272e-03, -4.3518e-02, -3.3951e-03, -5.5237e-02,  1.7560e-04,  4.6326e-02,  4.7913e-02,  4.0222e-02,  3.0384e-03,  1.6312e-02, -1.0170e-02, -4.3091e-02,  3.5217e-02,  2.9602e-02, -2.8223e-01,  4.0527e-02,  3.2166e-02, -2.9469e-03, -1.3176e-02,  4.2999e-02,\n         3.9062e-02,  3.6224e-02,  4.5433e-03,  4.2648e-03,  5.0171e-02,  3.1067e-02,  1.4029e-03, -2.1942e-02,  7.3120e-02, -4.2206e-02, -1.0635e-02, -1.2306e-02, -3.4008e-03,  2.7420e-02,  8.8348e-03,  1.6953e-02,  8.1253e-03,  2.3743e-02, -2.2263e-02,  7.6771e-04, -8.9294e-02,  3.7384e-02,  1.9348e-02,  1.8356e-02,\n        -1.2596e-02,  2.4384e-02,  1.5306e-03, -1.5282e-02,  1.0401e-04, -4.1046e-02, -3.8727e-02,  2.0035e-02, -2.6566e-02, -4.3945e-02,  1.5465e-02,  2.5528e-02,  4.0558e-02, -7.4730e-03, -3.9101e-03, -4.2969e-02, -1.8158e-02,  5.0934e-02, -1.9503e-03, -1.7441e-02,  2.6817e-03,  1.8814e-02,  1.6388e-02, -6.8970e-02,\n         2.5528e-02,  2.6672e-02, -2.0523e-02,  6.9580e-02, -2.5848e-02,  2.4521e-02,  2.2324e-02, -2.6917e-02, -1.7899e-02,  6.6895e-02, -3.8208e-02, -4.2847e-02,  4.0398e-03,  1.1818e-02,  6.0921e-03, -3.5934e-03,  1.6159e-02, -1.9007e-03,  2.6886e-02,  4.4159e-02, -4.2999e-02, -7.1411e-03,  1.9703e-03, -3.9635e-03,\n        -7.3280e-03, -1.6754e-02,  2.5253e-02,  1.9012e-02, -1.2634e-02, -9.3079e-03, -4.8141e-03, -1.5020e-03, -1.0056e-02, -3.9215e-03,  2.6718e-02, -5.6732e-02,  3.0289e-02, -3.7170e-02, -3.6545e-03,  2.4765e-02, -1.3153e-02,  3.4241e-02, -5.8594e-03, -7.0419e-03, -1.5701e-02,  1.5556e-02, -1.9501e-02,  3.3997e-02,\n         3.2379e-02, -3.0685e-02,  1.4175e-02,  8.3435e-02,  1.7029e-02,  2.5162e-02, -3.2593e-02, -4.5357e-03, -1.0239e-02, -2.9404e-02,  1.3412e-02,  2.7557e-02,  2.7542e-03, -2.7420e-02, -3.3875e-02,  3.1204e-03,  1.9058e-02, -9.4681e-03, -2.6550e-02,  2.6718e-02,  9.0256e-03,  5.3940e-03,  4.3427e-02, -5.4474e-03,\n         9.1171e-03, -2.0538e-02,  1.0727e-02, -2.6779e-02,  5.0850e-03,  2.0874e-02, -1.5717e-02,  2.2934e-02,  2.5772e-02,  1.0445e-02, -8.5220e-03, -3.6682e-02,  1.8463e-02, -7.0419e-03, -4.9591e-02, -3.1586e-02, -9.0551e-04,  5.8441e-03, -3.0533e-02,  4.1992e-02,  3.7994e-02,  2.3376e-02,  5.2223e-03, -9.8324e-04,\n         3.6316e-02, -5.9090e-03,  2.2568e-02, -1.5045e-02, -1.0880e-02, -6.9031e-02,  4.0649e-02, -1.2901e-02, -2.8046e-02,  2.1118e-02,  3.5522e-02,  2.7344e-02,  5.0278e-03,  5.4565e-02,  4.5502e-02, -2.3544e-02,  2.1500e-02, -2.7130e-02,  2.1469e-02,  1.7166e-02, -1.9104e-02,  1.4519e-02, -1.5945e-02, -2.2827e-02,\n        -3.5210e-03, -1.3641e-02,  4.8920e-02,  2.3819e-02, -2.1439e-02,  4.7119e-02,  8.8453e-04, -1.3275e-03, -1.8860e-02, -1.5083e-02,  2.1652e-02, -1.0391e-02,  1.2999e-03, -1.1978e-02, -1.7365e-02,  2.0706e-02,  2.7344e-02,  1.3634e-02,  3.2837e-02,  5.6610e-02,  1.5381e-02,  1.2375e-02,  1.7227e-02,  4.9652e-02,\n         8.2321e-03,  6.9885e-03,  2.9114e-02, -1.4946e-02, -3.6499e-02, -3.5019e-03,  2.2141e-02,  1.2512e-02,  2.3079e-04, -1.0605e-02, -2.1408e-02,  3.4607e-02, -3.1769e-02,  1.8768e-02, -1.6479e-02,  1.5564e-03, -5.6076e-03, -1.2741e-02,  1.1988e-03,  6.6910e-03,  5.3864e-03, -3.4618e-03, -4.3152e-02, -4.1626e-02,\n         7.9163e-02, -8.8882e-03,  1.3306e-02,  2.5284e-02,  2.6817e-03, -3.4882e-02,  4.1229e-02, -2.7405e-02, -1.8036e-02, -1.2024e-02, -2.8336e-02,  5.9776e-03, -2.5681e-02,  4.4800e-02,  1.0925e-02,  1.7731e-02, -2.1957e-02, -3.5065e-02, -3.7506e-02, -3.1921e-02,  2.4841e-02,  3.7964e-02,  6.3972e-03, -2.0233e-02,\n         1.3466e-02, -2.0752e-02, -1.9501e-02,  3.5400e-02,  5.9357e-02,  2.1118e-02,  1.7792e-02, -6.6528e-03, -5.8022e-03, -2.1877e-03, -2.5467e-02,  3.4851e-02,  1.4740e-02,  1.2024e-02, -1.9470e-02, -1.6769e-02, -1.0765e-02,  1.9522e-03, -3.2867e-02,  1.6434e-02,  6.2180e-03,  9.2773e-03, -1.4526e-02,  3.0151e-02,\n        -4.8401e-02,  1.4351e-02, -4.4067e-02, -8.6136e-03,  1.0147e-02, -2.8748e-02, -1.5488e-02, -4.7546e-02, -2.9541e-02,  1.3359e-02,  2.5955e-02,  3.7079e-02,  3.6652e-02, -4.0283e-02,  6.4026e-02, -2.0370e-02, -3.4393e-02,  4.3259e-03,  1.1225e-03,  2.0199e-03,  6.5613e-03,  1.4915e-02, -2.5208e-02,  1.8005e-02,\n        -2.6688e-02, -6.7444e-03, -1.5686e-02, -2.4200e-02, -1.0506e-02,  9.6989e-04,  1.4175e-02,  1.0974e-01,  7.8735e-03,  3.2654e-02, -6.5804e-03,  5.4504e-02, -5.2109e-03, -2.5955e-02, -5.1849e-02,  7.6180e-03, -2.1652e-02,  2.0477e-02,  5.5908e-02, -8.0948e-03, -4.0894e-02, -4.5891e-03, -1.3000e-02,  2.9278e-03,\n        -1.0857e-02, -1.7593e-02,  8.6823e-03, -2.6123e-02,  1.7975e-02,  1.1925e-02,  2.6169e-02,  7.7605e-05, -9.3613e-03, -1.7212e-02, -1.1627e-02,  3.0090e-02, -1.3046e-02, -2.8397e-02, -1.4069e-02,  7.8087e-03,  2.1317e-02,  3.0106e-02,  2.0981e-03, -3.3779e-03,  3.7476e-02, -1.3229e-02, -1.7349e-02, -7.8583e-03,\n        -2.4384e-02,  3.1952e-02,  3.1567e-03, -1.9379e-02,  2.9556e-02, -2.0004e-02, -2.3895e-02, -5.1270e-03, -3.7415e-02,  4.3793e-03, -3.4088e-02,  2.4170e-02, -2.3651e-02, -4.4403e-02,  2.1038e-03,  2.0264e-02, -1.2428e-02,  4.1840e-02, -2.1606e-02,  3.0727e-03, -1.7593e-02,  2.2736e-02, -2.3895e-02,  3.6438e-02,\n         3.5950e-02,  4.3884e-02,  2.5940e-02,  9.0942e-03,  4.0703e-03,  1.7136e-02,  4.5105e-02,  1.9287e-02, -1.9272e-02,  8.6212e-03, -1.8265e-02, -3.3325e-02, -6.8550e-03, -2.7542e-03, -2.2202e-02,  1.2108e-02,  2.1530e-02,  1.2383e-02, -1.8097e-02,  3.9024e-03,  5.1910e-02, -4.1962e-02, -1.4938e-02, -2.0020e-02,\n        -3.3905e-02, -5.5115e-02,  1.7197e-02,  1.1040e-02,  2.7679e-02, -2.1038e-03, -1.1078e-02,  2.1179e-02, -4.1656e-02,  2.9343e-02,  1.0124e-02,  4.0527e-02,  3.3051e-02, -5.2124e-02,  1.4153e-02,  7.4196e-03,  3.1555e-02, -7.0190e-03, -2.2934e-02, -2.4475e-02, -5.8603e-04, -4.4037e-02,  1.6083e-02,  1.3664e-02,\n        -8.8654e-03,  2.4078e-02, -4.2839e-03,  1.9180e-02, -1.1642e-02, -4.1901e-02, -1.9165e-02, -3.3661e-02,  9.5596e-03,  1.5373e-02, -1.4397e-02, -5.5817e-02, -1.6336e-03,  8.8501e-03,  1.1856e-02,  2.6031e-02,  2.8610e-02, -4.9782e-03,  1.6754e-02, -1.1391e-02,  3.6804e-02,  3.2410e-02,  8.4152e-03, -1.9241e-02,\n         2.0386e-02,  1.7490e-03,  3.4828e-03, -9.1705e-03, -1.9852e-02,  7.7963e-04,  4.4189e-02,  5.0629e-02, -3.0193e-03,  7.1430e-04, -3.1281e-02,  2.7065e-03, -4.7302e-02,  4.0817e-03, -3.7708e-03,  6.0310e-03,  6.4430e-03,  3.2043e-03,  1.0460e-02,  1.0498e-02,  2.6441e-04,  2.4857e-02, -3.3356e-02, -2.8286e-03,\n         3.7750e-02, -2.6073e-03,  1.6830e-02, -3.4943e-02,  1.3847e-02,  3.6743e-02,  1.0574e-02,  1.2863e-02,  1.7319e-02, -7.3486e-02, -1.0643e-02,  3.0212e-02, -3.7537e-03, -2.6657e-02,  2.3880e-02, -6.3801e-04, -5.4884e-04, -2.4765e-02,  1.4771e-02,  3.0060e-02,  1.4359e-02,  3.4546e-02, -3.5744e-03, -6.0043e-03,\n        -4.0588e-02, -5.3215e-03,  3.4515e-02, -2.0142e-03, -1.2161e-02, -1.2886e-02,  2.6077e-02, -5.6038e-03, -4.4823e-03, -2.2537e-02, -5.9662e-02,  1.6861e-02, -5.0201e-03, -1.5373e-02, -2.6646e-03, -7.9117e-03, -2.9297e-03, -1.6968e-02, -2.1927e-02, -2.2766e-02,  5.6553e-04,  1.8677e-02, -1.5327e-02,  1.0910e-02,\n         6.2828e-03, -1.3657e-03, -8.7357e-03,  2.2202e-02,  2.8015e-02,  1.2039e-02,  3.3975e-04, -5.9624e-03, -1.0559e-02, -4.4975e-03, -2.2411e-03, -3.5095e-02, -9.8877e-03, -6.0120e-03,  4.9713e-02,  1.8280e-02, -9.1019e-03,  5.8823e-03,  2.3060e-03, -2.0599e-02, -1.1871e-02,  7.3547e-03, -4.1443e-02,  8.7036e-02,\n         2.1286e-02,  1.3847e-02,  8.4152e-03,  3.9856e-02,  1.1696e-02, -6.2073e-02, -3.7018e-02,  8.0017e-02,  1.1147e-02,  1.0773e-02,  1.5144e-02,  1.4153e-02, -2.1408e-02,  5.1636e-02, -3.2043e-04, -2.0248e-02,  2.2751e-02, -4.1161e-03,  3.9429e-02,  1.2733e-02, -4.3274e-02,  2.7176e-02, -4.8409e-03,  4.6539e-03,\n         4.6310e-03,  3.0899e-03, -5.2338e-03, -2.1973e-03, -2.6138e-02, -1.9241e-02,  4.3259e-03,  6.5842e-03, -1.2398e-02, -3.4912e-02,  1.8356e-02, -8.1635e-03, -5.5847e-02, -8.9600e-02,  2.1637e-02,  2.7481e-02, -1.2550e-02, -3.6285e-02, -1.8219e-02,  2.9144e-02,  2.7939e-02, -2.0264e-02, -1.4214e-02, -6.1111e-03],\n       dtype=torch.float16), 'perceiver_resampler.layers.3.0.norm2.weight': tensor([0.6196, 0.6577, 0.6226, 0.6465, 0.5889, 0.6069, 0.6382, 0.6548, 0.6030, 0.5825, 0.6323, 0.6255, 0.6265, 0.6006, 0.5581, 0.5952, 0.6309, 0.6274, 0.7100, 0.5986, 0.6621, 0.6143, 0.5747, 0.5854, 0.5771, 0.6104, 0.5698, 0.6406, 0.6709, 0.6172, 0.5957, 0.6260, 0.6460, 0.6074, 0.5552, 0.6445, 0.6133, 0.6289, 0.6714,\n        0.6274, 0.6162, 0.5791, 0.6191, 0.5674, 0.6191, 0.5786, 0.6709, 0.6528, 0.6304, 0.5933, 0.6523, 0.6313, 0.5972, 0.7134, 0.6685, 0.7637, 0.6626, 0.6157, 0.6401, 0.6489, 0.6113, 0.6587, 0.5938, 0.6147, 0.6543, 0.6763, 0.5913, 0.6279, 0.6577, 0.6797, 0.6538, 0.5972, 0.6660, 0.6479, 0.6494, 0.7139, 0.6143, 0.5420,\n        0.4788, 0.6572, 0.6719, 0.6118, 0.5977, 0.6104, 0.6099, 0.6694, 0.6504, 0.6123, 0.5874, 0.6060, 0.6294, 0.5972, 0.6060, 0.6372, 0.6289, 0.6147, 0.6172, 0.6724, 0.5850, 0.6030, 0.6616, 0.6294, 0.6875, 0.5737, 0.6313, 0.6304, 0.6367, 0.6455, 0.5718, 0.6958, 0.6123, 0.5781, 0.6841, 0.6362, 0.6519, 0.6108, 0.5620,\n        0.7295, 0.6709, 0.6792, 0.6182, 0.6123, 0.6104, 0.6445, 0.5898, 0.6611, 0.5488, 0.6831, 0.6025, 0.6270, 0.6699, 0.6016, 0.6714, 0.6167, 0.6177, 0.6675, 0.6147, 0.6523, 0.5952, 0.6113, 0.6528, 0.5923, 0.6914, 0.6104, 0.6479, 0.6440, 0.6470, 0.6724, 0.6626, 0.6421, 0.6353, 0.6602, 0.5903, 0.6138, 0.5972, 0.6396,\n        0.6875, 0.5776, 0.5098, 0.7402, 0.6768, 0.5884, 0.6777, 0.5620, 0.6519, 0.6650, 0.6587, 0.5581, 0.6299, 0.6489, 0.6152, 0.6206, 0.6089, 0.6362, 0.6182, 0.5757, 0.6704, 0.5527, 0.5898, 0.5923, 0.5879, 0.6064, 0.5713, 0.6060, 0.6118, 0.6499, 0.5903, 0.6016, 0.6128, 0.6567, 0.5581, 0.6514, 0.6421, 0.6572, 0.6035,\n        0.6885, 0.6147, 0.6450, 0.6440, 0.6396, 0.6738, 0.6797, 0.6509, 0.6558, 0.6582, 0.6187, 0.6338, 0.5879, 0.6807, 0.6396, 0.6094, 0.6992, 0.6665, 0.6470, 0.6885, 0.6377, 0.5444, 0.6191, 0.6797, 0.5591, 0.6499, 0.6538, 0.6113, 0.6084, 0.5903, 0.6328, 0.5942, 0.6528, 0.6055, 0.6836, 0.6479, 0.6309, 0.6182, 0.5938,\n        0.6631, 0.5723, 0.6362, 0.6650, 0.6704, 0.6333, 0.6611, 0.5747, 0.6460, 0.6646, 0.6201, 0.6377, 0.6211, 0.6260, 0.6313, 0.6084, 0.6338, 0.6313, 0.6182, 0.6543, 0.6597, 0.6641, 0.6714, 0.5820, 0.5967, 0.6655, 0.6816, 0.6055, 0.6909, 0.7026, 0.6641, 0.6284, 0.6260, 0.6387, 0.6226, 0.6060, 0.6548, 0.5918, 0.6157,\n        0.6382, 0.6079, 0.6699, 0.6392, 0.6118, 0.6240, 0.6748, 0.6450, 0.5396, 0.6353, 0.6240, 0.6489, 0.6748, 0.6030, 0.6558, 0.6538, 0.6152, 0.6694, 0.6802, 0.6333, 0.6611, 0.6660, 0.6084, 0.5654, 0.6792, 0.6670, 0.5771, 0.6899, 0.6196, 0.6094, 0.6348, 0.6768, 0.6362, 0.6895, 0.6509, 0.6250, 0.6494, 0.6538, 0.6304,\n        0.6357, 0.6313, 0.5859, 0.5122, 0.6235, 0.6177, 0.6162, 0.6074, 0.6743, 0.5591, 0.6143, 0.6182, 0.7417, 0.5474, 0.6641, 0.6030, 0.6245, 0.6333, 0.6929, 0.5566, 0.6694, 0.7158, 0.6011, 0.6260, 0.5835, 0.6577, 0.6069, 0.6724, 0.6719, 0.6479, 0.6367, 0.6421, 0.6719, 0.6348, 0.6602, 0.5728, 0.6880, 0.5391, 0.6484,\n        0.5684, 0.5610, 0.7056, 0.5684, 0.6440, 0.6094, 0.6187, 0.6938, 0.6440, 0.6514, 0.6519, 0.6475, 0.5747, 0.6865, 0.5894, 0.5845, 0.5972, 0.6714, 0.6030, 0.6396, 0.6294, 0.6587, 0.6577, 0.6064, 0.5972, 0.6030, 0.6792, 0.6313, 0.6812, 0.6401, 0.6226, 0.6353, 0.6558, 0.6763, 0.6436, 0.6450, 0.5952, 0.5479, 0.5693,\n        0.6162, 0.5698, 0.6133, 0.6533, 0.6401, 0.6465, 0.6357, 0.6396, 0.5801, 0.7017, 0.6836, 0.6255, 0.5781, 0.6411, 0.6235, 0.6875, 0.6104, 0.5933, 0.6401, 0.6382, 0.6807, 0.6465, 0.6167, 0.5674, 0.5996, 0.6221, 0.6001, 0.6567, 0.6572, 0.6821, 0.6836, 0.6553, 0.6299, 0.5840, 0.7451, 0.5967, 0.6055, 0.6792, 0.6475,\n        0.6401, 0.5444, 0.5908, 0.6050, 0.6084, 0.6851, 0.6274, 0.5962, 0.6309, 0.6616, 0.6499, 0.6050, 0.6245, 0.5850, 0.6426, 0.6021, 0.6968, 0.5996, 0.6763, 0.5703, 0.5928, 0.5981, 0.6431, 0.5962, 0.6831, 0.5967, 0.5684, 0.7559, 0.5811, 0.6475, 0.6069, 0.6426, 0.6265, 0.6133, 0.5747, 0.6709, 0.5610, 0.5547, 0.6890,\n        0.6274, 0.6143, 0.6562, 0.5488, 0.6772, 0.6460, 0.6162, 0.6533, 0.5977, 0.6880, 0.6641, 0.6631, 0.6523, 0.6572, 0.6895, 0.6729, 0.6050, 0.6167, 0.6338, 0.6328, 0.6152, 0.6626, 0.6392, 0.6875, 0.5732, 0.5947, 0.6055, 0.5732, 0.6885, 0.6006, 0.6074, 0.5884, 0.5513, 0.6250, 0.5967, 0.6201, 0.6113, 0.6377, 0.6333,\n        0.6826, 0.7349, 0.6748, 0.6328, 0.6133, 0.6782, 0.6221, 0.5952, 0.6680, 0.5952, 0.6357, 0.6699, 0.5742, 0.5977, 0.6382, 0.7051, 0.6533, 0.6528, 0.6660, 0.5332, 0.5698, 0.6191, 0.6431, 0.6304, 0.6411, 0.6499, 0.6792, 0.6221, 0.5820, 0.6353, 0.6646, 0.6470, 0.6196, 0.6489, 0.6348, 0.6128, 0.5928, 0.6172, 0.6953,\n        0.6558, 0.6250, 0.6680, 0.7056, 0.6533, 0.6104, 0.6523, 0.7104, 0.5957, 0.6455, 0.6509, 0.6582, 0.6255, 0.6479, 0.6548, 0.6890, 0.6504, 0.6392, 0.6226, 0.6235, 0.6699, 0.5874, 0.6665, 0.6738, 0.6191, 0.5952, 0.6133, 0.6172, 0.5996, 0.5679, 0.6377, 0.5942, 0.6187, 0.6235, 0.5649, 0.6660, 0.6284, 0.6416, 0.6216,\n        0.5693, 0.6372, 0.5757, 0.6660, 0.7036, 0.6069, 0.6768, 0.5469, 0.6484, 0.6528, 0.6157, 0.6841, 0.6035, 0.6406, 0.6348, 0.6094, 0.6538, 0.6802, 0.6094, 0.6484, 0.5942, 0.6138, 0.6196, 0.6396, 0.6763, 0.6465, 0.6460, 0.6304, 0.6118, 0.6025, 0.6606, 0.6553, 0.6143, 0.6499, 0.6431, 0.6592, 0.5874, 0.6108, 0.6152,\n        0.6733, 0.5703, 0.5967, 0.6768, 0.5977, 0.6855, 0.6729, 0.6831, 0.6313, 0.6294, 0.6890, 0.6118, 0.6411, 0.6797, 0.6313, 0.6880, 0.6626, 0.6655, 0.6802, 0.6265, 0.6909, 0.6084, 0.6201, 0.6909, 0.6904, 0.6416, 0.5791, 0.5894, 0.5840, 0.5981, 0.6553, 0.6611, 0.6523, 0.6465, 0.6279, 0.6440, 0.6450, 0.6367, 0.6406,\n        0.6211, 0.5928, 0.6807, 0.5854, 0.6045, 0.6567, 0.6021, 0.6152, 0.6279, 0.5767, 0.5854, 0.6514, 0.6055, 0.6362, 0.5532, 0.6982, 0.6338, 0.6396, 0.7065, 0.6289, 0.5981, 0.6396, 0.6055, 0.6245, 0.6777, 0.6309, 0.6694, 0.5728, 0.6387, 0.6294, 0.5532, 0.5923, 0.6582, 0.6450, 0.6631, 0.6660, 0.6377, 0.6714, 0.6221,\n        0.6328, 0.6523, 0.6328, 0.6157, 0.6353, 0.5918, 0.5796, 0.6016, 0.6924, 0.6426, 0.6343, 0.6377, 0.6177, 0.6621, 0.6699, 0.6396, 0.6230, 0.5610, 0.6323, 0.6738, 0.6240, 0.6562, 0.6270, 0.6792, 0.5972, 0.6655, 0.6387, 0.6343, 0.7080, 0.6323, 0.6128, 0.6851, 0.6372, 0.6108, 0.6606, 0.6216, 0.6206, 0.6743, 0.6401,\n        0.6279, 0.6313, 0.6987, 0.6143, 0.5996, 0.5874, 0.6606, 0.5645, 0.6621, 0.6807, 0.5923, 0.6460, 0.6143, 0.6226, 0.6558, 0.5693, 0.6333, 0.6831, 0.6069, 0.6372, 0.5898, 0.6201, 0.6562, 0.6382, 0.6367, 0.6709, 0.6587], dtype=torch.float16), 'perceiver_resampler.layers.3.0.norm2.bias': tensor([-1.8967e-02, -4.8828e-02,  2.4929e-03, -2.4643e-02, -9.1980e-02,  6.2332e-03,  1.9424e-02, -4.8637e-03,  6.5552e-02, -1.2482e-01,  1.4153e-02, -8.7097e-02, -2.4796e-02, -1.6394e-01,  1.4282e-01, -2.5055e-02,  1.8860e-02, -1.0384e-02, -2.4368e-02, -8.7967e-03, -5.2826e-02,  6.0394e-02,  3.7201e-02,  1.8890e-02,\n        -2.9358e-02,  6.6471e-04,  1.0266e-01, -8.5571e-02,  1.7731e-02,  2.7847e-03,  1.1218e-01,  1.9141e-01, -2.7710e-02,  6.0883e-02, -5.8508e-04, -5.2246e-02,  5.9601e-02,  1.5472e-02, -2.7924e-02, -5.0323e-02, -6.9389e-03,  1.4685e-01, -4.8981e-03, -4.1199e-02, -8.1299e-02,  3.3051e-02, -9.0561e-03,  1.1299e-02,\n         5.5733e-03, -5.4717e-05,  2.0981e-02, -1.1490e-02,  1.8097e-02,  2.4719e-02, -6.4575e-02, -1.4023e-02,  3.9490e-02,  6.1859e-02, -5.8746e-02,  9.5215e-02, -1.4124e-01,  7.1983e-03,  1.1986e-02, -1.0078e-02, -6.2317e-02,  6.1859e-02,  6.2988e-02,  9.2957e-02, -1.7441e-02,  7.9346e-02, -9.1600e-04, -5.5542e-02,\n         5.2261e-03, -4.6204e-02, -7.0679e-02,  1.0307e-02, -8.5144e-02, -7.5256e-02,  2.1301e-01,  1.2207e-02, -1.7426e-02,  5.6335e-02,  2.2335e-03, -4.1962e-02,  6.0806e-03,  9.3994e-02, -6.0181e-02, -1.3318e-01, -9.2834e-02, -6.0760e-02,  1.5182e-02, -1.0498e-01, -4.8889e-02, -2.5421e-02, -7.5195e-02, -8.2336e-02,\n        -8.7463e-02,  1.0246e-02, -2.2598e-02,  7.0496e-02,  2.7893e-02, -8.7830e-02,  4.0375e-02, -1.5625e-01,  3.8261e-03, -5.3635e-03,  7.5928e-02, -2.4719e-02,  1.2744e-01,  2.0950e-02, -9.2651e-02,  3.0308e-03, -2.1286e-02, -1.8201e-01,  5.4260e-02,  7.1411e-02,  5.0537e-02, -2.2095e-02, -3.2257e-02,  7.8630e-04,\n        -1.5656e-02, -8.1177e-03, -5.4962e-02,  1.7385e-03,  3.5919e-02,  7.7271e-02, -9.8633e-02, -3.0945e-02,  3.5614e-02, -5.2765e-02, -7.1411e-02,  1.6687e-01, -6.7932e-02,  2.0187e-02, -5.5908e-02,  1.9150e-03, -5.9784e-02,  9.7534e-02, -9.4910e-02,  1.0797e-01,  4.2969e-02,  1.7426e-02, -1.5793e-02,  1.9153e-01,\n        -5.7098e-02,  3.0308e-03,  1.7197e-02, -2.0569e-02,  3.5675e-02,  4.7668e-02,  4.8096e-02,  6.9031e-02, -4.3030e-02, -6.3416e-02,  2.5223e-02, -4.9652e-02,  2.0218e-02,  5.7098e-02, -1.0480e-01, -3.2959e-02, -1.7176e-03,  1.5457e-02, -2.2827e-02,  1.2924e-02,  3.4454e-02, -3.5858e-02, -1.0551e-02, -8.2031e-02,\n        -1.3603e-02, -3.3569e-03,  4.9042e-02,  3.2837e-02, -3.6133e-02, -5.2214e-05, -1.4626e-02, -1.4246e-01, -5.7220e-02,  9.3628e-02,  4.7546e-02, -7.2693e-02,  1.2952e-01, -7.2861e-03,  3.2196e-02,  4.5319e-02,  4.0039e-02, -1.6327e-02, -5.9387e-02, -2.2491e-02, -4.9194e-02,  2.9678e-02, -8.0505e-02,  6.7749e-02,\n         3.5431e-02, -1.0086e-02,  2.9434e-02, -1.7099e-03,  1.0608e-01, -1.8829e-02,  4.9866e-02, -5.2032e-03,  1.3538e-01, -2.6840e-02, -7.6599e-02,  2.9770e-02,  7.4646e-02,  2.9358e-02, -2.8809e-02,  8.6121e-02,  2.3270e-02,  1.7105e-02, -5.7755e-03, -1.2474e-02, -9.0515e-02, -2.3956e-02, -1.3672e-02,  4.2633e-02,\n         4.1290e-02, -1.2128e-01, -9.5444e-03,  7.8064e-02, -3.9062e-02, -4.7546e-02, -2.3560e-02,  8.4534e-02, -8.7769e-02,  6.5857e-02,  1.1542e-01,  3.9124e-02,  2.8839e-02, -6.8054e-02,  9.1858e-03,  3.0411e-02, -4.0436e-03,  4.7089e-02, -4.0161e-02,  9.8206e-02,  1.0811e-02, -3.2074e-02,  7.4890e-02, -5.8929e-02,\n        -4.6539e-02,  9.9182e-02,  6.0913e-02,  1.1298e-01, -2.4048e-02,  1.2833e-02, -1.6129e-02,  1.3074e-01, -2.0355e-02,  1.2323e-01,  7.0740e-02,  1.3110e-01,  1.3580e-02,  2.7451e-02,  2.4902e-02, -5.3101e-02, -2.2774e-03,  1.2372e-01,  9.4727e-02,  2.6718e-02,  9.7427e-03,  1.0162e-01,  2.8275e-02, -3.8940e-02,\n        -1.4305e-02, -1.3464e-01,  6.1340e-02,  8.5449e-02, -8.8928e-02, -1.4435e-02, -5.8517e-03,  2.6871e-02, -1.1176e-01, -2.5192e-02,  8.1604e-02,  3.2837e-02,  6.9275e-02, -7.8918e-02,  9.1003e-02, -3.9581e-02,  3.3356e-02, -8.1909e-02,  1.1285e-01, -8.8318e-02, -5.7373e-03, -1.6037e-02, -1.1255e-01,  1.6922e-02,\n        -2.0050e-02,  4.1351e-02, -6.2317e-02,  2.4521e-02, -3.4943e-02,  1.2741e-03,  5.7251e-02,  2.3697e-02, -1.0095e-01,  3.3020e-02, -1.6739e-02,  1.1070e-02,  1.5991e-02,  2.6581e-02, -6.3660e-02, -7.6111e-02,  5.7800e-02, -8.3862e-02, -2.0554e-02,  9.4666e-02,  1.7105e-02,  8.5144e-03,  6.5247e-02,  3.2730e-03,\n        -4.6295e-02, -9.0881e-02,  7.8430e-02,  2.0068e-01, -1.6495e-02, -8.7769e-02, -1.5466e-01,  7.7148e-02,  1.5144e-02,  6.3992e-04, -9.6985e-02, -5.6061e-02, -3.4882e-02, -8.3984e-02,  2.4246e-02,  1.5289e-02, -5.2856e-02, -4.9667e-03,  1.2244e-01, -1.1395e-01,  1.5640e-02,  3.3051e-02, -5.6946e-02, -7.7209e-02,\n         4.3945e-02,  1.6647e-02,  4.4098e-02, -4.4922e-02,  7.6408e-03, -1.5717e-02, -5.5420e-02, -2.4223e-03,  6.8237e-02,  1.4885e-02, -3.9154e-02,  5.4817e-03,  4.4312e-02,  1.0999e-01,  2.8717e-02, -2.0081e-01, -7.4646e-02,  1.7838e-02,  1.4717e-02,  8.4305e-03,  1.3135e-01, -1.4319e-01,  4.6173e-02, -2.1698e-02,\n         1.0330e-02,  2.0874e-02,  6.8604e-02, -4.0627e-03, -1.4267e-02,  1.0114e-01,  3.1719e-03, -1.7609e-02,  4.1351e-02, -3.7384e-02, -7.5562e-02,  1.0490e-02,  1.9705e-04, -7.7477e-03,  2.1378e-02, -3.1311e-02, -1.1713e-01, -2.3834e-02,  4.6326e-02,  5.7869e-03, -3.5522e-02,  1.6041e-03,  6.4240e-03,  5.9174e-02,\n         2.8629e-03,  2.1500e-02, -1.3817e-02,  1.2543e-02,  1.7059e-02, -3.1681e-03,  3.1319e-03, -4.4739e-02, -2.2217e-02,  3.5095e-02,  1.4966e-01, -2.8122e-02, -8.6182e-02,  5.7556e-02, -6.8970e-02,  3.8818e-02,  2.6550e-02,  4.5395e-03,  1.3232e-01,  5.8807e-02, -8.7891e-03,  3.4046e-03,  2.3392e-02,  1.0596e-01,\n        -8.9417e-03, -1.0536e-02, -1.8585e-02, -9.4727e-02, -2.4139e-02, -2.1240e-02, -8.6731e-02, -3.5645e-02, -1.7493e-01,  1.1084e-01,  5.6458e-02,  8.8043e-03,  3.6041e-02, -7.2021e-02,  3.0396e-02, -3.8544e-02,  3.7964e-02,  1.4427e-02, -1.2372e-01,  4.2908e-02, -8.6487e-02, -9.5367e-03, -1.4392e-01,  2.4994e-02,\n         7.6218e-03, -1.2781e-01,  2.1500e-02,  1.4050e-01, -7.1106e-02, -6.8726e-02,  9.1553e-03, -1.7990e-02,  1.3721e-01, -5.6152e-02, -5.0507e-02,  8.4595e-02,  9.6512e-03, -2.2568e-02, -1.3098e-01, -4.5090e-03, -8.5205e-02,  2.5635e-03,  7.6342e-04,  3.5992e-03,  1.0168e-01,  2.9724e-02, -4.1428e-03,  1.2244e-01,\n        -4.4403e-02,  6.2988e-02, -4.8706e-02,  2.6627e-02, -9.7580e-03, -4.3854e-02,  1.0547e-01,  5.3253e-02, -4.5197e-02, -4.8615e-02,  8.0139e-02, -4.2694e-02, -1.1856e-02, -2.2781e-02,  2.9926e-03, -1.8054e-01, -2.8076e-02, -1.0352e-01, -6.0120e-03,  1.9608e-03,  1.5967e-01,  4.9469e-02,  3.8269e-02, -6.4697e-02,\n        -1.9562e-02,  6.1890e-02, -6.4758e-02, -4.3976e-02,  5.1575e-02, -1.4062e-01, -8.8623e-02,  3.2288e-02,  9.0313e-04,  4.3335e-03,  3.2227e-02, -2.2598e-02,  8.4473e-02, -1.1877e-01, -9.7839e-02,  3.6255e-02,  4.0771e-02,  6.2469e-02,  7.6599e-02,  1.2976e-01, -1.2805e-01,  4.6112e-02, -1.1151e-01,  1.1530e-01,\n         2.3468e-02,  5.5511e-02, -6.6345e-02,  3.2745e-02,  2.9739e-02,  6.3843e-02, -6.1493e-02,  7.5073e-02, -1.0394e-01,  1.8631e-02,  4.7974e-02,  2.6951e-03,  5.1994e-03,  2.9037e-02, -2.4246e-02, -8.9905e-02,  7.7576e-02, -1.8967e-02,  1.0919e-01, -6.9885e-02,  4.9805e-02, -1.2863e-02, -1.1359e-01,  5.3314e-02,\n         5.0316e-03, -1.9257e-02, -5.8075e-02, -1.2268e-01,  2.4887e-02,  3.3112e-02, -5.1758e-02, -3.0869e-02, -5.4688e-02,  9.6252e-02,  1.0872e-03,  2.3819e-02,  5.5511e-02,  2.5845e-03,  1.7029e-02, -2.6978e-02, -3.3783e-02,  2.8519e-02, -3.3295e-02,  8.9722e-03,  9.9609e-02,  4.4434e-02, -1.9470e-02, -7.8735e-02,\n         2.9373e-02,  2.7390e-02, -6.6772e-02, -1.1426e-01,  4.7485e-02, -2.4094e-02,  5.1697e-02,  3.7018e-02, -3.1677e-02, -4.2145e-02, -5.0018e-02,  6.8283e-03, -4.2603e-02,  1.9516e-02,  1.0486e-01,  2.7710e-02,  3.2654e-02,  8.8501e-02,  2.5725e-04, -8.5144e-03,  6.3416e-02,  8.6899e-03, -1.3562e-01, -1.8823e-01,\n         8.3130e-02,  6.0059e-02,  5.2277e-02, -3.9520e-02,  6.6948e-03, -1.8234e-02, -1.4511e-02,  3.9734e-02,  4.4060e-03, -7.9102e-02,  5.9296e-02,  3.0258e-02,  7.7759e-02, -2.3636e-02, -8.2626e-03, -1.0101e-01, -2.1790e-02, -4.8706e-02,  3.3630e-02, -8.9783e-02, -4.7028e-02, -3.8239e-02,  5.1819e-02, -2.1942e-02,\n         2.4002e-02, -1.8921e-02, -1.0841e-02,  1.3354e-01,  2.7893e-02,  1.3989e-01, -9.7473e-02, -6.6895e-02, -5.0049e-02,  4.5929e-02, -2.1622e-02, -8.8257e-02, -3.1204e-03,  3.2715e-02, -1.7014e-02,  4.7989e-03,  8.4167e-02,  4.5380e-02, -5.8990e-02, -1.7624e-02, -3.9642e-02, -7.1960e-02,  4.2999e-02, -1.9501e-02,\n         7.4951e-02, -2.9037e-02, -1.8906e-02, -3.6499e-02, -8.6899e-03, -9.8450e-02, -4.2953e-03, -3.2227e-02,  4.1565e-02, -2.6398e-02,  2.6321e-04,  4.1229e-02, -9.0027e-02,  2.6230e-02, -1.7554e-01, -1.9894e-03, -7.7705e-03, -3.5980e-02,  1.3161e-02, -1.0948e-02, -5.5725e-02, -1.6508e-03,  4.1534e-02,  3.9215e-02,\n        -2.3308e-03, -3.2593e-02,  1.1804e-01,  3.2440e-02,  5.4169e-02, -8.0261e-02,  1.8188e-02,  2.5879e-02, -2.8290e-02, -2.9541e-02,  3.5645e-02, -7.6782e-02,  1.2634e-02, -2.9068e-02, -1.5015e-02, -4.8309e-02, -5.2612e-02, -3.6194e-02,  3.5980e-02,  4.6631e-02,  2.7313e-02,  1.0077e-01,  7.2510e-02,  1.0718e-01,\n         6.7078e-02,  9.6313e-02, -1.5778e-02, -4.7760e-02,  1.0040e-01,  1.3928e-01, -6.6101e-02,  4.5532e-02, -1.2680e-02, -1.8829e-02,  8.4152e-03, -4.0192e-02,  1.1816e-01,  5.2223e-03, -1.4880e-01,  7.2815e-02, -3.9154e-02, -6.9763e-02,  4.2236e-02,  3.6888e-03,  3.2227e-02,  9.2407e-02,  7.0618e-02,  4.7424e-02,\n         2.7237e-02, -1.5404e-02, -4.3610e-02,  2.0218e-03,  6.4516e-04, -9.9915e-02,  8.2031e-02, -2.0828e-02,  1.0736e-01,  6.2500e-02,  1.9424e-02, -9.6817e-03,  3.0319e-02,  2.6733e-02, -1.8829e-02, -8.8501e-02,  4.4708e-02,  2.6688e-02, -2.8763e-02, -2.5177e-02, -1.8478e-02, -1.4313e-02, -2.1716e-01,  1.4868e-01,\n        -4.3304e-02,  1.9073e-03, -5.4016e-03, -8.4534e-03,  6.9153e-02,  4.3854e-02, -1.0266e-01,  7.9956e-02, -3.2990e-02,  5.9052e-03,  4.9561e-02, -1.0675e-01,  1.5820e-01,  3.0609e-02, -8.4000e-03,  4.5380e-02, -5.0430e-03,  6.2195e-02, -1.4061e-02, -2.2522e-02, -1.5778e-02,  2.1240e-01,  8.9417e-03,  2.6215e-02,\n         1.1658e-01,  8.1299e-02, -7.4341e-02,  5.9967e-02, -7.6416e-02,  4.0955e-02,  3.9597e-03, -4.1962e-02, -1.7105e-02,  1.8250e-02, -1.9028e-02,  2.8580e-02,  1.7102e-01, -6.9397e-02,  2.9892e-02,  4.0863e-02,  8.0200e-02, -4.6722e-02, -5.8105e-02, -2.6245e-02, -7.4402e-02,  9.3323e-02,  1.5100e-01, -7.6965e-02],\n       dtype=torch.float16), 'perceiver_resampler.layers.3.0.to_q.weight': tensor([[ 0.0386, -0.0179, -0.0174,  ...,  0.0194, -0.0677,  0.0275],\n        [-0.0135, -0.0568, -0.0020,  ..., -0.0047,  0.0032, -0.0115],\n        [ 0.0179, -0.0244, -0.0112,  ..., -0.0906,  0.0062,  0.0127],\n        ...,\n        [-0.0074,  0.0180, -0.0195,  ..., -0.0172, -0.0135,  0.0225],\n        [-0.0409,  0.0365,  0.0287,  ..., -0.0124,  0.0260,  0.0072],\n        [-0.0222,  0.0417,  0.0291,  ...,  0.0258,  0.0225, -0.0034]], dtype=torch.float16), 'perceiver_resampler.layers.3.0.to_kv.weight': tensor([[ 0.0409, -0.0547, -0.0110,  ..., -0.0069,  0.0216, -0.0055],\n        [-0.0392,  0.0143,  0.0070,  ..., -0.0282, -0.0337,  0.0356],\n        [ 0.0481,  0.0353,  0.0017,  ..., -0.0263,  0.0644,  0.0185],\n        ...,\n        [-0.0333, -0.0234, -0.0199,  ...,  0.0106,  0.0590,  0.0106],\n        [-0.0434,  0.0033,  0.0183,  ..., -0.0162, -0.0135,  0.0409],\n        [-0.0199,  0.0087, -0.0107,  ..., -0.0157,  0.0091,  0.0186]], dtype=torch.float16), 'perceiver_resampler.layers.3.0.to_out.weight': tensor([[-0.0442,  0.0138, -0.0303,  ...,  0.0286,  0.0154,  0.0099],\n        [-0.0356,  0.0436, -0.0408,  ..., -0.0613, -0.0045, -0.0146],\n        [-0.0327, -0.0137, -0.0378,  ..., -0.0595,  0.0145, -0.0474],\n        ...,\n        [ 0.0557,  0.0381,  0.0774,  ...,  0.0527,  0.0424,  0.0166],\n        [-0.0141,  0.0557, -0.0219,  ..., -0.0053, -0.0038, -0.0423],\n        [ 0.0601, -0.0295, -0.0213,  ...,  0.0404,  0.0591,  0.0320]], dtype=torch.float16), 'perceiver_resampler.layers.3.1.0.weight': tensor([0.7939, 0.8066, 0.7764, 0.8760, 0.7505, 0.8076, 0.8276, 0.7676, 0.7490, 0.7666, 0.8066, 0.9062, 0.7769, 0.7627, 0.7949, 0.7734, 0.8281, 0.7832, 0.7686, 0.7842, 0.8447, 0.7720, 0.7622, 0.8037, 0.8032, 0.8325, 0.7046, 0.8257, 0.7290, 0.7837, 0.7441, 0.7129, 0.8174, 0.8452, 0.8096, 0.8208, 0.7349, 0.8369, 0.8481,\n        0.8662, 0.8325, 0.7354, 0.8208, 0.7314, 0.7881, 0.7817, 0.7935, 0.9043, 0.7676, 0.7964, 0.7954, 0.7739, 0.8086, 0.8433, 0.6953, 0.8843, 0.7881, 0.8706, 0.7896, 0.7979, 0.7964, 0.8198, 0.8584, 0.7476, 0.8584, 0.8032, 0.7793, 0.8750, 0.7705, 0.9009, 0.7729, 0.8135, 0.8438, 0.8022, 0.7559, 0.7788, 0.8467, 0.8989,\n        0.8740, 0.8301, 0.8008, 0.7295, 0.8350, 0.7964, 0.8052, 0.9111, 0.7412, 0.8755, 0.9072, 0.8945, 0.9316, 0.7090, 0.8198, 0.7954, 0.8081, 0.8569, 0.7065, 0.7842, 0.7310, 0.7119, 0.8320, 0.7026, 0.7876, 0.8325, 0.7632, 0.8174, 0.8672, 0.8457, 0.9023, 0.8335, 0.7383, 0.7603, 0.7832, 0.7642, 0.8345, 0.8184, 0.8638,\n        0.8174, 0.8120, 0.7832, 0.7900, 0.8267, 0.8521, 0.8296, 0.7793, 0.8159, 0.7412, 0.8086, 0.7607, 0.8774, 0.7847, 0.7534, 0.7588, 0.8579, 0.7949, 0.7715, 0.8984, 0.7642, 0.6855, 0.7964, 0.7637, 0.7847, 0.8301, 0.7881, 0.8618, 0.8281, 0.7998, 0.8120, 0.7852, 0.7661, 0.8174, 0.8535, 0.9102, 0.7627, 0.7759, 0.8872,\n        0.8560, 0.7827, 0.7153, 0.8784, 0.8521, 0.7524, 0.7993, 0.7627, 0.7891, 0.8257, 0.8955, 0.7725, 0.7832, 0.8140, 0.7979, 0.8101, 0.8149, 0.8281, 0.8071, 0.9209, 0.7788, 0.7754, 0.7793, 0.9077, 0.7480, 0.8115, 0.8301, 0.8438, 0.7412, 0.8589, 0.7720, 0.7144, 0.8188, 0.8457, 0.8379, 0.8262, 0.8193, 0.8042, 0.8071,\n        0.8130, 0.8022, 0.8013, 0.8345, 0.7959, 0.6973, 0.7422, 0.7949, 0.9048, 0.8325, 0.7915, 0.8774, 0.7363, 0.8140, 0.7876, 0.8154, 0.7661, 0.7524, 0.8828, 0.7168, 0.8818, 0.7471, 0.7129, 0.8345, 0.8550, 0.7271, 0.8550, 0.8853, 0.7632, 0.7661, 0.8130, 0.9614, 0.8457, 0.7734, 0.7832, 0.8267, 0.8477, 0.8091, 0.8237,\n        0.8550, 0.7788, 0.7881, 0.8608, 0.9141, 0.7358, 0.7622, 0.7759, 0.7769, 0.7456, 0.8750, 0.8730, 0.8174, 0.8086, 0.7920, 0.8672, 0.6958, 0.7300, 0.7949, 0.8271, 0.8687, 0.8242, 0.8369, 0.7817, 0.7407, 0.8135, 0.8770, 0.8638, 0.8550, 0.7988, 0.7979, 0.7334, 0.8110, 0.7563, 0.7480, 0.8286, 0.7998, 0.8940, 0.8447,\n        0.7896, 0.8711, 0.8237, 0.9590, 0.7896, 0.8335, 0.8608, 0.8320, 0.8013, 0.9058, 0.9106, 0.8213, 0.7646, 0.6792, 0.7812, 0.8276, 0.8320, 0.7866, 0.8779, 0.7925, 0.8389, 0.8062, 0.8491, 0.7246, 0.7803, 0.7866, 0.7969, 0.8389, 0.8037, 0.7949, 0.7930, 0.8408, 0.7056, 0.7949, 0.8042, 0.8018, 0.8193, 0.8232, 0.7681,\n        0.7446, 0.7832, 0.9106, 0.8008, 0.8442, 0.7715, 0.7803, 0.8042, 0.8472, 0.7788, 0.8003, 0.8960, 0.9336, 0.7319, 0.8242, 0.8091, 0.7769, 0.8311, 1.0156, 0.7456, 0.8066, 0.8184, 0.7607, 0.7827, 0.8364, 0.7886, 0.8071, 0.8584, 0.7920, 0.7939, 0.8154, 0.8105, 0.8208, 0.8481, 0.7900, 0.7998, 0.8213, 0.6724, 0.8579,\n        0.7427, 0.8965, 0.8223, 0.8018, 0.7988, 0.7808, 0.7852, 0.8735, 0.8335, 0.8179, 0.7896, 0.7705, 0.8271, 0.8301, 0.6948, 0.8213, 0.7754, 0.7939, 0.7842, 0.8535, 0.8223, 0.7925, 0.8779, 0.7759, 0.8120, 0.8452, 0.8799, 0.7617, 0.8457, 0.8843, 0.8101, 0.7944, 0.8242, 0.7842, 0.8398, 0.8335, 0.7402, 0.8394, 0.8242,\n        0.8042, 0.7847, 0.8091, 0.7812, 0.9048, 0.8169, 0.7769, 0.8086, 0.6714, 0.7998, 0.8447, 0.7935, 0.7930, 0.8066, 0.8599, 0.8130, 0.7983, 0.8018, 0.8110, 0.7812, 0.8081, 0.7871, 0.8315, 0.7734, 0.8115, 0.7061, 0.8408, 0.9087, 0.8257, 0.8096, 0.8574, 0.8423, 0.7832, 0.8091, 0.7949, 0.8652, 0.6909, 0.8472, 0.7729,\n        0.8169, 0.6934, 0.8086, 0.7812, 0.7886, 0.7666, 0.8994, 0.7490, 0.8350, 0.7495, 0.8008, 0.9414, 0.7593, 0.7305, 0.7822, 0.7808, 0.8140, 0.8613, 0.8110, 0.7144, 0.8257, 0.8223, 0.8066, 0.7349, 0.7734, 0.7979, 0.8135, 0.8052, 0.6875, 0.8008, 0.7808, 0.8198, 0.7495, 0.7603, 0.7524, 0.8008, 0.7290, 0.8115, 0.8101,\n        0.8286, 0.7886, 0.8423, 0.7266, 0.8086, 0.7598, 0.7622, 0.7729, 0.8018, 0.8550, 0.8589, 0.7188, 0.7803, 0.8135, 0.8784, 0.8110, 0.7529, 0.6890, 0.7725, 0.7578, 0.8350, 0.7456, 0.8887, 0.8149, 0.7173, 0.7144, 0.7720, 0.8169, 0.8721, 0.7939, 0.9194, 0.7891, 0.7524, 0.8608, 0.7915, 0.7485, 0.7563, 0.8999, 0.8579,\n        0.8340, 0.7598, 0.7964, 0.8828, 0.8335, 0.7261, 0.8159, 0.8438, 0.8008, 0.8350, 0.8018, 0.8486, 0.8350, 0.7852, 0.8540, 0.7803, 0.7710, 0.6899, 0.8599, 0.8970, 0.7617, 0.7920, 0.8315, 0.7949, 0.8218, 0.8364, 0.8066, 0.7490, 0.7861, 0.8042, 0.7935, 0.8149, 0.8018, 0.8174, 0.7900, 0.7910, 0.7729, 0.6982, 0.8320,\n        0.7837, 0.7910, 0.9180, 0.9229, 0.8364, 0.8423, 0.8291, 0.8076, 0.7500, 0.9785, 0.9004, 0.8301, 0.8242, 0.8032, 0.7769, 0.9438, 0.8218, 0.8271, 0.7983, 0.8223, 0.7104, 0.8027, 0.7720, 0.9150, 0.8491, 0.8354, 0.7944, 0.8618, 0.8110, 0.7695, 0.9023, 0.8193, 0.7754, 0.7681, 0.8228, 0.8145, 0.7744, 0.7900, 0.7744,\n        0.6826, 0.7847, 0.7627, 0.8550, 0.8345, 0.7925, 0.8354, 0.7583, 0.8267, 0.8311, 0.7051, 0.7993, 0.8242, 0.7915, 0.9707, 0.7183, 0.8057, 0.8252, 0.7378, 0.8022, 0.7964, 0.7505, 0.7710, 0.7627, 0.7773, 0.7988, 0.8066, 0.8335, 0.7529, 0.7925, 0.8179, 0.7935, 0.8032, 0.7544, 0.8032, 0.8716, 0.7837, 0.8452, 0.8262,\n        0.8359, 0.8335, 0.8135, 0.8276, 0.7690, 0.9077, 0.8252, 0.8135, 0.8462, 0.8276, 0.8198, 0.7876, 0.8467, 0.9263, 0.7148, 0.7339, 0.8135, 0.7827, 0.8213, 0.8428, 0.9761, 0.7744, 0.7842, 0.8350, 0.8232, 0.8716, 0.6172, 0.7998, 0.7964, 0.8120, 0.7773, 0.8770, 0.8013, 0.8193, 0.7896, 0.8413, 0.8066, 0.7749, 0.8022,\n        0.8755, 0.8125, 0.8447, 0.7676, 0.6719, 0.8105, 0.7412, 0.8184, 0.7754, 0.7358, 0.7607, 0.8350, 0.8257, 0.7603, 0.7915, 0.7681, 0.8604, 0.8145, 0.7349, 0.7876, 0.8604, 0.7139, 0.8408, 0.8823, 0.7759, 0.8765, 0.7842, 0.7886, 0.8643, 0.7529, 0.6855, 0.7812, 0.7832, 0.8057, 0.8081, 0.8115, 0.7383, 0.7979, 0.7832,\n        0.7681, 0.7925, 0.8418, 0.7974, 0.7905, 0.8359, 0.8125, 0.7886, 0.8018, 0.8467, 0.7876, 0.8340, 0.7979, 0.8516, 0.8320, 0.8247, 0.7363, 0.7954, 0.8159, 0.8101, 0.8027, 0.7881, 0.8169, 0.7954, 0.7866, 0.8633, 0.8110, 0.8354, 0.8706, 0.9233, 0.7993, 0.8662, 0.8218, 0.7900, 0.8125, 0.7515, 0.7275, 0.8135, 0.7422,\n        0.7905, 0.7998, 0.8218, 0.8022, 0.7769, 0.7515, 0.8462, 0.7627, 0.7817, 0.8320, 0.8018, 0.7568, 0.8164, 0.7871, 0.8149, 0.7832, 0.8706, 0.8613, 0.7964, 0.8052, 0.7808, 0.7979, 0.8257, 0.8286, 0.6670, 0.7617, 0.7734], dtype=torch.float16), 'perceiver_resampler.layers.3.1.0.bias': tensor([ 2.0935e-02, -1.8616e-02, -2.5085e-02,  1.6907e-01,  3.4161e-03,  5.3192e-02,  2.9678e-02,  3.2898e-02,  4.4495e-02, -5.2734e-02, -1.4209e-01,  2.0239e-01, -7.6637e-03,  1.5053e-02, -7.4310e-03, -1.1926e-01,  8.3313e-02, -9.4116e-02, -9.4971e-02, -9.0881e-02,  8.5388e-02, -5.5313e-03,  9.6191e-02, -1.4160e-01,\n         1.0907e-01, -1.0693e-01,  7.7393e-02,  1.1157e-01, -4.5013e-02, -1.3806e-01,  1.8997e-02,  4.0466e-02,  1.3660e-01, -1.7102e-01, -1.3928e-01, -1.2732e-01,  1.0895e-01, -1.0358e-01,  1.1572e-01,  1.4954e-01, -2.7054e-02,  4.4464e-02,  7.2266e-02, -6.6833e-02, -5.8075e-02,  1.2720e-01,  4.7150e-03, -1.2866e-01,\n        -7.5928e-02,  4.6936e-02, -2.0981e-02, -1.9241e-02, -2.1530e-02, -8.0688e-02, -8.8867e-02, -1.2445e-01,  6.6833e-02, -1.6846e-01,  4.9194e-02,  3.0914e-02,  7.1106e-02, -1.0779e-01, -9.3689e-02, -3.5004e-02,  1.4478e-01, -9.0088e-02,  9.0027e-03, -1.0767e-01, -5.7861e-02, -1.2939e-01,  6.4636e-02,  4.7516e-02,\n        -5.6427e-02,  9.2346e-02, -6.5552e-02,  1.5747e-02,  7.3669e-02,  1.6150e-01, -8.4290e-02, -1.3062e-01, -6.9580e-02,  1.1584e-01, -1.3257e-01,  1.1787e-02, -1.1115e-01, -1.6699e-01, -3.3905e-02,  1.5125e-01,  2.0837e-01,  1.7627e-01, -2.3047e-01, -7.3975e-02, -1.2976e-01,  1.0796e-02,  1.6174e-02,  1.4795e-01,\n        -8.9050e-02,  1.2122e-01,  1.1438e-01, -3.6407e-02, -6.9702e-02, -1.2415e-01, -2.4399e-02,  8.3618e-02, -1.2213e-01, -9.8755e-02, -1.2915e-01,  9.6558e-02, -1.6235e-01, -1.2207e-01, -8.0566e-03,  5.2338e-03,  1.4282e-02,  3.9581e-02, -1.2036e-01,  7.0923e-02, -1.1670e-01,  6.5369e-02, -3.5400e-02,  1.0901e-01,\n         9.6191e-02,  1.1627e-01,  9.7961e-02,  1.5332e-01,  5.6610e-02, -1.0767e-01, -4.3884e-02,  1.3818e-01,  1.1505e-01,  1.9946e-01, -7.7881e-02, -2.5085e-02, -6.7139e-03, -1.9446e-01,  8.2626e-03,  3.9215e-02,  1.7578e-01, -5.6824e-02, -5.2948e-02,  1.6754e-02, -1.1024e-02, -6.2683e-02, -1.1237e-01, -4.0649e-02,\n         1.5002e-01,  5.0201e-02, -3.6285e-02,  8.5388e-02,  1.7166e-02,  2.3941e-02, -6.7017e-02, -1.8762e-01,  1.8359e-01,  1.5222e-01,  5.8960e-02,  1.6162e-01, -1.9202e-01,  1.0216e-02, -7.1350e-02,  1.7224e-01,  1.3977e-01,  1.1047e-01, -1.2238e-02,  1.2494e-01, -1.6891e-02,  9.9854e-02,  1.5466e-01, -2.8687e-02,\n        -5.5054e-02, -1.6040e-01,  4.9896e-02, -8.8684e-02, -1.0870e-01, -2.1801e-03,  1.2445e-01,  2.0544e-01,  5.6671e-02,  5.7173e-04, -1.4473e-02,  2.3071e-01,  8.1238e-02, -4.4830e-02, -1.5051e-01, -1.5149e-01,  3.5492e-02,  1.5503e-01, -1.1310e-01,  1.0675e-01, -6.1676e-02, -4.9530e-02,  6.2370e-03, -2.7267e-02,\n        -8.3130e-02,  1.4185e-01,  1.2598e-01, -8.0139e-02, -9.5337e-02,  8.4045e-02, -2.8503e-02, -2.6993e-02,  5.4596e-02, -8.7524e-02, -5.3596e-03, -1.8542e-01, -9.9426e-02,  4.8920e-02,  1.0791e-01,  1.2012e-01, -4.8401e-02, -6.0120e-02, -8.6243e-02,  8.3237e-03, -4.0833e-02,  1.2708e-01, -7.8674e-02, -1.1542e-01,\n         5.4993e-02, -7.3425e-02,  2.3712e-02, -1.5454e-01,  6.3660e-02,  1.1157e-01,  1.0431e-01, -1.7822e-02, -2.1610e-03, -9.1370e-02, -2.1936e-01, -6.3599e-02,  7.3975e-02, -7.2510e-02, -5.3375e-02, -1.9922e-01, -1.2097e-01, -1.1768e-01,  8.0566e-02,  2.7218e-03,  3.5973e-03,  1.8958e-01, -1.9543e-01, -8.5571e-02,\n         2.3010e-02,  4.7241e-02, -1.1127e-01,  2.4307e-04,  1.5698e-01, -1.0242e-01, -1.2177e-01, -2.2568e-02,  1.0254e-01, -1.1499e-01,  7.5562e-02,  5.2032e-02, -1.0242e-01, -9.9365e-02, -1.7700e-01,  4.1962e-02,  1.4307e-01, -2.7008e-02,  7.2632e-02, -5.8472e-02,  1.9055e-01,  6.1035e-03, -2.2070e-01, -2.7206e-02,\n         1.1438e-01, -1.1401e-01, -6.9275e-02, -4.4983e-02, -4.9591e-02, -9.6130e-02, -1.0352e-01, -2.0801e-01,  1.1029e-01,  9.3384e-02, -1.8469e-01,  9.5703e-02, -2.4048e-01, -9.9426e-02, -4.7974e-02,  2.0398e-01,  2.2919e-02,  1.5430e-01, -1.9434e-01,  1.7371e-01,  1.8091e-01, -4.6204e-02, -5.7343e-02,  2.9724e-02,\n        -1.4917e-01, -7.0251e-02,  6.3110e-02, -1.7322e-01,  9.3811e-02,  1.0046e-01,  1.0822e-01, -1.3245e-01, -5.8293e-05, -8.0811e-02, -1.6800e-02,  9.6863e-02,  6.6650e-02,  1.3196e-01, -3.9307e-02,  6.7444e-02, -3.0380e-02, -2.0897e-04,  1.8930e-03, -1.7471e-02,  2.6369e-04,  1.3464e-01, -1.0950e-01,  8.6853e-02,\n        -5.0598e-02, -1.0236e-01, -1.8018e-01, -6.1432e-02,  1.2292e-01, -9.4070e-03,  1.0175e-01, -7.6965e-02, -1.5881e-01,  1.1230e-01,  2.2903e-02,  2.1265e-01,  1.7969e-01, -4.0283e-02, -8.5266e-02,  7.8796e-02, -1.1072e-01, -8.5144e-02, -1.7957e-01,  2.8488e-02, -8.6121e-02, -1.0040e-02, -5.1758e-02, -4.4525e-02,\n         1.4075e-01, -3.6278e-03, -1.0614e-01,  1.0364e-01,  6.0699e-02,  1.2646e-01,  1.2500e-01,  1.5839e-02, -2.5513e-02, -1.4026e-01, -2.3079e-03, -1.4929e-01,  4.2801e-03,  5.2643e-02, -6.3416e-02, -2.2858e-02,  1.8665e-01,  1.0962e-01, -8.4229e-02,  1.3086e-01, -1.0475e-02, -3.4695e-03, -8.2520e-02,  2.0660e-02,\n        -1.4062e-01,  2.9922e-02,  1.4381e-02, -1.1554e-01,  2.8732e-02,  4.5868e-02, -1.3367e-01, -3.4363e-02, -4.5837e-02,  5.5084e-02,  1.7041e-01, -4.8309e-02, -2.6150e-03,  2.2986e-01,  8.4290e-02, -4.5837e-02,  7.6904e-02,  1.2164e-01,  1.8112e-02,  9.0454e-02,  1.6467e-01, -3.1082e-02,  2.0493e-02, -1.1719e-01,\n        -3.3417e-03, -9.9243e-02,  1.1243e-01, -5.4504e-02, -1.1371e-01,  9.1858e-02,  5.6915e-02,  1.4026e-01,  1.7102e-01,  1.2070e-02, -1.5552e-01, -1.1414e-01, -7.3242e-02, -1.1406e-02, -5.3833e-02, -1.4246e-01, -6.2561e-02, -1.2756e-01, -8.8806e-02, -1.8091e-01,  1.5967e-01,  1.0651e-01,  9.8145e-02,  2.5833e-02,\n         1.4626e-02,  7.1716e-02, -1.3843e-01,  1.8884e-01, -1.2463e-01,  1.6907e-01,  1.6504e-01, -1.3977e-02,  1.1987e-01, -1.5112e-01, -1.0071e-01, -1.7090e-01, -1.3269e-01,  7.2937e-02,  1.1676e-01,  8.2520e-02,  1.3367e-01, -1.5894e-01, -5.7556e-02, -1.8408e-01,  1.0461e-01,  5.3589e-02, -8.3435e-02, -4.4464e-02,\n        -1.1511e-01, -4.0222e-02,  1.8225e-01, -1.2549e-01, -3.7720e-02,  1.2939e-01, -9.4788e-02, -9.8450e-02, -1.5857e-01, -6.0852e-02, -8.9844e-02,  1.0691e-03,  2.1866e-02,  6.2103e-02,  1.1145e-01,  1.1711e-02, -8.4351e-02,  1.3782e-01,  3.6926e-03,  4.7729e-02,  5.4871e-02,  3.8055e-02, -1.7981e-01, -1.8091e-01,\n        -5.6122e-02, -5.8990e-02,  7.8247e-02, -9.8755e-02,  1.1060e-01, -6.7810e-02,  1.0156e-01,  2.3972e-02,  1.4453e-01, -4.6448e-02, -1.5747e-02,  8.4839e-02,  1.1237e-01,  8.7402e-02,  1.1078e-01,  6.0577e-03,  1.0986e-01, -3.5492e-02,  1.9730e-02,  2.0477e-02, -3.4729e-02, -1.0748e-01, -4.5746e-02, -1.2497e-02,\n        -9.7046e-02, -7.5439e-02,  6.8909e-02, -2.4597e-02,  1.2158e-01, -2.8900e-02, -1.6663e-02, -1.2772e-02, -9.9792e-02,  2.8122e-02, -2.3779e-01, -7.8308e-02,  7.6599e-02, -2.9633e-02,  8.2932e-03, -1.6089e-01, -1.3525e-01, -1.1182e-01, -2.1289e-01, -2.1042e-02, -2.2964e-02, -1.5564e-01,  1.3049e-01, -4.9072e-02,\n         6.5727e-03, -1.8115e-01,  1.6101e-01,  1.0663e-01, -8.0627e-02, -4.9057e-03,  1.7920e-01, -1.3525e-01, -8.6731e-02, -1.3452e-01, -1.4783e-01,  1.8848e-01, -9.5032e-02, -6.4270e-02, -1.2561e-01,  5.9143e-02, -1.1578e-01,  1.0681e-01,  6.9824e-02,  4.5868e-02,  7.1655e-02, -1.4319e-01,  1.8567e-01,  1.1438e-01,\n         3.5763e-03,  1.2866e-01,  7.7454e-02,  8.0750e-02, -1.0626e-01,  7.5836e-03, -7.4768e-02,  5.2124e-02, -6.2073e-02,  1.1243e-01, -3.6194e-02, -1.3025e-01, -4.8706e-02,  1.5649e-01,  3.8696e-02, -8.8928e-02, -4.7455e-02, -1.1664e-01, -5.3894e-02, -2.6978e-02, -1.6626e-01, -1.8298e-01, -9.5886e-02,  1.3232e-01,\n         5.4016e-02,  6.8298e-02, -1.1755e-01,  2.1643e-01, -1.8286e-01,  1.6626e-01, -1.1670e-01, -3.0098e-03, -7.0129e-02,  2.1484e-01,  3.3630e-02, -5.5176e-02,  5.2673e-02,  4.8401e-02,  6.7688e-02,  5.5603e-02, -5.8784e-03, -1.9482e-01, -8.8989e-02,  8.0750e-02,  7.0068e-02, -1.0779e-01,  1.1658e-01,  6.7871e-02,\n        -1.7798e-01, -7.4402e-02,  2.4166e-03,  5.0468e-03,  8.8013e-02,  1.8311e-01,  6.3232e-02, -1.3321e-02,  1.2671e-01, -2.7359e-02, -9.9426e-02,  8.7158e-02, -1.2421e-01,  6.5125e-02, -1.3904e-01,  6.7993e-02, -9.9487e-02,  7.6355e-02,  1.0046e-01,  8.9111e-03,  9.2224e-02,  1.0742e-01, -1.4931e-02,  2.1277e-01,\n        -1.1157e-01,  2.4811e-02,  1.5845e-01,  6.5308e-02, -9.2712e-02, -2.1271e-02, -2.0782e-02, -9.5276e-02, -2.6062e-02,  3.7720e-02,  1.1663e-03, -2.9495e-02, -1.2537e-01,  8.7341e-02, -7.4829e-02,  1.1810e-01,  2.9556e-02, -1.2225e-01,  5.0903e-02, -1.6647e-02,  7.6660e-02, -1.1646e-01, -1.6724e-01, -9.6680e-02,\n         1.4236e-02,  1.3000e-01, -5.6114e-03,  2.8198e-02, -1.1169e-01,  1.4282e-01, -3.8666e-02,  6.4148e-02, -4.7028e-02,  1.5308e-01, -1.5723e-01,  9.4055e-02,  9.2651e-02, -2.4292e-01,  1.0292e-02,  9.3613e-03, -8.8272e-03,  1.1206e-01, -7.3814e-03,  1.0876e-01,  2.3450e-01, -9.9304e-02,  1.7746e-02, -9.2468e-02,\n        -1.6309e-01,  1.3513e-01,  2.4994e-02,  2.5543e-02, -6.9763e-02,  6.3477e-02, -1.9026e-03,  1.4893e-01, -5.9570e-02, -3.5187e-02,  1.1505e-02,  1.3135e-01, -8.9600e-02,  1.2520e-02, -9.3079e-02,  1.3562e-01,  1.1377e-01,  1.2854e-01,  1.1096e-01, -4.0436e-02,  2.0660e-02, -3.6163e-02, -7.6660e-02, -4.8431e-02,\n         6.9580e-02,  5.9143e-02,  1.4734e-01,  1.2537e-01,  1.0596e-01, -7.2327e-02, -5.0415e-02, -3.4302e-02, -2.1027e-02, -1.1511e-01, -3.7872e-02,  1.7004e-01,  2.8900e-02, -7.6355e-02,  1.0864e-01,  2.2537e-02,  1.9946e-01, -6.2469e-02,  1.1273e-01, -8.3237e-03,  3.3081e-02,  5.1117e-02,  8.7341e-02,  6.5689e-03,\n         7.0129e-02, -2.4612e-02,  7.6416e-02,  4.3121e-02, -7.3486e-02,  2.0111e-02,  6.5369e-02,  3.7842e-02, -1.1719e-01, -6.1378e-03,  1.2250e-01,  1.2720e-01, -6.7520e-03, -2.9556e-02, -4.4952e-02,  6.5247e-02, -2.9251e-02,  1.2756e-01,  7.9102e-02,  7.5134e-02,  1.0388e-01, -7.3792e-02,  1.5251e-02,  1.6541e-02,\n         1.3037e-01,  1.6541e-01,  3.5278e-02, -1.0889e-01, -9.5978e-03, -1.1548e-01, -7.1678e-03, -1.9336e-01,  1.0693e-01, -1.7310e-01, -1.4001e-01,  2.0764e-01, -9.2346e-02,  2.0251e-01, -1.0614e-01,  6.3538e-02,  9.1431e-02,  9.4910e-02,  9.1309e-02,  1.1444e-01, -3.6438e-02, -5.8716e-02, -6.0059e-02, -4.2084e-02,\n        -3.2959e-03,  8.0872e-02,  3.9139e-03, -1.1554e-01, -6.6528e-02,  8.5266e-02, -8.5449e-02,  1.5533e-02, -7.8857e-02, -8.8440e-02,  8.4106e-02,  1.7456e-01, -5.4688e-02,  1.1810e-01, -1.7346e-01, -1.2195e-01, -8.6426e-02,  9.3994e-02, -6.5063e-02,  4.5135e-02,  1.0419e-01,  6.5804e-03, -1.2108e-02,  2.4094e-02],\n       dtype=torch.float16), 'perceiver_resampler.layers.3.1.1.weight': tensor([[-0.0322, -0.0437, -0.0197,  ..., -0.0043,  0.0517, -0.0419],\n        [ 0.0536,  0.0302, -0.0020,  ...,  0.0126,  0.0499, -0.0424],\n        [-0.0124, -0.0222,  0.0005,  ...,  0.0091, -0.0066, -0.0098],\n        ...,\n        [-0.0009,  0.0446,  0.0613,  ..., -0.0051,  0.0278,  0.0296],\n        [ 0.0334,  0.0059, -0.0445,  ...,  0.0316,  0.0006, -0.0243],\n        [ 0.0090,  0.0136,  0.0447,  ...,  0.0454, -0.0065,  0.0046]], dtype=torch.float16), 'perceiver_resampler.layers.3.1.3.weight': tensor([[-0.0043, -0.0175,  0.0053,  ...,  0.0230, -0.0069,  0.0076],\n        [-0.0277, -0.0464,  0.0064,  ..., -0.0082, -0.0087,  0.0188],\n        [ 0.0004, -0.0076, -0.0089,  ...,  0.0115,  0.0164,  0.0320],\n        ...,\n        [ 0.0355,  0.0283, -0.0493,  ...,  0.0159, -0.0205,  0.0029],\n        [ 0.0559, -0.0486, -0.0224,  ...,  0.0228,  0.0062, -0.0037],\n        [-0.0226,  0.0041,  0.0044,  ..., -0.0124, -0.0036,  0.0327]], dtype=torch.float16)}, 'ip_adapter': {'0.to_q_lora.down.weight': tensor([[-0.0083, -0.0340, -0.0008,  ..., -0.0457,  0.0269,  0.0078],\n        [-0.0006,  0.0085, -0.0652,  ...,  0.0388, -0.0289,  0.0378],\n        [ 0.0127, -0.0153, -0.0151,  ..., -0.0001,  0.0084,  0.0513],\n        ...,\n        [-0.0022,  0.0599, -0.0169,  ...,  0.0137, -0.0083, -0.0359],\n        [ 0.0024, -0.0182,  0.0214,  ...,  0.0252, -0.0084, -0.0355],\n        [ 0.0003,  0.0338,  0.0332,  ..., -0.0763, -0.0269,  0.0018]], dtype=torch.float16), '0.to_q_lora.up.weight': tensor([[ 0.0347,  0.0541,  0.0391,  ...,  0.0062,  0.0078,  0.0328],\n        [ 0.0497,  0.0592,  0.0225,  ...,  0.0158, -0.1052,  0.0530],\n        [ 0.0105,  0.0356,  0.0318,  ...,  0.0231, -0.0152, -0.0042],\n        ...,\n        [-0.0160,  0.0340,  0.0046,  ..., -0.0273,  0.0198, -0.0226],\n        [ 0.0020,  0.0014,  0.0014,  ..., -0.0037,  0.0035,  0.0080],\n        [ 0.0063,  0.0360, -0.0784,  ...,  0.0332, -0.0166,  0.0634]], dtype=torch.float16), '0.to_k_lora.down.weight': tensor([[-0.0357,  0.0169,  0.0457,  ...,  0.0352, -0.0088,  0.0009],\n        [ 0.0182,  0.0141,  0.0091,  ..., -0.0181, -0.0045,  0.0092],\n        [-0.0131, -0.0286,  0.0040,  ...,  0.0561, -0.0492,  0.0029],\n        ...,\n        [ 0.0090, -0.0320, -0.0104,  ..., -0.0110,  0.0381,  0.0427],\n        [ 0.0077, -0.0180,  0.0090,  ...,  0.0033,  0.0544,  0.0151],\n        [ 0.0155, -0.0710, -0.0267,  ..., -0.0367, -0.0011, -0.0070]], dtype=torch.float16), '0.to_k_lora.up.weight': tensor([[ 0.0473,  0.0066,  0.0140,  ...,  0.0343, -0.0673,  0.0008],\n        [ 0.0100,  0.0220,  0.0316,  ..., -0.0334,  0.0222, -0.0088],\n        [ 0.0765, -0.0349, -0.0074,  ..., -0.0158,  0.0199, -0.0183],\n        ...,\n        [-0.0395,  0.0088, -0.0113,  ...,  0.0056,  0.0349, -0.0163],\n        [ 0.0003,  0.0099, -0.0176,  ...,  0.0039,  0.0116, -0.0260],\n        [-0.0438, -0.0121, -0.0238,  ...,  0.0091,  0.0506, -0.0126]], dtype=torch.float16), '0.to_v_lora.down.weight': tensor([[-0.0158,  0.0020,  0.0022,  ...,  0.0025, -0.0108,  0.0253],\n        [ 0.0041,  0.0333,  0.0105,  ..., -0.0426, -0.0345,  0.0067],\n        [-0.0217,  0.0132,  0.0196,  ...,  0.0262, -0.0340,  0.0329],\n        ...,\n        [ 0.0195, -0.0055, -0.0214,  ..., -0.0635, -0.0191,  0.0083],\n        [ 0.0293, -0.0016, -0.0177,  ...,  0.0546,  0.0313, -0.0203],\n        [ 0.0094, -0.0258,  0.0036,  ..., -0.0187, -0.0152,  0.0160]], dtype=torch.float16), '0.to_v_lora.up.weight': tensor([[ 0.0146, -0.0312, -0.0091,  ...,  0.0098, -0.0402, -0.0022],\n        [-0.0155, -0.0289,  0.0009,  ..., -0.0085,  0.0067, -0.0488],\n        [ 0.0150,  0.0123, -0.0187,  ..., -0.0140,  0.0169,  0.0057],\n        ...,\n        [-0.0355,  0.0093, -0.0113,  ..., -0.0174, -0.0232,  0.0183],\n        [ 0.0022, -0.0271, -0.0435,  ..., -0.0404,  0.0113,  0.0006],\n        [ 0.0194,  0.0343,  0.0051,  ..., -0.0091, -0.0049, -0.0606]], dtype=torch.float16), '0.to_out_lora.down.weight': tensor([[-0.0206, -0.0316, -0.0614,  ..., -0.0508,  0.0531,  0.0112],\n        [-0.0060,  0.0432, -0.0080,  ..., -0.0287, -0.0403,  0.0237],\n        [-0.0256,  0.0532,  0.0023,  ...,  0.0211, -0.0130,  0.0291],\n        ...,\n        [-0.0271,  0.0031, -0.0259,  ..., -0.0264, -0.0214, -0.0312],\n        [ 0.0397, -0.0135, -0.0009,  ..., -0.0815,  0.0292,  0.0223],\n        [-0.0273, -0.0252,  0.0330,  ..., -0.0005,  0.0133,  0.0700]], dtype=torch.float16), '0.to_out_lora.up.weight': tensor([[-0.0191, -0.0210,  0.0496,  ..., -0.0087, -0.0202,  0.0322],\n        [ 0.0031, -0.0204,  0.0136,  ..., -0.0051, -0.0091, -0.0129],\n        [-0.0106, -0.0472, -0.0279,  ..., -0.0480, -0.0178,  0.0009],\n        ...,\n        [ 0.0343,  0.0047, -0.0153,  ..., -0.0076, -0.0089, -0.0075],\n        [-0.0126, -0.0089,  0.0114,  ...,  0.0207, -0.0172, -0.0101],\n        [-0.0011,  0.0274, -0.0397,  ...,  0.0220, -0.0067,  0.0104]], dtype=torch.float16), '1.to_q_lora.down.weight': tensor([[-0.0070, -0.0288, -0.0152,  ..., -0.0521, -0.0058,  0.0133],\n        [-0.0147,  0.0085, -0.0309,  ...,  0.0304,  0.0230, -0.0207],\n        [-0.0309, -0.0248,  0.0064,  ...,  0.0159,  0.0003, -0.0388],\n        ...,\n        [-0.0800,  0.0439, -0.0122,  ...,  0.0243,  0.0046, -0.0456],\n        [ 0.0122, -0.0224,  0.0148,  ...,  0.0446,  0.0591, -0.0587],\n        [-0.0204,  0.0176,  0.0243,  ...,  0.0427, -0.0271, -0.0294]], dtype=torch.float16), '1.to_q_lora.up.weight': tensor([[-1.7948e-03,  6.9580e-03, -3.0899e-02,  ..., -3.3188e-03,  2.9968e-02, -1.3351e-02],\n        [-6.0654e-03,  3.1281e-02,  4.2053e-02,  ..., -2.4643e-02, -5.1361e-02, -1.6785e-02],\n        [ 2.0844e-02, -3.1769e-02,  3.4542e-03,  ...,  1.1314e-02,  1.8417e-02,  1.6575e-03],\n        ...,\n        [-3.8666e-02,  1.8997e-02,  2.2385e-02,  ..., -8.1711e-03, -1.8082e-02, -1.3817e-02],\n        [-4.0855e-03, -8.1003e-05, -1.6146e-03,  ..., -8.6365e-03,  1.3191e-02, -1.1360e-02],\n        [-1.2459e-02,  2.3285e-02, -9.0485e-03,  ..., -5.6038e-03,  4.1565e-02,  7.1335e-03]], dtype=torch.float16), '1.to_k_lora.down.weight': tensor([[ 0.0417,  0.0344, -0.0069,  ..., -0.0188,  0.0256,  0.0169],\n        [ 0.0096, -0.0132,  0.0456,  ...,  0.0283,  0.0222, -0.0252],\n        [ 0.0105,  0.0699, -0.0793,  ..., -0.0422, -0.0141, -0.0124],\n        ...,\n        [-0.0098, -0.0652,  0.0206,  ..., -0.0295, -0.0274,  0.0256],\n        [ 0.0350, -0.0076, -0.0437,  ...,  0.0026,  0.0315,  0.0055],\n        [ 0.0132, -0.0159,  0.0480,  ..., -0.0344, -0.0062, -0.0196]], dtype=torch.float16), '1.to_k_lora.up.weight': tensor([[ 0.0256,  0.0703,  0.0474,  ...,  0.1281,  0.0234,  0.0753],\n        [-0.0015, -0.0087,  0.0188,  ...,  0.0728,  0.0195, -0.0004],\n        [ 0.0152,  0.0053, -0.0080,  ...,  0.0136, -0.0146, -0.0195],\n        ...,\n        [ 0.0201,  0.0103, -0.0080,  ...,  0.0068, -0.0054,  0.0206],\n        [ 0.0174,  0.0311, -0.0281,  ..., -0.0448, -0.0195, -0.0079],\n        [ 0.0019,  0.0022,  0.0022,  ...,  0.0314,  0.0500, -0.0289]], dtype=torch.float16), '1.to_v_lora.down.weight': tensor([[ 0.0144,  0.0100,  0.0160,  ...,  0.0179, -0.0427,  0.0188],\n        [-0.0136, -0.0156,  0.0408,  ..., -0.0082, -0.0191, -0.0264],\n        [-0.0063,  0.0022, -0.0161,  ...,  0.0047,  0.0250, -0.0056],\n        ...,\n        [ 0.0094,  0.0002,  0.0211,  ...,  0.0061, -0.0138, -0.0212],\n        [-0.0156,  0.0028, -0.0011,  ..., -0.0279,  0.0113,  0.0029],\n        [-0.0118, -0.0336, -0.0221,  ..., -0.0046,  0.0159,  0.0217]], dtype=torch.float16), '1.to_v_lora.up.weight': tensor([[-0.0008,  0.0039, -0.0132,  ..., -0.0139, -0.0274,  0.0126],\n        [ 0.0190, -0.0387, -0.0103,  ...,  0.0164, -0.0022,  0.0074],\n        [-0.0199,  0.0016,  0.0127,  ..., -0.0343, -0.0012, -0.0025],\n        ...,\n        [ 0.0296,  0.0017, -0.0004,  ...,  0.0312, -0.0120,  0.0071],\n        [ 0.0182, -0.0072, -0.0263,  ..., -0.0051,  0.0232, -0.0424],\n        [ 0.0131, -0.0083, -0.0098,  ...,  0.0063, -0.0061,  0.0236]], dtype=torch.float16), '1.to_out_lora.down.weight': tensor([[-0.0182,  0.0056, -0.0116,  ...,  0.0112, -0.0276,  0.0047],\n        [ 0.0002, -0.0403,  0.0034,  ..., -0.0229, -0.0321,  0.0327],\n        [ 0.0141, -0.0162,  0.0267,  ..., -0.0074,  0.0293, -0.0012],\n        ...,\n        [-0.0055,  0.0240,  0.0310,  ...,  0.0350, -0.0039, -0.0285],\n        [ 0.0001, -0.0103, -0.0059,  ...,  0.0163, -0.0262,  0.0144],\n        [-0.0145,  0.0084, -0.0149,  ..., -0.0104, -0.0035, -0.0056]], dtype=torch.float16), '1.to_out_lora.up.weight': tensor([[-2.6520e-02, -1.0338e-02,  9.0241e-05,  ..., -4.9477e-03, -2.9388e-02,  2.4933e-02],\n        [-1.1959e-03,  3.8948e-03,  2.8549e-02,  ..., -1.3878e-02, -2.2736e-02,  3.4409e-03],\n        [ 1.0582e-02, -2.6566e-02,  1.7975e-02,  ...,  5.7564e-03, -2.4536e-02,  9.2163e-03],\n        ...,\n        [-1.2421e-02,  1.7471e-02,  3.0899e-02,  ..., -5.4741e-03,  2.1484e-02, -1.9821e-02],\n        [ 3.3798e-03, -1.3763e-02,  7.0801e-03,  ..., -8.6546e-04,  1.1681e-02, -3.4576e-02],\n        [-3.3569e-02,  3.9490e-02,  3.3569e-02,  ..., -2.8656e-02,  1.9135e-02,  3.4962e-03]], dtype=torch.float16), '1.to_k_ip.weight': tensor([[-0.0012,  0.0028,  0.0191,  ..., -0.0283, -0.0695, -0.1240],\n        [ 0.0163, -0.0452, -0.0709,  ..., -0.0866,  0.0860,  0.1132],\n        [-0.0317,  0.0233,  0.0203,  ..., -0.0282,  0.0212, -0.0451],\n        ...,\n        [-0.0419,  0.1031, -0.0316,  ..., -0.0422, -0.0124, -0.0270],\n        [ 0.0013,  0.0603, -0.0479,  ...,  0.0206,  0.0181, -0.0554],\n        [ 0.0381, -0.0086,  0.0709,  ..., -0.0477, -0.0379, -0.0657]], dtype=torch.float16), '1.to_v_ip.weight': tensor([[ 0.0232,  0.0130, -0.0120,  ...,  0.0298,  0.0013,  0.0156],\n        [-0.0285, -0.0284,  0.0332,  ..., -0.0126,  0.0185, -0.0109],\n        [-0.0119, -0.0229, -0.0602,  ..., -0.0703, -0.0301,  0.0040],\n        ...,\n        [ 0.0540, -0.0362, -0.0247,  ..., -0.0556,  0.0670,  0.0755],\n        [ 0.0281, -0.0139,  0.0426,  ...,  0.0177,  0.0703, -0.0274],\n        [-0.0337, -0.0100,  0.0585,  ...,  0.0645,  0.0056, -0.0118]], dtype=torch.float16), '2.to_q_lora.down.weight': tensor([[-0.0174, -0.0211, -0.0003,  ...,  0.0426, -0.0094, -0.0244],\n        [-0.0084,  0.0201,  0.0252,  ...,  0.0536, -0.0475,  0.0305],\n        [ 0.0097, -0.0007,  0.0367,  ...,  0.0075, -0.0059,  0.0041],\n        ...,\n        [ 0.0231, -0.0169, -0.0461,  ..., -0.0161,  0.0066, -0.0165],\n        [-0.0141,  0.0002, -0.0404,  ..., -0.0149, -0.0359,  0.0201],\n        [-0.0424,  0.0416,  0.0210,  ...,  0.0548,  0.0354, -0.0080]], dtype=torch.float16), '2.to_q_lora.up.weight': tensor([[-0.0057,  0.0348,  0.0144,  ...,  0.0267, -0.0127,  0.0495],\n        [ 0.0210,  0.0446, -0.0231,  ..., -0.0011, -0.0077, -0.0162],\n        [-0.0008,  0.0108, -0.0334,  ...,  0.0384, -0.0040,  0.0428],\n        ...,\n        [ 0.0298,  0.0129, -0.0488,  ...,  0.0009, -0.0003,  0.0044],\n        [ 0.0297, -0.0195,  0.0269,  ...,  0.0083, -0.0025,  0.0193],\n        [ 0.0119,  0.0226, -0.0002,  ...,  0.0380, -0.0089,  0.0167]], dtype=torch.float16), '2.to_k_lora.down.weight': tensor([[-0.0033,  0.0243, -0.0199,  ..., -0.0475,  0.0123, -0.0156],\n        [ 0.0267, -0.0450,  0.0047,  ...,  0.0135, -0.0463, -0.0370],\n        [-0.0065,  0.0039,  0.0066,  ..., -0.0402, -0.0330, -0.0217],\n        ...,\n        [ 0.0006, -0.0040, -0.0604,  ...,  0.0118, -0.0088,  0.0158],\n        [-0.0009,  0.0501, -0.0350,  ...,  0.0245,  0.0119, -0.0387],\n        [ 0.0240,  0.0221, -0.0020,  ..., -0.0107,  0.0209, -0.0619]], dtype=torch.float16), '2.to_k_lora.up.weight': tensor([[-0.0305,  0.0177, -0.0265,  ...,  0.0218,  0.0110, -0.0369],\n        [ 0.0010, -0.0404, -0.0116,  ..., -0.0071, -0.0090, -0.0158],\n        [-0.0446, -0.0243, -0.0064,  ...,  0.0089,  0.0329, -0.0040],\n        ...,\n        [ 0.0164,  0.0158,  0.0121,  ...,  0.0367,  0.0211, -0.0284],\n        [-0.0127,  0.0367,  0.0351,  ..., -0.0018,  0.0021,  0.0252],\n        [ 0.0182,  0.0415, -0.0013,  ..., -0.0257, -0.0119, -0.0033]], dtype=torch.float16), '2.to_v_lora.down.weight': tensor([[-0.0018,  0.0040,  0.0006,  ..., -0.0272, -0.0138, -0.0175],\n        [ 0.0079,  0.0052, -0.0533,  ..., -0.0482,  0.0227, -0.0248],\n        [-0.0064,  0.0106,  0.0202,  ...,  0.0638,  0.0276, -0.0096],\n        ...,\n        [-0.0038,  0.0358, -0.0501,  ...,  0.0080, -0.0136, -0.0238],\n        [ 0.0230,  0.0031, -0.0083,  ..., -0.0084,  0.0024,  0.0221],\n        [-0.0396,  0.0043, -0.0206,  ..., -0.0004,  0.0063, -0.0084]], dtype=torch.float16), '2.to_v_lora.up.weight': tensor([[ 1.8753e-02,  2.4891e-03,  5.6000e-03,  ..., -1.8036e-02, -2.0538e-02,  2.0889e-02],\n        [ 2.9968e-02, -1.5930e-02, -4.0222e-02,  ..., -1.1070e-02,  9.2239e-03, -2.8168e-02],\n        [-6.8169e-03, -1.7609e-02, -2.1164e-02,  ..., -1.1353e-02,  2.7618e-02,  4.8757e-05],\n        ...,\n        [ 8.4991e-03, -8.7357e-03, -3.0670e-02,  ..., -3.6850e-03, -9.6436e-03, -3.6896e-02],\n        [ 1.7761e-02, -2.6306e-02, -2.6367e-02,  ..., -4.3335e-02,  3.4485e-02, -1.0536e-02],\n        [ 4.9019e-03, -2.9449e-02,  6.7253e-03,  ..., -4.5746e-02, -1.0521e-02,  2.7802e-02]], dtype=torch.float16), '2.to_out_lora.down.weight': tensor([[ 0.0115,  0.0105,  0.0166,  ..., -0.0150, -0.0311, -0.0180],\n        [ 0.0312,  0.0045,  0.0268,  ...,  0.0102, -0.0136, -0.0016],\n        [ 0.0153,  0.0175,  0.0117,  ..., -0.0067, -0.0170,  0.0238],\n        ...,\n        [-0.0037,  0.0216, -0.0304,  ..., -0.0240,  0.0575,  0.0156],\n        [-0.0358,  0.0399, -0.0111,  ..., -0.0056, -0.0048,  0.0094],\n        [ 0.0142,  0.0300, -0.0231,  ...,  0.0213,  0.0685, -0.0118]], dtype=torch.float16), '2.to_out_lora.up.weight': tensor([[ 0.0301, -0.0036,  0.0028,  ..., -0.0059, -0.0033, -0.0464],\n        [ 0.0429, -0.0155, -0.0455,  ...,  0.0071,  0.0424, -0.0032],\n        [ 0.0168,  0.0252, -0.0269,  ..., -0.0187, -0.0086,  0.0267],\n        ...,\n        [ 0.0200,  0.0224, -0.0125,  ...,  0.0048,  0.0153, -0.0181],\n        [ 0.0015, -0.0131, -0.0051,  ...,  0.0023, -0.0327,  0.0189],\n        [-0.0291,  0.0181, -0.0228,  ..., -0.0332, -0.0027, -0.0069]], dtype=torch.float16), '3.to_q_lora.down.weight': tensor([[ 0.0068, -0.0055,  0.0258,  ...,  0.0379,  0.0116,  0.0214],\n        [ 0.0232,  0.0224, -0.0007,  ..., -0.0008, -0.0033, -0.0195],\n        [ 0.0424,  0.0018,  0.0132,  ...,  0.0094, -0.0170,  0.0594],\n        ...,\n        [ 0.0183, -0.0031,  0.0226,  ...,  0.0501, -0.0050,  0.0334],\n        [ 0.0083, -0.0090,  0.0260,  ..., -0.0025,  0.0107, -0.0272],\n        [-0.0509,  0.0195, -0.0270,  ...,  0.0094,  0.0220,  0.0076]], dtype=torch.float16), '3.to_q_lora.up.weight': tensor([[ 0.0147,  0.0634,  0.0062,  ..., -0.0186, -0.0321, -0.0546],\n        [-0.0165, -0.0022, -0.0101,  ..., -0.0122,  0.0150, -0.0581],\n        [ 0.0266,  0.0053,  0.0021,  ..., -0.0466, -0.0067, -0.0160],\n        ...,\n        [-0.0203, -0.0317, -0.0465,  ..., -0.0170, -0.0418,  0.0466],\n        [-0.0068,  0.0100, -0.0246,  ..., -0.0451,  0.0215, -0.0232],\n        [-0.0100,  0.0205,  0.0346,  ...,  0.0547, -0.0162,  0.0017]], dtype=torch.float16), '3.to_k_lora.down.weight': tensor([[-0.0101, -0.0079,  0.0034,  ...,  0.0231, -0.0386, -0.0171],\n        [-0.0125, -0.0273, -0.0261,  ...,  0.0008,  0.0853,  0.0022],\n        [ 0.0545, -0.0167,  0.0290,  ..., -0.0026,  0.0281, -0.0221],\n        ...,\n        [ 0.0110, -0.0126,  0.0300,  ...,  0.0194,  0.0285, -0.0016],\n        [-0.0164, -0.0064,  0.0358,  ...,  0.0433, -0.0267,  0.0118],\n        [ 0.0078,  0.0315,  0.0059,  ..., -0.0390,  0.0518, -0.0679]], dtype=torch.float16), '3.to_k_lora.up.weight': tensor([[ 0.0269,  0.0074,  0.0151,  ...,  0.0360, -0.0259,  0.0671],\n        [-0.0227,  0.0538,  0.0313,  ..., -0.0117, -0.0428,  0.0036],\n        [ 0.0040,  0.0122, -0.0061,  ...,  0.0555,  0.0037, -0.0147],\n        ...,\n        [-0.0122,  0.0452,  0.0253,  ...,  0.0330, -0.0046, -0.0031],\n        [ 0.0265, -0.0052, -0.0163,  ..., -0.0081,  0.0135, -0.0305],\n        [-0.0321, -0.0487,  0.0310,  ..., -0.0113,  0.0231,  0.0155]], dtype=torch.float16), '3.to_v_lora.down.weight': tensor([[-1.7380e-02, -2.0264e-02, -2.0161e-03,  ...,  1.7319e-02, -7.5951e-03,  1.1932e-02],\n        [-1.9470e-02, -3.0220e-05,  2.1881e-02,  ...,  9.9564e-04,  8.8272e-03, -1.8890e-02],\n        [ 1.4359e-02,  1.1436e-02, -2.8152e-02,  ..., -1.5976e-02, -1.5442e-02,  3.5217e-02],\n        ...,\n        [-1.3474e-02,  2.0798e-02, -6.9008e-03,  ..., -6.3553e-03, -6.6605e-03, -2.9541e-02],\n        [ 1.6312e-02,  4.5227e-02,  4.4952e-02,  ..., -6.8779e-03,  1.9989e-02, -2.6306e-02],\n        [-1.6586e-02,  1.7563e-02, -6.5575e-03,  ...,  8.5144e-03, -3.2043e-02,  4.2152e-03]], dtype=torch.float16), '3.to_v_lora.up.weight': tensor([[-0.0094, -0.0146,  0.0054,  ..., -0.0102, -0.0086, -0.0180],\n        [-0.0025, -0.0081,  0.0218,  ..., -0.0006,  0.0015, -0.0003],\n        [-0.0114,  0.0135,  0.0013,  ..., -0.0027,  0.0199, -0.0193],\n        ...,\n        [-0.0013,  0.0112,  0.0133,  ..., -0.0165,  0.0131,  0.0074],\n        [-0.0145, -0.0019,  0.0026,  ...,  0.0140, -0.0030,  0.0039],\n        [ 0.0123, -0.0024, -0.0375,  ...,  0.0047, -0.0243, -0.0045]], dtype=torch.float16), '3.to_out_lora.down.weight': tensor([[ 0.0016,  0.0161,  0.0259,  ..., -0.0336,  0.0171, -0.0008],\n        [-0.0030,  0.0112, -0.0156,  ...,  0.0106, -0.0042,  0.0066],\n        [ 0.0058,  0.0216, -0.0267,  ...,  0.0063,  0.0002,  0.0016],\n        ...,\n        [-0.0020, -0.0076, -0.0023,  ..., -0.0030, -0.0275,  0.0172],\n        [ 0.0104, -0.0112, -0.0083,  ..., -0.0017,  0.0136,  0.0166],\n        [-0.0012,  0.0058,  0.0014,  ..., -0.0103, -0.0032,  0.0055]], dtype=torch.float16), '3.to_out_lora.up.weight': tensor([[-0.0107,  0.0011,  0.0058,  ...,  0.0365, -0.0035, -0.0240],\n        [ 0.0152, -0.0053, -0.0278,  ...,  0.0177, -0.0150,  0.0126],\n        [-0.0021, -0.0154,  0.0211,  ..., -0.0114, -0.0231,  0.0214],\n        ...,\n        [-0.0098, -0.0059,  0.0157,  ..., -0.0329, -0.0076, -0.0233],\n        [-0.0046, -0.0070, -0.0055,  ...,  0.0092, -0.0098,  0.0003],\n        [-0.0126,  0.0058,  0.0268,  ..., -0.0166, -0.0149,  0.0414]], dtype=torch.float16), '3.to_k_ip.weight': tensor([[ 0.0554, -0.0490, -0.0469,  ..., -0.0246,  0.0235,  0.0731],\n        [-0.0564, -0.0002, -0.0220,  ..., -0.0625,  0.0382,  0.0593],\n        [ 0.0414,  0.0420, -0.0714,  ..., -0.0182, -0.0197,  0.0561],\n        ...,\n        [ 0.0935, -0.0190, -0.0173,  ..., -0.0069, -0.0063, -0.0013],\n        [-0.0223,  0.0238,  0.0003,  ...,  0.0392, -0.0250,  0.0314],\n        [ 0.0244, -0.0066, -0.0121,  ..., -0.0193, -0.0032, -0.0020]], dtype=torch.float16), '3.to_v_ip.weight': tensor([[ 0.0084,  0.0228,  0.0120,  ..., -0.0076,  0.0552,  0.0204],\n        [ 0.0331,  0.0072, -0.0293,  ...,  0.0164, -0.0036,  0.0323],\n        [ 0.0021, -0.0209,  0.0299,  ..., -0.0017, -0.0100,  0.0117],\n        ...,\n        [-0.0034,  0.0363,  0.0073,  ..., -0.0031,  0.0087,  0.0099],\n        [ 0.0081,  0.0061, -0.0373,  ...,  0.0027, -0.0471, -0.0352],\n        [ 0.0055, -0.0406, -0.0107,  ...,  0.0125, -0.0013,  0.0202]], dtype=torch.float16), '4.to_q_lora.down.weight': tensor([[ 0.0105,  0.0398, -0.0283,  ..., -0.0562,  0.0139, -0.0380],\n        [ 0.0039,  0.0039, -0.0477,  ...,  0.0167,  0.0087,  0.0084],\n        [ 0.0384,  0.0257,  0.0023,  ..., -0.0619, -0.0091,  0.0246],\n        ...,\n        [ 0.0641,  0.0136,  0.0216,  ..., -0.0024, -0.0526, -0.0142],\n        [ 0.0044,  0.0116,  0.0118,  ..., -0.0126, -0.0399, -0.0183],\n        [-0.0031,  0.0124,  0.0090,  ..., -0.0202,  0.0093,  0.0176]], dtype=torch.float16), '4.to_q_lora.up.weight': tensor([[-0.0427, -0.0086, -0.0576,  ..., -0.0122, -0.0030, -0.0087],\n        [-0.0105,  0.0136, -0.0057,  ...,  0.0006,  0.0406,  0.0035],\n        [-0.0206, -0.0548,  0.0563,  ..., -0.0173,  0.0262,  0.0219],\n        ...,\n        [-0.0112, -0.0324,  0.0230,  ..., -0.0151, -0.0132, -0.0048],\n        [ 0.0115, -0.0323, -0.0638,  ..., -0.0197, -0.0440,  0.0061],\n        [ 0.0280, -0.0352, -0.0148,  ...,  0.0188,  0.0137, -0.0093]], dtype=torch.float16), '4.to_k_lora.down.weight': tensor([[ 0.0034, -0.0438,  0.0731,  ...,  0.0487, -0.0331, -0.0143],\n        [-0.0023, -0.0403, -0.0186,  ...,  0.0917, -0.0001, -0.0219],\n        [ 0.0044,  0.0175,  0.0078,  ..., -0.0751,  0.0200, -0.0173],\n        ...,\n        [-0.0113,  0.0528,  0.0312,  ..., -0.0072,  0.0150,  0.0059],\n        [ 0.0066,  0.0191,  0.0559,  ..., -0.0609,  0.0168,  0.0175],\n        [-0.0663,  0.0261,  0.0133,  ..., -0.0237, -0.0006, -0.0110]], dtype=torch.float16), '4.to_k_lora.up.weight': tensor([[ 3.8391e-02, -1.1627e-02, -3.0365e-02,  ...,  3.0853e-02,  4.2816e-02,  1.1933e-04],\n        [-6.7353e-05,  7.5645e-03, -6.0234e-03,  ...,  1.4854e-02, -1.2215e-02, -1.9485e-02],\n        [ 7.1777e-02, -3.3417e-03, -1.0399e-02,  ..., -5.0842e-02, -8.2016e-03,  3.5553e-02],\n        ...,\n        [ 2.6337e-02,  2.7649e-02, -4.6082e-02,  ..., -5.0232e-02,  1.6541e-02, -1.3405e-02],\n        [-4.6692e-02, -2.9465e-02,  3.1872e-03,  ...,  5.3192e-02,  3.7823e-03,  1.0406e-02],\n        [-2.1149e-02, -2.0264e-02, -2.0233e-02,  ...,  1.0330e-02, -8.1329e-03, -5.1689e-04]], dtype=torch.float16), '4.to_v_lora.down.weight': tensor([[ 0.0361,  0.0061, -0.0210,  ...,  0.0321,  0.0016, -0.0147],\n        [-0.0078,  0.0113, -0.0402,  ...,  0.0327, -0.0173,  0.0081],\n        [ 0.0425, -0.0508,  0.0083,  ...,  0.0081, -0.0538,  0.0111],\n        ...,\n        [-0.0003,  0.0003, -0.0102,  ..., -0.0026,  0.0172, -0.0059],\n        [-0.0126,  0.0177,  0.0330,  ..., -0.0122,  0.0171,  0.0006],\n        [-0.0037,  0.0006, -0.0150,  ..., -0.0338, -0.0291,  0.0539]], dtype=torch.float16), '4.to_v_lora.up.weight': tensor([[-0.0070,  0.0031,  0.0086,  ...,  0.0431, -0.0090, -0.0259],\n        [ 0.0533,  0.0060, -0.0487,  ...,  0.0304,  0.0221,  0.0256],\n        [-0.0228,  0.0220, -0.0105,  ...,  0.0011, -0.0199,  0.0054],\n        ...,\n        [-0.0102, -0.0075, -0.0015,  ...,  0.0102,  0.0085,  0.0215],\n        [ 0.0540, -0.0321, -0.0074,  ..., -0.0058,  0.0253, -0.0104],\n        [ 0.0010, -0.0117, -0.0368,  ...,  0.0146, -0.0012, -0.0162]], dtype=torch.float16), '4.to_out_lora.down.weight': tensor([[ 0.0076,  0.0028, -0.0026,  ...,  0.0580,  0.0177, -0.0222],\n        [-0.0253,  0.0127, -0.0196,  ..., -0.0128,  0.0098, -0.0162],\n        [-0.0041,  0.0379,  0.0108,  ...,  0.0312,  0.0173, -0.0064],\n        ...,\n        [-0.0024,  0.0066, -0.0212,  ..., -0.0606,  0.0436,  0.0134],\n        [ 0.0039, -0.0035, -0.0016,  ...,  0.0568,  0.0086,  0.0025],\n        [-0.0129,  0.0325, -0.0099,  ..., -0.0091, -0.0070, -0.0324]], dtype=torch.float16), '4.to_out_lora.up.weight': tensor([[ 0.0294,  0.0170, -0.0299,  ...,  0.0061,  0.0091,  0.0135],\n        [-0.0577, -0.0248,  0.0054,  ...,  0.0083, -0.0020, -0.0200],\n        [-0.0470, -0.0107,  0.0070,  ...,  0.0037,  0.0012,  0.0065],\n        ...,\n        [ 0.0008,  0.0033, -0.0165,  ...,  0.0258,  0.0102, -0.0278],\n        [ 0.0104, -0.0238,  0.0215,  ...,  0.0061, -0.0038, -0.0614],\n        [-0.0536,  0.0231,  0.0127,  ...,  0.0200, -0.0001,  0.0102]], dtype=torch.float16), '5.to_q_lora.down.weight': tensor([[ 4.7943e-02,  6.0883e-02,  3.0918e-03,  ..., -5.1384e-03,  2.9190e-02,  3.9276e-02],\n        [-2.6779e-02,  2.9541e-02, -1.4626e-02,  ..., -3.1647e-02, -3.6469e-02, -2.9221e-02],\n        [-4.5746e-02,  1.3313e-02, -4.1321e-02,  ...,  2.7832e-02,  2.5034e-06,  2.0554e-02],\n        ...,\n        [-4.2419e-03, -3.1097e-02, -5.5573e-02,  ...,  5.7037e-02, -9.1505e-04,  9.1782e-03],\n        [-3.2043e-02, -7.9422e-03, -1.8646e-02,  ..., -7.6294e-02,  5.1636e-02, -1.2505e-02],\n        [ 5.2719e-03,  1.6785e-02,  2.8763e-02,  ...,  1.9897e-02, -2.9087e-03, -4.5837e-02]], dtype=torch.float16), '5.to_q_lora.up.weight': tensor([[ 0.0345, -0.0108, -0.0026,  ...,  0.0157, -0.0059, -0.0507],\n        [-0.0108, -0.0363, -0.0260,  ...,  0.0462, -0.0301,  0.0162],\n        [ 0.0279,  0.0197,  0.0335,  ..., -0.0384,  0.0323,  0.0326],\n        ...,\n        [ 0.0254, -0.0130, -0.0231,  ...,  0.0162, -0.0030,  0.0058],\n        [-0.0022, -0.0315,  0.0424,  ...,  0.0184, -0.0042, -0.0316],\n        [ 0.0122,  0.0097, -0.0102,  ...,  0.0062, -0.0195,  0.0472]], dtype=torch.float16), '5.to_k_lora.down.weight': tensor([[ 0.0240, -0.0131,  0.0253,  ...,  0.0476,  0.0243,  0.0182],\n        [ 0.0136, -0.0171,  0.0273,  ...,  0.0021,  0.0117,  0.0332],\n        [ 0.0194, -0.0778, -0.0372,  ..., -0.0285, -0.0089,  0.0057],\n        ...,\n        [ 0.0038,  0.0131, -0.0018,  ..., -0.0703, -0.0741, -0.0569],\n        [ 0.0348,  0.0501, -0.0799,  ...,  0.0510, -0.0049, -0.0197],\n        [ 0.0096,  0.0590, -0.0275,  ...,  0.0060,  0.0512,  0.0789]], dtype=torch.float16), '5.to_k_lora.up.weight': tensor([[-0.0152,  0.0555,  0.0072,  ..., -0.0529, -0.0149,  0.0307],\n        [-0.0104,  0.0068, -0.0116,  ...,  0.0429, -0.0529,  0.0046],\n        [ 0.0086, -0.0570, -0.0335,  ..., -0.0131,  0.0362,  0.0050],\n        ...,\n        [-0.0335,  0.0710,  0.0488,  ...,  0.0358, -0.0064,  0.0468],\n        [-0.0249,  0.0096, -0.0822,  ..., -0.0418,  0.0072,  0.0125],\n        [-0.0270,  0.0007,  0.0076,  ..., -0.0119, -0.0475, -0.0070]], dtype=torch.float16), '5.to_v_lora.down.weight': tensor([[-0.0012, -0.0172, -0.0377,  ..., -0.0093, -0.0106,  0.0184],\n        [-0.0114,  0.0146,  0.0033,  ...,  0.0116, -0.0135,  0.0180],\n        [-0.0278, -0.0014,  0.0019,  ...,  0.0097,  0.0057,  0.0135],\n        ...,\n        [ 0.0076, -0.0115, -0.0281,  ...,  0.0159, -0.0139,  0.0230],\n        [ 0.0083, -0.0028,  0.0688,  ...,  0.0127, -0.0029,  0.0236],\n        [-0.0194, -0.0289, -0.0148,  ..., -0.0032,  0.0300, -0.0278]], dtype=torch.float16), '5.to_v_lora.up.weight': tensor([[-0.0033,  0.0131, -0.0105,  ...,  0.0245, -0.0103,  0.0317],\n        [-0.0126,  0.0231, -0.0188,  ...,  0.0068,  0.0094, -0.0002],\n        [ 0.0216, -0.0182,  0.0326,  ..., -0.0293, -0.0055,  0.0002],\n        ...,\n        [ 0.0101, -0.0293,  0.0276,  ..., -0.0039, -0.0505, -0.0337],\n        [ 0.0118,  0.0175, -0.0299,  ..., -0.0243,  0.0103,  0.0370],\n        [ 0.0033,  0.0253,  0.0028,  ...,  0.0023,  0.0230,  0.0126]], dtype=torch.float16), '5.to_out_lora.down.weight': tensor([[ 0.0073, -0.0613,  0.0266,  ..., -0.0475, -0.0173, -0.0040],\n        [-0.0190,  0.0176,  0.0392,  ...,  0.0183,  0.0027,  0.0215],\n        [ 0.0104,  0.0053,  0.0034,  ...,  0.0496,  0.0073, -0.0121],\n        ...,\n        [-0.0334, -0.0040, -0.0013,  ..., -0.0499, -0.0007,  0.0057],\n        [-0.0167, -0.0303, -0.0003,  ..., -0.0041,  0.0094,  0.0077],\n        [ 0.0259,  0.0107, -0.0053,  ...,  0.0500,  0.0042, -0.0252]], dtype=torch.float16), '5.to_out_lora.up.weight': tensor([[-0.0052, -0.0160,  0.1041,  ..., -0.0117,  0.0414,  0.0246],\n        [-0.0248, -0.0041,  0.0013,  ...,  0.0014, -0.0172, -0.0110],\n        [ 0.0089, -0.0160,  0.0238,  ..., -0.0081,  0.0246,  0.0051],\n        ...,\n        [ 0.0134,  0.0113,  0.0452,  ...,  0.0021,  0.0182,  0.0004],\n        [ 0.0162, -0.0203,  0.0076,  ..., -0.0173,  0.0186,  0.0059],\n        [ 0.0026, -0.0035, -0.0169,  ...,  0.0252, -0.0166,  0.0350]], dtype=torch.float16), '5.to_k_ip.weight': tensor([[-0.1010,  0.0600, -0.0645,  ...,  0.0426, -0.0567, -0.0177],\n        [ 0.0040,  0.0463, -0.0204,  ..., -0.0144,  0.0437,  0.0743],\n        [-0.0228,  0.0831,  0.0446,  ...,  0.0691, -0.0226,  0.0092],\n        ...,\n        [-0.0911,  0.0332, -0.0202,  ...,  0.0256,  0.0076,  0.0010],\n        [ 0.0594,  0.0321,  0.0190,  ...,  0.0555,  0.0382, -0.0960],\n        [-0.0220, -0.0724,  0.0565,  ..., -0.0079, -0.0367,  0.0372]], dtype=torch.float16), '5.to_v_ip.weight': tensor([[ 0.0171, -0.0116, -0.0728,  ..., -0.0285,  0.0687,  0.0025],\n        [-0.0047, -0.0591, -0.0107,  ..., -0.0174,  0.0306,  0.0133],\n        [ 0.0279,  0.0591, -0.0199,  ..., -0.0209,  0.0692,  0.0411],\n        ...,\n        [ 0.0606, -0.0008, -0.0346,  ...,  0.0156, -0.0162,  0.0830],\n        [-0.0021, -0.0510,  0.0095,  ...,  0.0288,  0.0034, -0.0203],\n        [-0.0102,  0.0255, -0.0151,  ..., -0.0202,  0.0430,  0.0077]], dtype=torch.float16), '6.to_q_lora.down.weight': tensor([[-0.0361, -0.0382, -0.0066,  ..., -0.0162,  0.0253,  0.0018],\n        [-0.0224, -0.0009,  0.0283,  ...,  0.0145,  0.0210, -0.0066],\n        [ 0.0324, -0.0303,  0.0088,  ..., -0.0053, -0.0446, -0.0098],\n        ...,\n        [-0.0002, -0.0576,  0.0157,  ...,  0.0438, -0.0255, -0.0092],\n        [ 0.0523, -0.0154, -0.0017,  ..., -0.0303, -0.0096, -0.0579],\n        [ 0.0141,  0.0339, -0.0025,  ..., -0.0059,  0.0414,  0.0100]], dtype=torch.float16), '6.to_q_lora.up.weight': tensor([[ 0.0253, -0.0468, -0.0176,  ...,  0.0077,  0.0404,  0.0068],\n        [-0.0079, -0.0085,  0.0027,  ..., -0.0077,  0.0178,  0.0216],\n        [-0.0392,  0.0521, -0.0005,  ..., -0.0110,  0.0302,  0.0228],\n        ...,\n        [-0.0008,  0.0390, -0.0285,  ...,  0.0018,  0.0231,  0.0579],\n        [ 0.0071,  0.0562,  0.0099,  ...,  0.0100, -0.0228,  0.0148],\n        [-0.0228,  0.0211, -0.0274,  ...,  0.0144,  0.0461,  0.0264]], dtype=torch.float16), '6.to_k_lora.down.weight': tensor([[ 0.0046,  0.0485, -0.0013,  ...,  0.0259,  0.0204, -0.0043],\n        [-0.0128, -0.0422,  0.0430,  ..., -0.0221, -0.0344, -0.0021],\n        [ 0.0084,  0.0072, -0.0112,  ...,  0.0072,  0.0054,  0.0108],\n        ...,\n        [ 0.0272, -0.0259,  0.0296,  ..., -0.0595, -0.0128, -0.0016],\n        [-0.0193, -0.0051,  0.0188,  ...,  0.0369,  0.0210,  0.0183],\n        [ 0.0558, -0.0431,  0.0088,  ...,  0.0387, -0.0098, -0.0148]], dtype=torch.float16), '6.to_k_lora.up.weight': tensor([[-0.0256, -0.0057, -0.0121,  ..., -0.0246, -0.0019,  0.0130],\n        [ 0.0122, -0.0091,  0.0103,  ..., -0.0074,  0.0289,  0.0191],\n        [ 0.0436, -0.0083, -0.0049,  ..., -0.0124, -0.0199,  0.0330],\n        ...,\n        [-0.0230, -0.0058,  0.0180,  ...,  0.0056, -0.0085,  0.0055],\n        [ 0.0349,  0.0397, -0.0123,  ..., -0.0032, -0.0194,  0.0165],\n        [-0.0433, -0.0602, -0.0217,  ...,  0.0042,  0.0009, -0.0423]], dtype=torch.float16), '6.to_v_lora.down.weight': tensor([[ 0.0184,  0.0329,  0.0349,  ..., -0.0060, -0.0130, -0.0208],\n        [ 0.0082,  0.0099,  0.0152,  ..., -0.0051, -0.0182, -0.0297],\n        [ 0.0397,  0.0436,  0.0119,  ..., -0.0205, -0.0553,  0.0224],\n        ...,\n        [ 0.0261,  0.0121, -0.0103,  ..., -0.0154, -0.0191, -0.0163],\n        [ 0.0082,  0.0303,  0.0046,  ...,  0.0169,  0.0065, -0.0333],\n        [-0.0324,  0.0116,  0.0054,  ...,  0.0405,  0.0147,  0.0124]], dtype=torch.float16), '6.to_v_lora.up.weight': tensor([[-0.0113, -0.0085, -0.0211,  ..., -0.0283,  0.0095,  0.0039],\n        [ 0.0384, -0.0138, -0.0088,  ..., -0.0084, -0.0119, -0.0221],\n        [ 0.0015, -0.0060, -0.0226,  ...,  0.0008, -0.0289, -0.0195],\n        ...,\n        [-0.0077, -0.0062, -0.0094,  ...,  0.0013, -0.0281,  0.0288],\n        [-0.0418,  0.0192,  0.0090,  ..., -0.0087, -0.0056, -0.0170],\n        [ 0.0246, -0.0019, -0.0010,  ...,  0.0040,  0.0063,  0.0104]], dtype=torch.float16), '6.to_out_lora.down.weight': tensor([[-0.0177, -0.0056, -0.0384,  ..., -0.0417, -0.0129, -0.0425],\n        [ 0.0128, -0.0029,  0.0164,  ..., -0.0155, -0.0119, -0.0041],\n        [ 0.0095, -0.0085,  0.0082,  ..., -0.0289, -0.0218, -0.0497],\n        ...,\n        [ 0.0094,  0.0151,  0.0063,  ..., -0.0062, -0.0273,  0.0197],\n        [-0.0348,  0.0065, -0.0142,  ..., -0.0304, -0.0100, -0.0006],\n        [ 0.0058,  0.0285,  0.0005,  ...,  0.0097, -0.0195,  0.0452]], dtype=torch.float16), '6.to_out_lora.up.weight': tensor([[ 0.0278,  0.0175, -0.0200,  ...,  0.0116, -0.0248, -0.0238],\n        [-0.0365, -0.0252,  0.0213,  ...,  0.0178, -0.0129,  0.0168],\n        [ 0.0131, -0.0475, -0.0030,  ..., -0.0183, -0.0246, -0.0169],\n        ...,\n        [ 0.0079, -0.0204,  0.0162,  ...,  0.0199, -0.0124,  0.0171],\n        [ 0.0059,  0.0197, -0.0221,  ...,  0.0147, -0.0252,  0.0114],\n        [ 0.0136, -0.0145,  0.0228,  ...,  0.0370,  0.0053,  0.0116]], dtype=torch.float16), '7.to_q_lora.down.weight': tensor([[ 0.0075,  0.0398, -0.0160,  ..., -0.0135,  0.0430, -0.0416],\n        [ 0.0144,  0.0113,  0.0197,  ..., -0.0254,  0.0185, -0.0169],\n        [-0.0286,  0.0429,  0.0154,  ...,  0.0068, -0.0272, -0.0174],\n        ...,\n        [ 0.0343,  0.0367,  0.0019,  ..., -0.0197, -0.0016, -0.0483],\n        [ 0.0389,  0.0007, -0.0079,  ...,  0.0710,  0.0099, -0.0301],\n        [-0.0223,  0.0434,  0.0061,  ...,  0.0370, -0.0215, -0.0421]], dtype=torch.float16), '7.to_q_lora.up.weight': tensor([[ 0.0186, -0.0018,  0.0287,  ..., -0.0135,  0.0197,  0.0144],\n        [ 0.0183, -0.0059, -0.0185,  ..., -0.0249, -0.0012,  0.0053],\n        [-0.0132,  0.0306,  0.0154,  ...,  0.0489,  0.0027, -0.0205],\n        ...,\n        [ 0.0186, -0.0086,  0.0214,  ...,  0.0180,  0.0081,  0.0149],\n        [ 0.0064, -0.0080,  0.0195,  ...,  0.0054,  0.0101,  0.0521],\n        [ 0.0223,  0.0312, -0.0052,  ...,  0.0135, -0.0043, -0.0526]], dtype=torch.float16), '7.to_k_lora.down.weight': tensor([[-0.0113,  0.0307, -0.0190,  ..., -0.0119, -0.0172,  0.0182],\n        [-0.0135, -0.0012, -0.0029,  ...,  0.0207,  0.0049, -0.0017],\n        [-0.0038,  0.0027, -0.0310,  ...,  0.0102,  0.0078, -0.0394],\n        ...,\n        [-0.0275,  0.0375, -0.0031,  ...,  0.0193,  0.0403,  0.0046],\n        [-0.0090,  0.0555,  0.0191,  ...,  0.0073,  0.0264,  0.0087],\n        [-0.0121, -0.0060, -0.0021,  ..., -0.0185, -0.0085, -0.0259]], dtype=torch.float16), '7.to_k_lora.up.weight': tensor([[-0.0400,  0.0374, -0.0214,  ...,  0.0200, -0.0488, -0.0352],\n        [-0.0005,  0.0452, -0.0028,  ...,  0.0019,  0.0364, -0.0140],\n        [ 0.0072,  0.0034, -0.0261,  ..., -0.0203, -0.0267, -0.0623],\n        ...,\n        [ 0.0050,  0.0048, -0.0091,  ...,  0.0046, -0.0065, -0.0062],\n        [-0.0075,  0.0073,  0.0581,  ...,  0.0159,  0.0524,  0.0368],\n        [-0.0105,  0.0226,  0.0204,  ...,  0.0124,  0.0406,  0.0302]], dtype=torch.float16), '7.to_v_lora.down.weight': tensor([[-0.0101,  0.0161, -0.0087,  ..., -0.0071, -0.0140, -0.0234],\n        [-0.0017, -0.0076,  0.0307,  ...,  0.0137, -0.0005, -0.0364],\n        [-0.0036,  0.0356, -0.0648,  ..., -0.0131, -0.0122,  0.0449],\n        ...,\n        [ 0.0013, -0.0229,  0.0320,  ...,  0.0040,  0.0127,  0.0066],\n        [ 0.0171, -0.0308,  0.0219,  ..., -0.0042,  0.0011,  0.0028],\n        [ 0.0194, -0.0289, -0.0217,  ..., -0.0082, -0.0054, -0.0077]], dtype=torch.float16), '7.to_v_lora.up.weight': tensor([[ 0.0221, -0.0041, -0.0006,  ..., -0.0027, -0.0333,  0.0039],\n        [-0.0041, -0.0139,  0.0134,  ...,  0.0137, -0.0035, -0.0067],\n        [ 0.0188,  0.0062,  0.0024,  ..., -0.0162, -0.0073,  0.0269],\n        ...,\n        [-0.0026, -0.0195, -0.0127,  ..., -0.0277, -0.0159, -0.0024],\n        [ 0.0048, -0.0322,  0.0136,  ...,  0.0374, -0.0160, -0.0095],\n        [ 0.0012, -0.0113, -0.0043,  ...,  0.0089,  0.0158, -0.0170]], dtype=torch.float16), '7.to_out_lora.down.weight': tensor([[ 0.0138,  0.0209, -0.0200,  ..., -0.0389,  0.0205,  0.0095],\n        [-0.0085,  0.0215,  0.0496,  ...,  0.0198, -0.0081, -0.0351],\n        [ 0.0050, -0.0133,  0.0067,  ..., -0.0279,  0.0123, -0.0017],\n        ...,\n        [-0.0048, -0.0243, -0.0374,  ..., -0.0145, -0.0104,  0.0073],\n        [ 0.0319, -0.0472, -0.0056,  ..., -0.0001, -0.0127,  0.0316],\n        [-0.0111,  0.0412,  0.0139,  ..., -0.0314, -0.0112,  0.0090]], dtype=torch.float16), '7.to_out_lora.up.weight': tensor([[ 0.0105, -0.0085,  0.0313,  ...,  0.0239, -0.0024,  0.0036],\n        [ 0.0113, -0.0045, -0.0202,  ..., -0.0134, -0.0135, -0.0177],\n        [-0.0116,  0.0170, -0.0128,  ..., -0.0347,  0.0046, -0.0031],\n        ...,\n        [-0.0349, -0.0447, -0.0051,  ...,  0.0238, -0.0249, -0.0113],\n        [-0.0107,  0.0036,  0.0048,  ..., -0.0147,  0.0011,  0.0081],\n        [ 0.0217, -0.0192,  0.0044,  ..., -0.0029,  0.0478, -0.0154]], dtype=torch.float16), '7.to_k_ip.weight': tensor([[ 0.0515,  0.0342,  0.0703,  ...,  0.0291, -0.0582,  0.0043],\n        [ 0.1266,  0.0355,  0.0117,  ...,  0.0290,  0.0145, -0.1508],\n        [-0.0590,  0.0266,  0.1051,  ..., -0.0795, -0.0664, -0.0117],\n        ...,\n        [ 0.0574,  0.0366, -0.0504,  ...,  0.0066,  0.0056,  0.0704],\n        [-0.0444,  0.0836,  0.0374,  ...,  0.0334,  0.0363, -0.0437],\n        [-0.0106, -0.0690, -0.0056,  ...,  0.0252, -0.0214,  0.0230]], dtype=torch.float16), '7.to_v_ip.weight': tensor([[ 0.0187,  0.0383, -0.0091,  ..., -0.0076, -0.0225,  0.0644],\n        [-0.0123,  0.0146, -0.0094,  ...,  0.0208, -0.0614, -0.0091],\n        [-0.0135, -0.0609,  0.0123,  ...,  0.0442, -0.0138, -0.0240],\n        ...,\n        [ 0.0411,  0.0151, -0.0709,  ..., -0.0092, -0.0274, -0.0396],\n        [ 0.0338, -0.0015, -0.0092,  ...,  0.0298, -0.0417,  0.0029],\n        [ 0.0125, -0.0193,  0.0156,  ..., -0.0231,  0.0053, -0.0388]], dtype=torch.float16), '8.to_q_lora.down.weight': tensor([[ 0.0078,  0.0401, -0.0351,  ...,  0.0106,  0.0163, -0.0391],\n        [ 0.0273, -0.0100, -0.0267,  ..., -0.0098, -0.0182, -0.0235],\n        [ 0.0195, -0.0326,  0.0555,  ..., -0.0457,  0.0195, -0.0099],\n        ...,\n        [ 0.0144,  0.0043, -0.0157,  ...,  0.0244,  0.0257,  0.0286],\n        [-0.0103, -0.0611,  0.0697,  ...,  0.0114, -0.0569, -0.0297],\n        [ 0.0104,  0.0098,  0.0555,  ..., -0.0222, -0.0001, -0.0179]], dtype=torch.float16), '8.to_q_lora.up.weight': tensor([[ 0.0171,  0.0006, -0.0415,  ..., -0.0173,  0.0506,  0.0585],\n        [-0.0113,  0.0153,  0.0156,  ...,  0.0180,  0.0405, -0.0334],\n        [-0.0190,  0.0028,  0.0219,  ..., -0.0002, -0.0396,  0.0424],\n        ...,\n        [-0.0105, -0.0124,  0.0367,  ..., -0.0083,  0.0325,  0.0093],\n        [-0.0149,  0.0052,  0.0331,  ...,  0.0205,  0.0063, -0.0392],\n        [-0.0103,  0.0126, -0.0422,  ..., -0.0285, -0.0240,  0.0470]], dtype=torch.float16), '8.to_k_lora.down.weight': tensor([[ 0.0600, -0.0590,  0.0303,  ..., -0.0261, -0.0305, -0.0252],\n        [-0.0304,  0.0493,  0.0077,  ...,  0.0367,  0.0201,  0.0615],\n        [ 0.0090, -0.0225, -0.0036,  ..., -0.0247,  0.0218,  0.0224],\n        ...,\n        [ 0.0013, -0.0249,  0.0077,  ...,  0.0267,  0.0219, -0.0955],\n        [ 0.0202,  0.0069,  0.0025,  ...,  0.0132,  0.0106,  0.0046],\n        [-0.0058, -0.0062,  0.0086,  ..., -0.0138,  0.0204, -0.0157]], dtype=torch.float16), '8.to_k_lora.up.weight': tensor([[ 0.0256,  0.0109,  0.0176,  ...,  0.0045, -0.0167,  0.0078],\n        [ 0.0003,  0.0358,  0.0153,  ..., -0.0127,  0.0003, -0.0041],\n        [ 0.0350, -0.0030,  0.0071,  ..., -0.0077,  0.0016, -0.0435],\n        ...,\n        [ 0.0056,  0.0066, -0.0100,  ...,  0.0108,  0.0371,  0.0367],\n        [-0.0033,  0.0305, -0.0510,  ...,  0.0320, -0.0031,  0.0245],\n        [ 0.0031,  0.0594, -0.0258,  ..., -0.0002, -0.0094,  0.0563]], dtype=torch.float16), '8.to_v_lora.down.weight': tensor([[-0.0077,  0.0507, -0.0349,  ...,  0.0116,  0.0352, -0.0033],\n        [-0.0173, -0.0018,  0.0050,  ..., -0.0160,  0.0067,  0.0207],\n        [-0.0312, -0.0134,  0.0594,  ..., -0.0271,  0.0162, -0.0115],\n        ...,\n        [-0.0602, -0.0170,  0.0350,  ..., -0.0100, -0.0255, -0.0049],\n        [-0.0403,  0.0100, -0.0130,  ..., -0.0089,  0.0099,  0.0028],\n        [ 0.0080,  0.0238, -0.0243,  ...,  0.0424, -0.0137,  0.0261]], dtype=torch.float16), '8.to_v_lora.up.weight': tensor([[-0.0104,  0.0002,  0.0381,  ...,  0.0052,  0.0209,  0.0631],\n        [-0.0186, -0.0386,  0.0051,  ..., -0.0196, -0.0182, -0.0263],\n        [-0.0233, -0.0063, -0.0226,  ..., -0.0334,  0.0555,  0.0245],\n        ...,\n        [ 0.0264, -0.0272,  0.0119,  ..., -0.0179,  0.0504,  0.0505],\n        [ 0.0076, -0.0251,  0.0087,  ..., -0.0356, -0.0203, -0.0413],\n        [-0.0081, -0.0600, -0.0352,  ..., -0.0017, -0.0129,  0.0901]], dtype=torch.float16), '8.to_out_lora.down.weight': tensor([[-0.0093,  0.0134, -0.0180,  ...,  0.0182, -0.0709,  0.0184],\n        [ 0.0096, -0.0325, -0.0168,  ..., -0.0797, -0.0759,  0.0420],\n        [-0.0179,  0.0178, -0.0125,  ..., -0.0149,  0.0114,  0.0203],\n        ...,\n        [ 0.0195,  0.0134,  0.0075,  ...,  0.0753,  0.0242,  0.1122],\n        [-0.0297, -0.0102, -0.0302,  ...,  0.0538, -0.0334,  0.0364],\n        [-0.0222,  0.0317, -0.0016,  ...,  0.0133, -0.1031, -0.0067]], dtype=torch.float16), '8.to_out_lora.up.weight': tensor([[-4.8187e-02,  5.1537e-03, -4.0512e-03,  ...,  2.1667e-02, -9.8343e-03, -2.8793e-02],\n        [-2.1423e-02,  6.8367e-05,  1.0614e-03,  ..., -2.9297e-02, -1.1368e-02,  2.5970e-02],\n        [-3.1799e-02, -1.4786e-02, -6.4354e-03,  ...,  3.8422e-02,  1.3680e-02,  2.9678e-02],\n        ...,\n        [ 2.8137e-02,  1.0786e-03, -5.4352e-02,  ..., -6.2256e-03,  1.6041e-03,  1.4145e-02],\n        [-3.6163e-02,  3.1204e-02,  5.6244e-02,  ..., -5.7922e-02, -1.1971e-02,  1.1574e-02],\n        [-1.5366e-02, -2.4445e-02,  2.5558e-02,  ..., -1.9440e-02,  1.2451e-02,  3.8361e-02]], dtype=torch.float16), '9.to_q_lora.down.weight': tensor([[ 0.0050,  0.0070, -0.0181,  ...,  0.0732,  0.0468,  0.0110],\n        [ 0.0382,  0.0164, -0.0196,  ...,  0.0079, -0.0369, -0.0011],\n        [-0.0308, -0.0161,  0.0040,  ..., -0.0110, -0.0373, -0.0285],\n        ...,\n        [ 0.0243,  0.0205, -0.0014,  ...,  0.0721, -0.0599, -0.0502],\n        [-0.0240, -0.0104,  0.0203,  ..., -0.0284,  0.0279, -0.0178],\n        [ 0.0117, -0.0194,  0.0255,  ...,  0.0579, -0.0201, -0.0467]], dtype=torch.float16), '9.to_q_lora.up.weight': tensor([[ 0.0522,  0.0432, -0.0002,  ...,  0.0229, -0.0387,  0.0279],\n        [-0.0063,  0.0302,  0.0039,  ..., -0.0041, -0.0082, -0.0332],\n        [ 0.0250, -0.0227,  0.0285,  ..., -0.0132,  0.0068, -0.0117],\n        ...,\n        [-0.0053, -0.0427,  0.0168,  ...,  0.0402,  0.0151,  0.0356],\n        [-0.0068,  0.0136,  0.0004,  ...,  0.0048, -0.0407,  0.0430],\n        [-0.0009,  0.0245,  0.0170,  ..., -0.0580,  0.0531, -0.0116]], dtype=torch.float16), '9.to_k_lora.down.weight': tensor([[ 0.0021,  0.0048, -0.0359,  ...,  0.0242,  0.0195,  0.0404],\n        [ 0.0251, -0.0041,  0.0561,  ...,  0.0504,  0.0018,  0.0654],\n        [-0.0067,  0.0276, -0.0018,  ..., -0.0227, -0.0023, -0.0453],\n        ...,\n        [-0.0126,  0.0173, -0.0646,  ...,  0.0334,  0.0135,  0.0570],\n        [-0.0440, -0.0183,  0.0255,  ...,  0.0135, -0.0230,  0.0204],\n        [-0.0123,  0.0095, -0.0018,  ...,  0.0098, -0.0019, -0.0349]], dtype=torch.float16), '9.to_k_lora.up.weight': tensor([[-0.0101, -0.0098, -0.0319,  ..., -0.0339, -0.0018, -0.0022],\n        [ 0.0110, -0.0086,  0.0040,  ..., -0.0052, -0.0119,  0.0602],\n        [-0.0165,  0.0260, -0.0460,  ..., -0.0510, -0.0219,  0.0063],\n        ...,\n        [ 0.0488,  0.1022,  0.0120,  ...,  0.0503,  0.0369,  0.0029],\n        [ 0.0439, -0.0378, -0.0291,  ..., -0.0495, -0.0741, -0.0548],\n        [ 0.0328, -0.0263, -0.0266,  ..., -0.0050, -0.0238,  0.0026]], dtype=torch.float16), '9.to_v_lora.down.weight': tensor([[ 0.0031, -0.0403, -0.0011,  ..., -0.0017,  0.0031, -0.0245],\n        [ 0.0309,  0.0444, -0.0094,  ...,  0.0118,  0.0101,  0.0127],\n        [-0.0108, -0.0515, -0.0417,  ...,  0.0202, -0.0123, -0.0119],\n        ...,\n        [-0.0172, -0.1044, -0.0265,  ..., -0.0049, -0.0040, -0.0395],\n        [ 0.0163, -0.0374, -0.0793,  ..., -0.0027, -0.0018,  0.0463],\n        [ 0.0219, -0.0255, -0.0071,  ...,  0.0018, -0.0049, -0.0485]], dtype=torch.float16), '9.to_v_lora.up.weight': tensor([[ 9.0714e-03, -1.0826e-02,  2.8931e-02,  ...,  1.8829e-02, -1.8951e-02, -5.8403e-03],\n        [ 8.0049e-05, -1.0590e-02,  2.6627e-02,  ...,  9.4833e-03, -3.8738e-03, -5.9624e-03],\n        [ 1.1848e-02,  2.1103e-02,  9.1019e-03,  ...,  3.8574e-02, -1.1055e-02,  4.2816e-02],\n        ...,\n        [ 1.7202e-04, -2.8793e-02,  7.6027e-03,  ...,  1.2001e-02, -1.0185e-02,  1.8196e-03],\n        [ 3.0640e-02, -3.3600e-02,  3.9520e-02,  ..., -4.0070e-02, -1.6541e-02,  9.9792e-03],\n        [ 5.1392e-02, -6.0577e-02, -1.8356e-02,  ...,  6.8207e-03, -3.0487e-02, -8.7814e-03]], dtype=torch.float16), '9.to_out_lora.down.weight': tensor([[ 0.0374,  0.0438,  0.0346,  ...,  0.0060, -0.0210, -0.0224],\n        [-0.0106,  0.0120, -0.0180,  ..., -0.0158,  0.0384,  0.0092],\n        [-0.0012, -0.0074,  0.0037,  ..., -0.0427, -0.0552,  0.0092],\n        ...,\n        [ 0.0291, -0.0338, -0.0210,  ...,  0.0533,  0.0507,  0.0399],\n        [ 0.0106, -0.0180, -0.0209,  ...,  0.0124, -0.0252, -0.0245],\n        [-0.0345,  0.0447, -0.0425,  ...,  0.0093,  0.0350,  0.0028]], dtype=torch.float16), '9.to_out_lora.up.weight': tensor([[ 0.0155, -0.0327, -0.0274,  ..., -0.0288, -0.0324,  0.0459],\n        [ 0.0321,  0.0218,  0.0341,  ..., -0.0078,  0.0253, -0.0417],\n        [-0.0080,  0.0346,  0.0324,  ..., -0.0170,  0.0206, -0.0108],\n        ...,\n        [ 0.0176,  0.0497, -0.0019,  ..., -0.0299,  0.0114, -0.0243],\n        [-0.0006, -0.0170,  0.0348,  ..., -0.0321, -0.0439,  0.0526],\n        [ 0.0058, -0.0190,  0.0197,  ...,  0.0598, -0.0252,  0.0372]], dtype=torch.float16), '9.to_k_ip.weight': tensor([[ 0.1166, -0.0426,  0.0198,  ...,  0.0103, -0.0036, -0.0684],\n        [ 0.0610,  0.0475, -0.0798,  ..., -0.0407,  0.0372, -0.0996],\n        [-0.0154,  0.0985, -0.0359,  ...,  0.0165, -0.0688, -0.0470],\n        ...,\n        [-0.0156, -0.0219, -0.0538,  ...,  0.0323,  0.0087,  0.0401],\n        [ 0.0325, -0.0226, -0.0890,  ..., -0.0191,  0.0613, -0.0225],\n        [-0.0548,  0.0435,  0.0153,  ...,  0.0229, -0.0003, -0.0853]], dtype=torch.float16), '9.to_v_ip.weight': tensor([[-0.0508, -0.0253, -0.0466,  ..., -0.0306, -0.0143,  0.0067],\n        [ 0.0099,  0.0360, -0.0769,  ...,  0.0343,  0.0247,  0.0593],\n        [-0.0587,  0.0188, -0.0018,  ...,  0.0107, -0.0524, -0.0115],\n        ...,\n        [ 0.0257,  0.0060, -0.0308,  ...,  0.0177, -0.0121,  0.0235],\n        [-0.0238, -0.0359,  0.0052,  ...,  0.0484,  0.0125,  0.0329],\n        [-0.0352, -0.0556,  0.0226,  ...,  0.0079, -0.0452,  0.0170]], dtype=torch.float16), '10.to_q_lora.down.weight': tensor([[-0.0667,  0.0273,  0.0053,  ...,  0.0054,  0.0548, -0.0284],\n        [-0.0028, -0.0282, -0.0106,  ..., -0.0153, -0.0164, -0.0213],\n        [ 0.0026,  0.0163, -0.0171,  ...,  0.0209,  0.0267, -0.0241],\n        ...,\n        [ 0.0124, -0.0290,  0.0443,  ..., -0.0199,  0.0256, -0.0266],\n        [-0.0296, -0.0075, -0.0555,  ..., -0.0011, -0.0208, -0.0522],\n        [ 0.0188, -0.0123,  0.0558,  ...,  0.0414, -0.0162,  0.0392]], dtype=torch.float16), '10.to_q_lora.up.weight': tensor([[-0.0092,  0.0541, -0.0293,  ..., -0.0163,  0.0235, -0.0285],\n        [ 0.0406,  0.0188, -0.0079,  ..., -0.0329,  0.0092, -0.0267],\n        [ 0.0562, -0.0408,  0.0286,  ..., -0.0569,  0.0378,  0.0737],\n        ...,\n        [-0.0101, -0.0601,  0.0039,  ...,  0.0404,  0.0468,  0.0300],\n        [ 0.0127,  0.0058,  0.0002,  ..., -0.0002, -0.0513, -0.0008],\n        [ 0.0388, -0.0401,  0.0138,  ..., -0.0194,  0.0305, -0.0263]], dtype=torch.float16), '10.to_k_lora.down.weight': tensor([[-0.0391,  0.0191, -0.0307,  ...,  0.0175, -0.0093,  0.0032],\n        [-0.0067,  0.0012, -0.0011,  ..., -0.0346, -0.0159, -0.0195],\n        [ 0.0202, -0.0036,  0.0471,  ...,  0.0128,  0.0026, -0.0328],\n        ...,\n        [-0.0430,  0.0475, -0.0312,  ..., -0.0029,  0.0135, -0.0424],\n        [-0.0086,  0.0240, -0.0498,  ...,  0.0008, -0.0236,  0.0298],\n        [-0.0226,  0.0272, -0.0050,  ...,  0.0345,  0.0140,  0.0208]], dtype=torch.float16), '10.to_k_lora.up.weight': tensor([[-0.0046, -0.0195, -0.0089,  ..., -0.0294, -0.0140,  0.0173],\n        [-0.0305, -0.0356,  0.0174,  ..., -0.0426, -0.0102, -0.0265],\n        [ 0.0167, -0.0545,  0.0298,  ...,  0.0517,  0.0002, -0.0245],\n        ...,\n        [-0.0297,  0.0777,  0.0201,  ...,  0.0658,  0.0065, -0.0185],\n        [ 0.0101,  0.0276, -0.0211,  ...,  0.0227, -0.0335, -0.0323],\n        [ 0.0098,  0.0151,  0.0313,  ...,  0.0358,  0.0072, -0.0110]], dtype=torch.float16), '10.to_v_lora.down.weight': tensor([[ 0.0341,  0.0121,  0.0060,  ...,  0.0485,  0.0580, -0.0042],\n        [-0.0170,  0.0276,  0.0490,  ...,  0.0094, -0.0043, -0.0346],\n        [ 0.0267, -0.0488,  0.0041,  ..., -0.0295, -0.0032, -0.0157],\n        ...,\n        [ 0.0536,  0.0300, -0.0030,  ..., -0.0217, -0.0139, -0.0174],\n        [-0.0604, -0.0258, -0.0258,  ..., -0.0021,  0.0495, -0.0215],\n        [ 0.0196, -0.0550, -0.0448,  ...,  0.0417, -0.0011,  0.0167]], dtype=torch.float16), '10.to_v_lora.up.weight': tensor([[-2.4734e-02,  1.3599e-03,  3.1235e-02,  ..., -3.1311e-02,  1.9089e-02, -3.0502e-02],\n        [ 3.8696e-02, -1.4252e-02, -2.8412e-02,  ...,  1.4679e-02,  1.2833e-02, -2.1698e-02],\n        [-9.3994e-03, -2.9083e-02, -2.0279e-02,  ...,  1.1475e-02,  7.2021e-02,  4.5593e-02],\n        ...,\n        [ 2.3270e-02, -3.2928e-02,  1.5022e-02,  ..., -2.7863e-02, -4.0710e-02, -2.4933e-02],\n        [-1.6953e-02, -7.9727e-03, -2.3407e-02,  ..., -2.7008e-03,  6.2637e-03, -1.0864e-02],\n        [ 2.0813e-02, -6.6459e-05,  4.5441e-02,  ..., -1.2718e-02, -9.8648e-03,  2.4506e-02]], dtype=torch.float16), '10.to_out_lora.down.weight': tensor([[ 0.0213,  0.0114, -0.0131,  ...,  0.0101, -0.0220, -0.0204],\n        [-0.0048,  0.0974,  0.0132,  ...,  0.0248, -0.0249,  0.0206],\n        [ 0.0376,  0.0118,  0.0371,  ...,  0.0237,  0.0117, -0.0204],\n        ...,\n        [ 0.0034, -0.0003, -0.0060,  ...,  0.0341, -0.0116, -0.0015],\n        [-0.0058, -0.0130, -0.0268,  ..., -0.0141, -0.0234, -0.0280],\n        [ 0.0229, -0.0186, -0.0248,  ...,  0.0057,  0.0094, -0.0281]], dtype=torch.float16), '10.to_out_lora.up.weight': tensor([[ 0.0075,  0.0170,  0.0040,  ..., -0.0126, -0.0269, -0.0284],\n        [ 0.0057,  0.0451,  0.0166,  ...,  0.0235, -0.0044,  0.0751],\n        [ 0.0096,  0.0082,  0.0496,  ..., -0.0335, -0.0395,  0.0189],\n        ...,\n        [ 0.0205,  0.0387, -0.0478,  ...,  0.0303,  0.0219,  0.0248],\n        [-0.0320,  0.0009,  0.0515,  ...,  0.0245,  0.0052, -0.0367],\n        [ 0.0005, -0.0259, -0.0281,  ..., -0.0100,  0.0412,  0.0080]], dtype=torch.float16), '11.to_q_lora.down.weight': tensor([[-0.0089, -0.0202,  0.0074,  ...,  0.0144,  0.0721,  0.0079],\n        [ 0.0078,  0.0192, -0.0481,  ..., -0.0152, -0.0242,  0.0424],\n        [-0.0183, -0.0393, -0.0089,  ..., -0.0153, -0.0486, -0.0345],\n        ...,\n        [ 0.0172, -0.1351, -0.0259,  ...,  0.0082,  0.0145, -0.0287],\n        [-0.0085,  0.0043, -0.0746,  ...,  0.0093, -0.0170,  0.0797],\n        [-0.0217, -0.0079,  0.0020,  ..., -0.0064,  0.0394,  0.0111]], dtype=torch.float16), '11.to_q_lora.up.weight': tensor([[ 4.0253e-02,  2.7695e-02, -1.0277e-02,  ..., -7.1045e-02,  2.9202e-03, -4.4159e-02],\n        [-5.3711e-03,  6.7200e-02,  6.8542e-02,  ...,  6.1768e-02, -4.1046e-02, -7.5645e-03],\n        [-4.2084e-02,  2.9404e-02, -3.4424e-02,  ..., -6.8779e-03,  2.8351e-02,  4.4006e-02],\n        ...,\n        [-1.9547e-02,  7.3509e-03, -8.5602e-03,  ...,  1.4915e-02, -6.2469e-02,  6.4659e-04],\n        [ 2.4963e-02,  2.1423e-02, -3.4668e-02,  ..., -4.0161e-02, -1.3588e-02, -9.0103e-03],\n        [-3.3386e-02, -6.0692e-03, -4.2877e-02,  ..., -4.6204e-02, -4.0352e-05, -3.0655e-02]], dtype=torch.float16), '11.to_k_lora.down.weight': tensor([[-0.0371,  0.0077, -0.0582,  ..., -0.0369,  0.0733, -0.0227],\n        [ 0.0008,  0.0403,  0.0263,  ..., -0.0070,  0.0332, -0.0232],\n        [-0.0223,  0.0417, -0.0875,  ..., -0.0597, -0.0307,  0.0108],\n        ...,\n        [ 0.0066, -0.0567,  0.0467,  ...,  0.0060, -0.0274, -0.0148],\n        [-0.0320,  0.0424,  0.0070,  ...,  0.0005,  0.0192, -0.0043],\n        [ 0.0141,  0.0042,  0.0304,  ...,  0.0179,  0.0449,  0.0239]], dtype=torch.float16), '11.to_k_lora.up.weight': tensor([[-0.0245,  0.0658,  0.0480,  ...,  0.0096, -0.0028, -0.0822],\n        [ 0.0638,  0.0364,  0.0193,  ...,  0.0421, -0.0116, -0.0049],\n        [-0.0554,  0.0369,  0.0683,  ...,  0.0263,  0.0463,  0.0713],\n        ...,\n        [-0.0191,  0.0023,  0.0139,  ..., -0.0202, -0.0296,  0.0360],\n        [ 0.0038,  0.0793, -0.0286,  ...,  0.0062,  0.0216,  0.0338],\n        [-0.0367,  0.0384,  0.0117,  ..., -0.0250,  0.0118,  0.0075]], dtype=torch.float16), '11.to_v_lora.down.weight': tensor([[-3.3051e-02, -1.0880e-02,  6.0913e-02,  ...,  1.2383e-02, -2.3956e-02,  7.2174e-03],\n        [ 6.2408e-03, -1.0742e-02, -2.7206e-02,  ..., -7.0038e-03,  6.8970e-03,  1.5732e-02],\n        [ 8.0719e-03,  6.5918e-02,  3.5934e-03,  ...,  8.4152e-03,  5.1270e-03, -5.2834e-03],\n        ...,\n        [-1.2741e-02,  1.5190e-02, -6.5552e-02,  ...,  2.7332e-03,  1.2703e-02, -5.5408e-04],\n        [ 5.6038e-03,  1.2140e-01,  5.1677e-05,  ..., -6.7329e-04,  3.7823e-03,  9.1400e-03],\n        [ 1.8072e-03, -2.0157e-02, -3.5004e-02,  ...,  2.2583e-02,  4.3396e-02,  1.9073e-02]], dtype=torch.float16), '11.to_v_lora.up.weight': tensor([[-0.0271,  0.0272,  0.0166,  ...,  0.0256, -0.0136, -0.0031],\n        [ 0.0012, -0.0131, -0.0061,  ...,  0.0271, -0.0090,  0.0056],\n        [ 0.0183,  0.0021, -0.0258,  ...,  0.0138, -0.0201, -0.0461],\n        ...,\n        [ 0.0342,  0.0018,  0.0273,  ..., -0.0340,  0.0134,  0.0505],\n        [ 0.0200, -0.0432,  0.0237,  ..., -0.0156,  0.0116,  0.0088],\n        [-0.0131, -0.0142,  0.0173,  ...,  0.0236,  0.0478,  0.0112]], dtype=torch.float16), '11.to_out_lora.down.weight': tensor([[ 0.0109, -0.0020, -0.0357,  ...,  0.0365, -0.0056,  0.0101],\n        [ 0.0007, -0.0231, -0.0077,  ..., -0.0272,  0.0687, -0.0540],\n        [ 0.0388, -0.1191,  0.0175,  ...,  0.0521, -0.0249, -0.0328],\n        ...,\n        [-0.0105,  0.0387,  0.0095,  ...,  0.0035, -0.0738, -0.0397],\n        [-0.0044, -0.0146,  0.0223,  ...,  0.0470, -0.0148,  0.0307],\n        [ 0.0014,  0.0256, -0.0573,  ..., -0.0060,  0.0045, -0.0180]], dtype=torch.float16), '11.to_out_lora.up.weight': tensor([[-0.0806,  0.0043,  0.0213,  ...,  0.0372, -0.0324, -0.0126],\n        [-0.0018, -0.0153,  0.0318,  ..., -0.0416,  0.0046, -0.0287],\n        [-0.0559, -0.0434,  0.0674,  ...,  0.0641, -0.0520,  0.0408],\n        ...,\n        [ 0.0721,  0.0142, -0.0312,  ..., -0.0629,  0.0720, -0.0242],\n        [ 0.0180, -0.0137, -0.0093,  ...,  0.0164,  0.0092, -0.0530],\n        [ 0.0147, -0.0215,  0.0386,  ...,  0.0274, -0.0085,  0.0150]], dtype=torch.float16), '11.to_k_ip.weight': tensor([[ 0.0505,  0.0121,  0.0168,  ..., -0.0060,  0.0004, -0.0392],\n        [ 0.0015, -0.1176,  0.0599,  ...,  0.0224,  0.0618,  0.0305],\n        [ 0.0250, -0.0767, -0.0028,  ..., -0.0520,  0.0062, -0.0521],\n        ...,\n        [-0.0280, -0.0037, -0.0543,  ..., -0.0393, -0.0091,  0.0507],\n        [ 0.0102, -0.0606,  0.0386,  ..., -0.0330,  0.0550,  0.0482],\n        [-0.0583,  0.0045,  0.0329,  ..., -0.0044, -0.0034,  0.0532]], dtype=torch.float16), '11.to_v_ip.weight': tensor([[-0.0102, -0.0243, -0.0319,  ...,  0.0005,  0.0003, -0.0740],\n        [-0.0257,  0.0177, -0.0367,  ..., -0.0136,  0.0144, -0.0135],\n        [ 0.0244, -0.0295,  0.0173,  ...,  0.0029, -0.0162, -0.0232],\n        ...,\n        [-0.0200, -0.0031, -0.0412,  ...,  0.0072, -0.0185,  0.0075],\n        [-0.0433,  0.0233,  0.0453,  ..., -0.0214, -0.0060, -0.0068],\n        [ 0.0257, -0.0225,  0.0257,  ..., -0.0044, -0.0449,  0.0363]], dtype=torch.float16), '12.to_q_lora.down.weight': tensor([[-0.0341,  0.0527,  0.0126,  ...,  0.0004,  0.0356, -0.0332],\n        [ 0.0245, -0.0286, -0.0172,  ...,  0.0202,  0.0069,  0.0083],\n        [-0.0546, -0.0092, -0.0186,  ..., -0.0045, -0.0083, -0.0019],\n        ...,\n        [-0.0510,  0.0453, -0.0108,  ...,  0.0342, -0.0489,  0.0528],\n        [-0.0464,  0.1046,  0.0434,  ...,  0.0154,  0.0049, -0.0240],\n        [-0.0017,  0.0127, -0.0073,  ..., -0.0295, -0.0436,  0.0076]], dtype=torch.float16), '12.to_q_lora.up.weight': tensor([[-0.0350,  0.0245, -0.0690,  ..., -0.0380, -0.0225, -0.0298],\n        [ 0.0662,  0.0647, -0.0087,  ..., -0.0298, -0.0298, -0.0452],\n        [-0.0246,  0.0627,  0.0511,  ...,  0.0061, -0.0341, -0.0454],\n        ...,\n        [-0.0241, -0.0063,  0.0170,  ..., -0.0294, -0.0305,  0.0376],\n        [-0.0621,  0.0159, -0.0180,  ..., -0.0529,  0.0114,  0.0710],\n        [-0.0098,  0.0082, -0.0024,  ...,  0.0529,  0.0368,  0.0703]], dtype=torch.float16), '12.to_k_lora.down.weight': tensor([[-0.0158, -0.0171, -0.0142,  ..., -0.0372, -0.0668,  0.0366],\n        [-0.0410,  0.0004,  0.0368,  ...,  0.0098, -0.0272,  0.0416],\n        [-0.0187,  0.0194, -0.0181,  ...,  0.0593,  0.0037, -0.0611],\n        ...,\n        [-0.0049, -0.0221, -0.0012,  ...,  0.0383,  0.0358,  0.0163],\n        [ 0.0669, -0.0290, -0.0515,  ..., -0.0093,  0.0155,  0.0225],\n        [ 0.0021, -0.0326, -0.0243,  ..., -0.0351,  0.0409, -0.0375]], dtype=torch.float16), '12.to_k_lora.up.weight': tensor([[-0.0504, -0.0387, -0.0173,  ..., -0.1059, -0.0354, -0.0128],\n        [ 0.0515,  0.0106, -0.0179,  ...,  0.0100, -0.0018, -0.0598],\n        [-0.0066,  0.0156,  0.0204,  ..., -0.0030, -0.1027,  0.0086],\n        ...,\n        [ 0.0273,  0.0654,  0.0004,  ..., -0.0403,  0.0757,  0.0491],\n        [-0.0081, -0.0354, -0.0038,  ..., -0.0375, -0.0192, -0.0396],\n        [ 0.0174,  0.0346,  0.0307,  ...,  0.0028,  0.0063,  0.0084]], dtype=torch.float16), '12.to_v_lora.down.weight': tensor([[ 0.0334,  0.0138,  0.0648,  ..., -0.0035, -0.0399, -0.0011],\n        [ 0.0100, -0.0192,  0.0027,  ...,  0.0292,  0.0029, -0.0116],\n        [-0.0008,  0.0652,  0.0154,  ...,  0.0024,  0.0391,  0.0360],\n        ...,\n        [ 0.0617,  0.0052,  0.0290,  ...,  0.0142, -0.0314,  0.0153],\n        [ 0.0184,  0.0068,  0.0623,  ...,  0.0234, -0.0017, -0.0363],\n        [-0.0097,  0.0033, -0.0213,  ...,  0.0037, -0.0023, -0.0298]], dtype=torch.float16), '12.to_v_lora.up.weight': tensor([[-1.8372e-02, -5.3802e-02,  3.0875e-05,  ...,  4.0588e-02,  1.4801e-02,  2.4307e-02],\n        [ 3.1189e-02, -1.7319e-02, -5.5122e-03,  ...,  4.3060e-02,  3.0121e-02,  2.6978e-02],\n        [-2.2461e-02, -1.8204e-02, -6.8188e-04,  ..., -2.8458e-02,  5.4749e-02,  2.2766e-02],\n        ...,\n        [ 2.1652e-02,  2.0103e-03, -4.4670e-03,  ..., -3.3081e-02, -4.0039e-02,  2.4887e-02],\n        [ 5.3711e-03,  8.4534e-03, -7.3059e-02,  ...,  5.7755e-03,  2.8336e-02,  3.3203e-02],\n        [ 1.2085e-02, -1.4915e-02,  1.7868e-02,  ...,  4.5013e-02,  6.7215e-03,  1.3664e-02]], dtype=torch.float16), '12.to_out_lora.down.weight': tensor([[-0.0231,  0.0211, -0.0112,  ..., -0.0243,  0.0138, -0.0291],\n        [-0.0284,  0.0630,  0.0312,  ...,  0.0158, -0.0009, -0.0099],\n        [ 0.0276, -0.0332,  0.0308,  ..., -0.0294,  0.0024,  0.0187],\n        ...,\n        [-0.0270, -0.0119,  0.0459,  ..., -0.0611,  0.0128,  0.0241],\n        [ 0.0193, -0.0441,  0.0160,  ..., -0.0201, -0.0198, -0.0571],\n        [ 0.0218, -0.0093,  0.0264,  ..., -0.0143, -0.0033,  0.0315]], dtype=torch.float16), '12.to_out_lora.up.weight': tensor([[ 0.0114,  0.0482,  0.0164,  ...,  0.0093,  0.0217, -0.0476],\n        [-0.0250,  0.0266, -0.0066,  ..., -0.0228,  0.0063, -0.0100],\n        [-0.0009,  0.0209,  0.0032,  ...,  0.0064,  0.0228, -0.0309],\n        ...,\n        [ 0.0384,  0.0451, -0.0004,  ..., -0.0103, -0.0064,  0.0212],\n        [ 0.0078,  0.0082, -0.0096,  ...,  0.0380, -0.0485, -0.0432],\n        [ 0.0234,  0.0302, -0.0154,  ...,  0.0166,  0.0072,  0.0078]], dtype=torch.float16), '13.to_q_lora.down.weight': tensor([[-0.0301, -0.0220, -0.0241,  ...,  0.0494,  0.0004,  0.0056],\n        [ 0.0082, -0.0251,  0.0327,  ..., -0.0402,  0.0065,  0.0048],\n        [-0.0342, -0.0270,  0.0049,  ..., -0.0439, -0.0291, -0.0080],\n        ...,\n        [ 0.0027, -0.0167,  0.0199,  ...,  0.0287,  0.0157, -0.0070],\n        [-0.0389,  0.0077,  0.0732,  ..., -0.0499,  0.0729,  0.0508],\n        [-0.0106, -0.0531,  0.0011,  ..., -0.0163,  0.0324, -0.0109]], dtype=torch.float16), '13.to_q_lora.up.weight': tensor([[ 0.0042,  0.0050, -0.0177,  ..., -0.0001,  0.0206, -0.0192],\n        [-0.0038,  0.0151,  0.0177,  ...,  0.0353,  0.0264,  0.0087],\n        [ 0.0170,  0.0219,  0.0087,  ..., -0.0194,  0.0333, -0.1019],\n        ...,\n        [ 0.0315, -0.0179, -0.0598,  ...,  0.0568,  0.0439, -0.0715],\n        [ 0.0288, -0.0012,  0.0416,  ...,  0.0746, -0.0129, -0.0081],\n        [ 0.0854, -0.0755, -0.0102,  ..., -0.0016, -0.0583, -0.0674]], dtype=torch.float16), '13.to_k_lora.down.weight': tensor([[-0.0397, -0.0507, -0.0155,  ...,  0.0139,  0.0055,  0.0226],\n        [ 0.0530, -0.0023,  0.0130,  ..., -0.0109,  0.0191, -0.0034],\n        [-0.0401, -0.0011, -0.0280,  ..., -0.0194,  0.0509, -0.0182],\n        ...,\n        [-0.0219,  0.0454, -0.0531,  ..., -0.0036, -0.0200, -0.0521],\n        [-0.0222,  0.0066, -0.0264,  ..., -0.0015, -0.0184,  0.0261],\n        [-0.0461,  0.0240, -0.0455,  ...,  0.0093,  0.0099, -0.0097]], dtype=torch.float16), '13.to_k_lora.up.weight': tensor([[ 0.0526,  0.0099, -0.0274,  ..., -0.0135, -0.0547, -0.0091],\n        [-0.0604,  0.0098, -0.0380,  ..., -0.0334,  0.0040,  0.0460],\n        [ 0.0213, -0.0119,  0.0453,  ...,  0.0580, -0.1019,  0.0323],\n        ...,\n        [-0.0559, -0.0117,  0.1141,  ..., -0.0241, -0.0244,  0.0280],\n        [-0.0508, -0.0167,  0.0482,  ..., -0.0247,  0.0556, -0.0354],\n        [-0.0716,  0.0319, -0.0299,  ...,  0.0388, -0.0275,  0.0444]], dtype=torch.float16), '13.to_v_lora.down.weight': tensor([[-0.0020,  0.0303,  0.0302,  ...,  0.0117,  0.0210, -0.0597],\n        [ 0.0146, -0.0077,  0.0701,  ...,  0.0122, -0.0028,  0.0271],\n        [ 0.0045,  0.0961, -0.0455,  ..., -0.0211, -0.0096, -0.0369],\n        ...,\n        [-0.0225, -0.0291,  0.0807,  ..., -0.0120,  0.0309,  0.0826],\n        [-0.0175, -0.0432,  0.0114,  ..., -0.0081, -0.0068, -0.0357],\n        [-0.0449,  0.0149, -0.0798,  ...,  0.0012, -0.0018,  0.0154]], dtype=torch.float16), '13.to_v_lora.up.weight': tensor([[ 0.0013,  0.0179, -0.0145,  ..., -0.0062,  0.0157, -0.0104],\n        [ 0.0313,  0.0224,  0.0456,  ..., -0.0450, -0.0149,  0.0226],\n        [-0.0291,  0.0031, -0.0562,  ..., -0.0073, -0.0183,  0.0283],\n        ...,\n        [ 0.0231, -0.0129, -0.0398,  ..., -0.0054,  0.0094, -0.0115],\n        [-0.0002,  0.0107, -0.0127,  ...,  0.0061,  0.0075,  0.0621],\n        [-0.0387, -0.0337, -0.0117,  ..., -0.0633, -0.0024, -0.0108]], dtype=torch.float16), '13.to_out_lora.down.weight': tensor([[-0.0487, -0.0304, -0.0195,  ..., -0.0505,  0.0192,  0.0196],\n        [-0.0218, -0.0562,  0.0355,  ...,  0.0438,  0.0156, -0.0698],\n        [ 0.0260,  0.0406,  0.0542,  ..., -0.0324,  0.0273, -0.0698],\n        ...,\n        [ 0.0275, -0.0197,  0.0404,  ...,  0.0065, -0.0119,  0.0421],\n        [ 0.0049, -0.0275,  0.0288,  ..., -0.0008, -0.0057,  0.0240],\n        [-0.0408,  0.0004, -0.0163,  ..., -0.0156,  0.0403,  0.0733]], dtype=torch.float16), '13.to_out_lora.up.weight': tensor([[-0.0591,  0.0239, -0.0064,  ...,  0.0126,  0.1027,  0.0055],\n        [ 0.0676,  0.0034, -0.0553,  ...,  0.0380, -0.1110, -0.0218],\n        [-0.0257, -0.0006,  0.0532,  ..., -0.0023,  0.0107,  0.0216],\n        ...,\n        [-0.0027, -0.0616,  0.0698,  ...,  0.0258,  0.0814, -0.0090],\n        [ 0.0154,  0.0108, -0.0252,  ...,  0.0043, -0.0039,  0.0461],\n        [-0.0217, -0.0109, -0.0573,  ..., -0.0714,  0.0430,  0.0427]], dtype=torch.float16), '13.to_k_ip.weight': tensor([[ 0.0292, -0.0186, -0.0551,  ..., -0.0097, -0.0714,  0.0273],\n        [ 0.0242, -0.0964,  0.0848,  ..., -0.0204,  0.0629,  0.0103],\n        [-0.0088,  0.0252,  0.0025,  ..., -0.0697, -0.0425,  0.0167],\n        ...,\n        [ 0.0764,  0.0285,  0.0559,  ...,  0.0651, -0.0242, -0.0769],\n        [-0.0534,  0.0738, -0.0905,  ..., -0.0613, -0.0048, -0.0382],\n        [ 0.0479,  0.0413,  0.0388,  ..., -0.0113, -0.0115,  0.0583]], dtype=torch.float16), '13.to_v_ip.weight': tensor([[-0.0008,  0.0128, -0.0355,  ..., -0.0410,  0.0821, -0.0719],\n        [-0.0246,  0.0459, -0.0729,  ...,  0.0264, -0.0806, -0.0704],\n        [-0.0775, -0.0560,  0.0355,  ...,  0.0173, -0.0227, -0.0760],\n        ...,\n        [ 0.0209, -0.0128,  0.1073,  ..., -0.0407, -0.0969,  0.0851],\n        [-0.0860, -0.0927,  0.0196,  ...,  0.0449,  0.0041,  0.0940],\n        [ 0.0605,  0.0433,  0.0202,  ...,  0.0393, -0.0586,  0.0390]], dtype=torch.float16), '14.to_q_lora.down.weight': tensor([[ 0.0353, -0.0200, -0.0464,  ..., -0.0230,  0.0206,  0.0012],\n        [ 0.0077, -0.0488,  0.0275,  ..., -0.0209, -0.0087, -0.0130],\n        [-0.0243, -0.0070, -0.0088,  ...,  0.0479, -0.0246, -0.0205],\n        ...,\n        [-0.0137,  0.0349,  0.0017,  ...,  0.0043, -0.0069,  0.0097],\n        [-0.0042,  0.0092,  0.0326,  ..., -0.0109, -0.0203,  0.0360],\n        [-0.0126,  0.0159,  0.0018,  ..., -0.0325,  0.0229, -0.0175]], dtype=torch.float16), '14.to_q_lora.up.weight': tensor([[-0.0446,  0.0071, -0.0195,  ..., -0.0703,  0.0476, -0.0272],\n        [-0.0153, -0.0086,  0.0331,  ..., -0.0603,  0.0179,  0.0034],\n        [-0.0103,  0.0204, -0.0239,  ..., -0.0056, -0.0616,  0.0165],\n        ...,\n        [ 0.0251, -0.0325,  0.0140,  ...,  0.0446,  0.0509, -0.0436],\n        [ 0.0112, -0.0349,  0.0165,  ..., -0.0225, -0.0078,  0.0188],\n        [ 0.0101,  0.0241,  0.0601,  ...,  0.0212, -0.0210,  0.0100]], dtype=torch.float16), '14.to_k_lora.down.weight': tensor([[ 0.0104, -0.0355,  0.0447,  ...,  0.0443, -0.0352, -0.0022],\n        [ 0.0030, -0.0319, -0.0045,  ...,  0.0084,  0.0040,  0.0133],\n        [-0.0198,  0.0307, -0.0561,  ..., -0.0414,  0.0062, -0.0285],\n        ...,\n        [ 0.0098,  0.0171,  0.0517,  ...,  0.0602,  0.0729, -0.0267],\n        [-0.0231, -0.0267,  0.0170,  ...,  0.0044, -0.0197, -0.0103],\n        [-0.0539,  0.0226,  0.0198,  ..., -0.0637,  0.0401, -0.0137]], dtype=torch.float16), '14.to_k_lora.up.weight': tensor([[-0.0291,  0.0044,  0.0215,  ...,  0.0281, -0.0013, -0.0231],\n        [ 0.0154,  0.0040, -0.0564,  ...,  0.0728,  0.0354, -0.0116],\n        [ 0.0082,  0.0049,  0.0059,  ..., -0.0337, -0.0114,  0.0751],\n        ...,\n        [ 0.0179,  0.0511, -0.0255,  ...,  0.0277,  0.0017,  0.0526],\n        [ 0.0023,  0.0449, -0.0199,  ..., -0.0059, -0.0197, -0.0183],\n        [-0.0025, -0.0018,  0.0413,  ...,  0.0577, -0.0285,  0.0127]], dtype=torch.float16), '14.to_v_lora.down.weight': tensor([[-0.0136, -0.0982, -0.0172,  ..., -0.0083, -0.0112, -0.0166],\n        [-0.0013,  0.0412,  0.0350,  ...,  0.0262, -0.0175,  0.0377],\n        [-0.0165, -0.0417,  0.0061,  ..., -0.0040,  0.0105,  0.0948],\n        ...,\n        [-0.0195,  0.0157, -0.0024,  ..., -0.0256,  0.0224,  0.0844],\n        [-0.0075,  0.0026,  0.0103,  ..., -0.0061, -0.0489, -0.0330],\n        [ 0.0203,  0.0006,  0.0262,  ...,  0.0127,  0.0107,  0.0562]], dtype=torch.float16), '14.to_v_lora.up.weight': tensor([[ 0.0022,  0.0080, -0.0093,  ...,  0.0064, -0.0131,  0.0414],\n        [ 0.0201, -0.0590,  0.0113,  ...,  0.0223, -0.0100, -0.0370],\n        [ 0.0417,  0.0620, -0.0112,  ..., -0.0148,  0.0020, -0.0131],\n        ...,\n        [-0.0385,  0.0059, -0.0275,  ..., -0.0668, -0.0378, -0.0144],\n        [ 0.0084, -0.0220,  0.0615,  ..., -0.0025, -0.0035, -0.0165],\n        [ 0.0471, -0.0016,  0.0140,  ...,  0.0020, -0.0014,  0.0164]], dtype=torch.float16), '14.to_out_lora.down.weight': tensor([[-0.0090,  0.0108, -0.0104,  ...,  0.0033, -0.0243,  0.0027],\n        [ 0.0075,  0.0182,  0.0062,  ...,  0.0375, -0.0299,  0.0041],\n        [-0.0157,  0.0216,  0.0653,  ...,  0.0501,  0.0370,  0.0077],\n        ...,\n        [-0.0667,  0.0077,  0.0620,  ..., -0.0040, -0.0309,  0.0526],\n        [-0.0129, -0.0125, -0.0591,  ...,  0.0247,  0.0104, -0.0113],\n        [ 0.0016, -0.0218, -0.0337,  ..., -0.0399, -0.0509,  0.0323]], dtype=torch.float16), '14.to_out_lora.up.weight': tensor([[-0.0222,  0.0170, -0.0173,  ...,  0.0220, -0.0359,  0.0091],\n        [ 0.0092, -0.0076, -0.0422,  ...,  0.0146, -0.0189, -0.0010],\n        [ 0.0047,  0.0456,  0.0478,  ..., -0.0011, -0.0260,  0.0395],\n        ...,\n        [-0.0194, -0.0002, -0.0036,  ...,  0.0236, -0.0112, -0.0040],\n        [ 0.0441, -0.0200, -0.0311,  ..., -0.0199, -0.0353,  0.0160],\n        [-0.0142,  0.0516, -0.0111,  ..., -0.0459, -0.0352,  0.0313]], dtype=torch.float16), '15.to_q_lora.down.weight': tensor([[ 0.0149, -0.0141, -0.0181,  ...,  0.0074, -0.0097,  0.0512],\n        [-0.0269,  0.0037, -0.0097,  ...,  0.0121, -0.0137,  0.0284],\n        [ 0.0130, -0.0412,  0.0083,  ..., -0.0137, -0.0384, -0.0048],\n        ...,\n        [-0.0363,  0.0427, -0.0183,  ..., -0.0145,  0.0137, -0.0401],\n        [-0.0145,  0.0129,  0.0369,  ..., -0.0041,  0.0298, -0.0056],\n        [-0.0910,  0.0399,  0.0590,  ..., -0.0012,  0.0123,  0.0323]], dtype=torch.float16), '15.to_q_lora.up.weight': tensor([[-0.0037,  0.0016, -0.0097,  ...,  0.0081, -0.0138, -0.0470],\n        [-0.0092,  0.0193, -0.0304,  ...,  0.0079,  0.0029,  0.0292],\n        [ 0.0194, -0.0052, -0.0474,  ...,  0.0082, -0.0341, -0.0265],\n        ...,\n        [ 0.0544,  0.0563,  0.0058,  ...,  0.0066,  0.0561,  0.0872],\n        [ 0.0362,  0.0290, -0.0305,  ..., -0.0414,  0.0269,  0.0063],\n        [ 0.0230,  0.0494,  0.0009,  ...,  0.0104,  0.0268, -0.0068]], dtype=torch.float16), '15.to_k_lora.down.weight': tensor([[ 0.0615,  0.0586,  0.0095,  ..., -0.0967,  0.0282, -0.0085],\n        [ 0.0442,  0.0743,  0.0116,  ..., -0.0103, -0.0426, -0.0607],\n        [-0.0079,  0.0379, -0.0009,  ...,  0.0119,  0.0421,  0.0299],\n        ...,\n        [-0.0199, -0.0589, -0.0739,  ...,  0.0222,  0.0168, -0.0759],\n        [-0.0522, -0.0272, -0.0054,  ...,  0.0223, -0.0149,  0.0065],\n        [ 0.0098, -0.0017, -0.0385,  ...,  0.0041,  0.0138, -0.0124]], dtype=torch.float16), '15.to_k_lora.up.weight': tensor([[ 0.0465,  0.1011,  0.0071,  ...,  0.0133,  0.0168,  0.0356],\n        [ 0.0638,  0.0172, -0.0102,  ...,  0.0285, -0.0267, -0.0003],\n        [-0.1103, -0.0178, -0.0125,  ..., -0.0275,  0.0281, -0.0101],\n        ...,\n        [-0.0082, -0.0183, -0.0494,  ...,  0.0401, -0.0091, -0.0014],\n        [ 0.0257, -0.0252,  0.0210,  ...,  0.0158, -0.0114,  0.0049],\n        [ 0.0435, -0.0220, -0.0235,  ...,  0.0569,  0.0139,  0.0385]], dtype=torch.float16), '15.to_v_lora.down.weight': tensor([[-0.0234, -0.0128, -0.0818,  ...,  0.0109, -0.0196, -0.0022],\n        [-0.0075, -0.0704, -0.0190,  ...,  0.0299,  0.0127,  0.0161],\n        [-0.0094, -0.0106, -0.0255,  ...,  0.0051,  0.0193,  0.0684],\n        ...,\n        [ 0.0132,  0.0525,  0.0773,  ...,  0.0106,  0.0166,  0.0459],\n        [ 0.0182, -0.0405, -0.0318,  ...,  0.0269, -0.0218, -0.0419],\n        [-0.0140,  0.0293, -0.0610,  ...,  0.0038,  0.0106, -0.0110]], dtype=torch.float16), '15.to_v_lora.up.weight': tensor([[ 0.0678,  0.0087,  0.0171,  ...,  0.0030,  0.0126,  0.0171],\n        [-0.0162, -0.0106,  0.0119,  ...,  0.0387,  0.0275, -0.0547],\n        [-0.0151, -0.0246, -0.0316,  ...,  0.0111, -0.0210,  0.0253],\n        ...,\n        [-0.0151, -0.0375,  0.0238,  ..., -0.0032,  0.0027,  0.0391],\n        [ 0.0007, -0.0010, -0.0101,  ..., -0.0756, -0.0347, -0.0195],\n        [-0.0602,  0.0417, -0.0139,  ..., -0.0222,  0.0149,  0.0434]], dtype=torch.float16), '15.to_out_lora.down.weight': tensor([[-0.0643, -0.0103,  0.0407,  ...,  0.0047, -0.0565,  0.0340],\n        [-0.0604,  0.0216,  0.0540,  ..., -0.0205,  0.0105,  0.0289],\n        [-0.0584, -0.0787,  0.0436,  ...,  0.0967,  0.0012, -0.0351],\n        ...,\n        [-0.0527, -0.0422,  0.0101,  ...,  0.0397,  0.0696,  0.0521],\n        [ 0.0047,  0.0376,  0.0151,  ...,  0.0157,  0.0536,  0.0287],\n        [-0.0055,  0.0421,  0.0341,  ..., -0.0780, -0.0230, -0.0489]], dtype=torch.float16), '15.to_out_lora.up.weight': tensor([[ 0.0149, -0.0532,  0.0050,  ...,  0.0072,  0.0799, -0.0024],\n        [ 0.0220,  0.0164,  0.0096,  ..., -0.0237, -0.0062, -0.0048],\n        [ 0.0171, -0.0372, -0.0103,  ...,  0.0172,  0.0056, -0.0435],\n        ...,\n        [-0.0010, -0.0185,  0.0003,  ..., -0.0551,  0.0271,  0.0505],\n        [ 0.0339, -0.0384, -0.0316,  ..., -0.0212,  0.0063,  0.0152],\n        [-0.0088, -0.0416,  0.0412,  ...,  0.0190,  0.0346, -0.0550]], dtype=torch.float16), '15.to_k_ip.weight': tensor([[-0.0010,  0.0097, -0.0138,  ..., -0.0245, -0.1068,  0.0293],\n        [-0.0458, -0.0192,  0.0149,  ..., -0.0815, -0.0267,  0.0616],\n        [ 0.0789, -0.0194, -0.0627,  ..., -0.0457, -0.0019, -0.0554],\n        ...,\n        [-0.0963, -0.0731, -0.0138,  ..., -0.0263,  0.0583,  0.0574],\n        [-0.0252, -0.0328,  0.0114,  ..., -0.0117,  0.0142, -0.0101],\n        [ 0.0859, -0.0495,  0.0359,  ..., -0.0726,  0.0145,  0.0856]], dtype=torch.float16), '15.to_v_ip.weight': tensor([[-0.0425,  0.0970, -0.0168,  ..., -0.0486, -0.0696, -0.0646],\n        [-0.0179,  0.0094, -0.0278,  ...,  0.0320,  0.0112, -0.0942],\n        [ 0.0106,  0.0805,  0.0233,  ..., -0.0097,  0.0171,  0.0179],\n        ...,\n        [ 0.0070,  0.0515,  0.0393,  ..., -0.0468, -0.0525,  0.0114],\n        [ 0.0327,  0.0627,  0.0222,  ...,  0.0004,  0.0065,  0.0745],\n        [-0.0289, -0.0040,  0.0172,  ..., -0.0042,  0.0284,  0.0127]], dtype=torch.float16), '16.to_q_lora.down.weight': tensor([[-0.0606,  0.0300,  0.0144,  ...,  0.0378, -0.0570, -0.0764],\n        [-0.0112, -0.0215, -0.0630,  ...,  0.0554,  0.0729,  0.0040],\n        [-0.0663, -0.0276, -0.0443,  ...,  0.0128, -0.0180, -0.0390],\n        ...,\n        [ 0.0479, -0.0847,  0.0515,  ..., -0.0254, -0.0390,  0.0434],\n        [ 0.0091, -0.0587,  0.0182,  ...,  0.0027,  0.0035,  0.0071],\n        [ 0.0545,  0.0623,  0.0457,  ..., -0.0200, -0.0059, -0.0002]], dtype=torch.float16), '16.to_q_lora.up.weight': tensor([[-0.0298, -0.0107,  0.0065,  ..., -0.0190,  0.0087, -0.0159],\n        [ 0.0179, -0.0242,  0.0334,  ..., -0.1215,  0.0398, -0.0194],\n        [ 0.0207, -0.0365,  0.0022,  ..., -0.0634, -0.0427,  0.0215],\n        ...,\n        [-0.0091,  0.0067, -0.0562,  ..., -0.0793, -0.0354, -0.0572],\n        [-0.1216,  0.0229, -0.0224,  ...,  0.0045,  0.0032,  0.0151],\n        [-0.0609, -0.0464, -0.0563,  ...,  0.0392,  0.0714,  0.0279]], dtype=torch.float16), '16.to_k_lora.down.weight': tensor([[ 0.0309,  0.1279,  0.0087,  ...,  0.0139, -0.0275, -0.0128],\n        [-0.0550,  0.0098,  0.0176,  ..., -0.0502, -0.0128, -0.0528],\n        [-0.0013,  0.0185,  0.0303,  ...,  0.0096, -0.0111,  0.0504],\n        ...,\n        [ 0.0009,  0.0241,  0.0225,  ...,  0.0324, -0.0364,  0.0444],\n        [ 0.0102, -0.0174,  0.0046,  ..., -0.0233, -0.0483, -0.0825],\n        [-0.0411, -0.0297, -0.0115,  ..., -0.0611,  0.0177,  0.0026]], dtype=torch.float16), '16.to_k_lora.up.weight': tensor([[-0.0334, -0.0386,  0.0292,  ..., -0.0398,  0.0111,  0.0329],\n        [ 0.0809, -0.0432,  0.0442,  ..., -0.0022, -0.0073,  0.0154],\n        [-0.0332,  0.0446, -0.0228,  ..., -0.0141, -0.0066, -0.0398],\n        ...,\n        [ 0.0175,  0.0866, -0.0169,  ..., -0.0329, -0.0442,  0.0054],\n        [ 0.0286, -0.0164,  0.0601,  ...,  0.0064,  0.0130, -0.0148],\n        [ 0.0143,  0.0573,  0.0402,  ...,  0.0510, -0.0060, -0.0479]], dtype=torch.float16), '16.to_v_lora.down.weight': tensor([[-1.9503e-03, -1.4977e-02,  9.1782e-03,  ...,  4.4373e-02,  3.8574e-02, -2.6581e-02],\n        [ 4.6425e-03,  1.1009e-02, -1.8322e-04,  ...,  6.8588e-03,  1.3161e-02,  2.0630e-02],\n        [ 4.8767e-02, -3.3783e-02,  1.7128e-03,  ...,  2.7740e-02, -1.6373e-02,  5.7892e-02],\n        ...,\n        [-2.7054e-02,  3.9673e-02, -3.7872e-02,  ..., -5.3802e-02, -3.3073e-03, -4.3121e-02],\n        [-6.1035e-05,  1.1467e-02,  3.6285e-02,  ..., -2.0416e-02, -4.3060e-02,  3.4821e-02],\n        [-4.4785e-03, -2.5833e-02, -7.1167e-02,  ..., -7.2632e-03,  3.1174e-02,  6.2866e-02]], dtype=torch.float16), '16.to_v_lora.up.weight': tensor([[ 0.0008,  0.0526, -0.0054,  ...,  0.0071, -0.0051, -0.0108],\n        [-0.0229,  0.0523,  0.0463,  ...,  0.0180, -0.0258, -0.0456],\n        [ 0.0336,  0.0657,  0.0553,  ...,  0.0546, -0.0716, -0.0696],\n        ...,\n        [-0.0078,  0.0058, -0.0071,  ..., -0.0839, -0.0595, -0.0504],\n        [ 0.0473,  0.0059, -0.0372,  ..., -0.0308, -0.0238, -0.0427],\n        [-0.0363,  0.0224,  0.0157,  ...,  0.0352, -0.0404,  0.0019]], dtype=torch.float16), '16.to_out_lora.down.weight': tensor([[ 0.0561, -0.0674,  0.0738,  ..., -0.0150, -0.0092, -0.0217],\n        [ 0.0184,  0.0073, -0.0225,  ..., -0.0017,  0.0389,  0.0021],\n        [ 0.0024,  0.0345, -0.0583,  ..., -0.0161,  0.0210, -0.0381],\n        ...,\n        [ 0.0038, -0.0356, -0.0137,  ...,  0.0177,  0.0502,  0.0156],\n        [ 0.0285,  0.0536, -0.0210,  ...,  0.0235,  0.0235,  0.0175],\n        [-0.0092,  0.0186,  0.0527,  ..., -0.0101,  0.0639,  0.0282]], dtype=torch.float16), '16.to_out_lora.up.weight': tensor([[-0.0364, -0.0274, -0.0163,  ...,  0.0158, -0.0654,  0.0273],\n        [-0.0037, -0.0276, -0.0427,  ...,  0.0611, -0.0079, -0.0087],\n        [ 0.0037,  0.0526, -0.0442,  ..., -0.0558,  0.0685,  0.0107],\n        ...,\n        [-0.0074, -0.0163, -0.0282,  ...,  0.0048, -0.0177,  0.0102],\n        [-0.0420,  0.0095,  0.0341,  ...,  0.0235,  0.0121, -0.0499],\n        [-0.0201,  0.0069,  0.0359,  ..., -0.0157,  0.0020, -0.0509]], dtype=torch.float16), '17.to_q_lora.down.weight': tensor([[-0.0027, -0.0341,  0.0181,  ..., -0.0494,  0.0489,  0.0178],\n        [-0.0024, -0.0235,  0.0056,  ...,  0.0127, -0.0621, -0.0067],\n        [-0.0119,  0.0076,  0.0588,  ..., -0.0108,  0.0194, -0.0208],\n        ...,\n        [-0.0182, -0.1096,  0.0861,  ..., -0.0716,  0.0333, -0.0254],\n        [-0.0289, -0.0438,  0.0191,  ..., -0.0277, -0.0002,  0.0159],\n        [-0.0648, -0.0119,  0.0197,  ..., -0.0087,  0.0121,  0.0111]], dtype=torch.float16), '17.to_q_lora.up.weight': tensor([[-3.6438e-02, -1.0529e-02, -2.1072e-02,  ...,  1.0773e-02,  3.7689e-03, -2.7649e-02],\n        [-1.2932e-02,  2.3079e-03,  2.2873e-02,  ..., -2.0157e-02, -1.4938e-02,  2.0248e-02],\n        [ 4.1199e-02, -4.5105e-02, -3.7689e-02,  ...,  2.0538e-02,  4.7119e-02,  7.9727e-03],\n        ...,\n        [-2.0874e-02,  2.3849e-02,  2.3758e-02,  ..., -2.4872e-02, -2.9465e-02, -3.8204e-03],\n        [-6.0028e-02,  2.8610e-02,  3.5065e-02,  ...,  7.2777e-05,  7.9163e-02, -5.4199e-02],\n        [ 2.4170e-02,  1.8377e-03, -1.9867e-02,  ..., -4.4708e-03, -8.1863e-03, -3.0212e-02]], dtype=torch.float16), '17.to_k_lora.down.weight': tensor([[-0.0348,  0.0090,  0.0178,  ..., -0.0252,  0.0446,  0.0116],\n        [ 0.0127,  0.0115, -0.0473,  ...,  0.0154, -0.0278,  0.0552],\n        [ 0.0287,  0.0135,  0.0369,  ..., -0.0549, -0.0275,  0.0144],\n        ...,\n        [-0.0325, -0.0251, -0.0536,  ...,  0.0431, -0.0431,  0.0231],\n        [ 0.0119, -0.0142, -0.0042,  ..., -0.0066,  0.0547, -0.0144],\n        [-0.0155,  0.0254,  0.0138,  ...,  0.0303, -0.0345, -0.0714]], dtype=torch.float16), '17.to_k_lora.up.weight': tensor([[ 0.0551,  0.0158, -0.0251,  ..., -0.0315, -0.0255, -0.0266],\n        [-0.0003,  0.0186, -0.0515,  ...,  0.0127, -0.0276,  0.0640],\n        [ 0.0500, -0.0807, -0.1013,  ..., -0.0198,  0.0374, -0.0400],\n        ...,\n        [ 0.0385, -0.0314,  0.0198,  ..., -0.0099,  0.0271, -0.0375],\n        [-0.1029, -0.0018, -0.0497,  ...,  0.0082, -0.0246,  0.0155],\n        [-0.0035,  0.0588,  0.0542,  ..., -0.0007, -0.0003, -0.0150]], dtype=torch.float16), '17.to_v_lora.down.weight': tensor([[-0.0297,  0.0613, -0.0246,  ...,  0.0241, -0.0080,  0.0297],\n        [ 0.0089,  0.1199,  0.0818,  ...,  0.0181,  0.0004,  0.0351],\n        [ 0.0056,  0.0219,  0.0143,  ..., -0.0146, -0.0060,  0.0142],\n        ...,\n        [ 0.0133, -0.0068, -0.0838,  ..., -0.0013,  0.0229,  0.0314],\n        [ 0.0177,  0.0138, -0.0209,  ...,  0.0055, -0.0191,  0.0392],\n        [-0.0232,  0.0295,  0.0201,  ...,  0.0005, -0.0129,  0.0233]], dtype=torch.float16), '17.to_v_lora.up.weight': tensor([[-0.0061, -0.0201, -0.0364,  ...,  0.0020, -0.0072,  0.0723],\n        [-0.0245, -0.0371,  0.0406,  ..., -0.0031, -0.0116,  0.0322],\n        [-0.0245,  0.0279,  0.0043,  ...,  0.0086, -0.0049,  0.0032],\n        ...,\n        [-0.0238,  0.0106, -0.0097,  ...,  0.0278,  0.0249,  0.0478],\n        [-0.0197,  0.0185, -0.0328,  ..., -0.0246, -0.0029,  0.0275],\n        [-0.0168, -0.0023, -0.0194,  ...,  0.0196, -0.0242, -0.0090]], dtype=torch.float16), '17.to_out_lora.down.weight': tensor([[ 0.0263,  0.0392,  0.0240,  ..., -0.0407,  0.0091,  0.0620],\n        [ 0.0128, -0.0227, -0.0186,  ..., -0.0296, -0.0183, -0.0019],\n        [-0.0241, -0.0079, -0.0304,  ..., -0.0055,  0.0098,  0.0195],\n        ...,\n        [-0.0563,  0.0148,  0.0170,  ...,  0.0407, -0.0380, -0.0096],\n        [ 0.0259, -0.0386, -0.0281,  ..., -0.0406,  0.0125,  0.0522],\n        [-0.0261, -0.0894,  0.0255,  ...,  0.0241,  0.0255,  0.0513]], dtype=torch.float16), '17.to_out_lora.up.weight': tensor([[ 0.0455,  0.0363, -0.0501,  ..., -0.0354, -0.0455,  0.0013],\n        [ 0.0049, -0.0349,  0.0055,  ...,  0.0283, -0.0033,  0.0368],\n        [ 0.0045, -0.0524,  0.0116,  ..., -0.0473,  0.0484, -0.0266],\n        ...,\n        [-0.0633,  0.0127, -0.0132,  ..., -0.0385,  0.0069,  0.0305],\n        [ 0.0126, -0.0739,  0.0263,  ..., -0.0137, -0.0213,  0.0284],\n        [ 0.0147, -0.0224,  0.0186,  ..., -0.0383,  0.0332, -0.0170]], dtype=torch.float16), '17.to_k_ip.weight': tensor([[ 0.0771,  0.1186,  0.0352,  ..., -0.0376, -0.0165,  0.0631],\n        [-0.0826, -0.0259, -0.0371,  ...,  0.0990,  0.0905, -0.0191],\n        [-0.0556, -0.0721, -0.0071,  ..., -0.0703,  0.0508,  0.0816],\n        ...,\n        [-0.0936,  0.0450, -0.0002,  ...,  0.0043, -0.0300,  0.0231],\n        [-0.0686, -0.0283, -0.0126,  ..., -0.0152,  0.0946, -0.0204],\n        [ 0.0451, -0.0355, -0.0842,  ...,  0.1437, -0.0174,  0.0063]], dtype=torch.float16), '17.to_v_ip.weight': tensor([[-0.0537,  0.0021,  0.0670,  ..., -0.0063, -0.0781,  0.0275],\n        [ 0.0076,  0.0620,  0.0202,  ...,  0.0336,  0.0250, -0.0246],\n        [ 0.0077,  0.0096, -0.0382,  ..., -0.0340,  0.0540,  0.0043],\n        ...,\n        [ 0.0699, -0.0308,  0.0353,  ...,  0.0204,  0.0626,  0.0327],\n        [ 0.0129, -0.0848, -0.0764,  ..., -0.0177,  0.0430,  0.0242],\n        [ 0.0538, -0.0302,  0.0044,  ...,  0.0227,  0.0304,  0.0425]], dtype=torch.float16), '18.to_q_lora.down.weight': tensor([[ 0.0165,  0.0320, -0.0222,  ..., -0.0501, -0.0077, -0.0330],\n        [-0.0350, -0.0061, -0.0066,  ...,  0.0119,  0.0656, -0.0131],\n        [ 0.0292, -0.0129, -0.0006,  ..., -0.0462,  0.0776, -0.0431],\n        ...,\n        [ 0.0447, -0.0060, -0.0011,  ..., -0.0276, -0.0137,  0.0011],\n        [ 0.0064, -0.0583,  0.0222,  ..., -0.0114,  0.0199,  0.0221],\n        [-0.0257,  0.0251, -0.0698,  ...,  0.0620,  0.0201, -0.0502]], dtype=torch.float16), '18.to_q_lora.up.weight': tensor([[-0.0500, -0.0051,  0.0447,  ...,  0.0287, -0.0525,  0.0407],\n        [-0.0451,  0.0007,  0.0230,  ..., -0.0267, -0.0041, -0.0246],\n        [-0.0417, -0.0891,  0.0072,  ...,  0.0411,  0.0065,  0.0385],\n        ...,\n        [ 0.0293,  0.0470,  0.0084,  ..., -0.0063,  0.0422,  0.0284],\n        [ 0.1082,  0.0292, -0.0395,  ..., -0.0392, -0.0213,  0.0184],\n        [-0.0338, -0.0093, -0.0019,  ..., -0.0507, -0.0155,  0.0288]], dtype=torch.float16), '18.to_k_lora.down.weight': tensor([[-0.0091,  0.0053,  0.0021,  ...,  0.0275, -0.0809, -0.0242],\n        [ 0.0350,  0.0288, -0.0267,  ...,  0.0030,  0.0063, -0.0276],\n        [ 0.0066,  0.0389,  0.0553,  ..., -0.0137, -0.0183, -0.0281],\n        ...,\n        [ 0.0180, -0.0471,  0.0111,  ...,  0.0228,  0.0120, -0.0074],\n        [ 0.0313,  0.0121,  0.0065,  ...,  0.0334,  0.0286, -0.0059],\n        [-0.0139, -0.0663, -0.0292,  ..., -0.0166, -0.0064, -0.0397]], dtype=torch.float16), '18.to_k_lora.up.weight': tensor([[ 0.0074, -0.0071, -0.0385,  ..., -0.0308, -0.0092, -0.0035],\n        [ 0.0134, -0.0006,  0.0250,  ...,  0.0022, -0.0015, -0.0509],\n        [-0.0139,  0.0112,  0.0143,  ..., -0.0511, -0.0182,  0.0066],\n        ...,\n        [-0.0609, -0.0347,  0.0261,  ..., -0.0084, -0.0041, -0.0286],\n        [-0.0471, -0.0163, -0.0006,  ..., -0.0138, -0.0019, -0.0148],\n        [-0.0051,  0.0086,  0.0145,  ...,  0.0057, -0.0205, -0.0096]], dtype=torch.float16), '18.to_v_lora.down.weight': tensor([[-0.0375, -0.0144, -0.0025,  ...,  0.0463, -0.0027,  0.0106],\n        [-0.0201, -0.0057, -0.0266,  ...,  0.0146, -0.0055, -0.0227],\n        [ 0.0233, -0.0189, -0.0192,  ..., -0.0362, -0.0504, -0.0267],\n        ...,\n        [-0.0394,  0.0323,  0.0367,  ..., -0.0419,  0.0633,  0.0147],\n        [ 0.0112, -0.0094,  0.0092,  ..., -0.0410, -0.0232,  0.0079],\n        [ 0.0037, -0.0282, -0.0003,  ..., -0.0051, -0.0089, -0.0090]], dtype=torch.float16), '18.to_v_lora.up.weight': tensor([[ 0.0056,  0.0112,  0.0042,  ..., -0.0141,  0.0012, -0.0064],\n        [ 0.0391,  0.0205,  0.0094,  ..., -0.0072,  0.0143, -0.0487],\n        [-0.0090, -0.0136,  0.0191,  ...,  0.0505,  0.0270,  0.0013],\n        ...,\n        [ 0.0385,  0.0131,  0.0635,  ...,  0.0374,  0.0193, -0.0158],\n        [-0.0517,  0.0049,  0.0451,  ..., -0.0054, -0.0003,  0.0051],\n        [ 0.0104, -0.0203,  0.0105,  ...,  0.0432, -0.0122,  0.0259]], dtype=torch.float16), '18.to_out_lora.down.weight': tensor([[-0.0297, -0.0198, -0.0392,  ..., -0.0322, -0.0038,  0.0048],\n        [-0.0275,  0.0104,  0.0162,  ...,  0.0050,  0.0046,  0.0187],\n        [ 0.0450,  0.0249,  0.0899,  ..., -0.0137,  0.0100,  0.0009],\n        ...,\n        [ 0.0340, -0.0127,  0.0396,  ...,  0.0038, -0.0085, -0.0306],\n        [-0.0549,  0.0245,  0.1094,  ...,  0.0414, -0.0320,  0.0465],\n        [ 0.0075, -0.0381,  0.0478,  ..., -0.0084,  0.0464,  0.0018]], dtype=torch.float16), '18.to_out_lora.up.weight': tensor([[ 0.0088,  0.0052,  0.0345,  ...,  0.0077, -0.0180,  0.0244],\n        [-0.0112,  0.0086,  0.0021,  ...,  0.0190, -0.0043,  0.0288],\n        [ 0.0160,  0.0079, -0.0187,  ..., -0.0020,  0.0007,  0.0027],\n        ...,\n        [ 0.0082, -0.0244,  0.0239,  ..., -0.0559,  0.0016, -0.0359],\n        [ 0.0155,  0.0108,  0.0039,  ...,  0.0072, -0.0332, -0.0106],\n        [-0.0003,  0.0288, -0.0311,  ...,  0.0662, -0.0032, -0.0309]], dtype=torch.float16), '19.to_q_lora.down.weight': tensor([[ 0.0268, -0.0283, -0.0389,  ..., -0.0231,  0.0416,  0.0070],\n        [ 0.0448,  0.0536,  0.0396,  ...,  0.0121,  0.0277,  0.0417],\n        [-0.0459, -0.0489,  0.0232,  ..., -0.0511,  0.0443,  0.0307],\n        ...,\n        [-0.0180, -0.0159, -0.0085,  ...,  0.0062, -0.0052, -0.0437],\n        [ 0.0430, -0.0543, -0.0407,  ..., -0.0189, -0.0410, -0.0007],\n        [-0.0481, -0.0500, -0.0519,  ...,  0.0574, -0.0223, -0.0106]], dtype=torch.float16), '19.to_q_lora.up.weight': tensor([[-0.0137,  0.0081, -0.0048,  ...,  0.0236, -0.0192,  0.0103],\n        [ 0.0503, -0.0176,  0.0303,  ...,  0.0076,  0.0042,  0.0083],\n        [ 0.0356,  0.0101, -0.0461,  ...,  0.0113, -0.0243,  0.0029],\n        ...,\n        [ 0.0083,  0.0113, -0.0134,  ..., -0.0711, -0.0332, -0.0114],\n        [ 0.0037,  0.0112,  0.0096,  ...,  0.0638,  0.0342, -0.0239],\n        [ 0.0149,  0.0091,  0.0035,  ..., -0.0084,  0.0321, -0.0119]], dtype=torch.float16), '19.to_k_lora.down.weight': tensor([[ 9.5291e-03,  1.2886e-02, -5.1270e-02,  ..., -9.9487e-03,  2.7588e-02,  4.5105e-02],\n        [ 4.6039e-04, -7.1645e-05, -7.3051e-03,  ...,  1.3161e-02, -2.0081e-02, -9.9609e-02],\n        [-1.1650e-02, -1.8555e-02, -2.8030e-02,  ..., -4.3457e-02,  2.5146e-02,  2.3636e-02],\n        ...,\n        [-4.3488e-02,  8.9951e-03,  2.6993e-02,  ..., -1.3206e-02,  3.2227e-02, -1.2154e-02],\n        [-4.9683e-02,  1.0811e-02,  3.3051e-02,  ..., -1.9943e-02, -6.7673e-03, -1.7792e-02],\n        [-1.3077e-02,  2.1851e-02, -5.2528e-03,  ..., -2.3254e-02,  7.2205e-02,  8.3466e-03]], dtype=torch.float16), '19.to_k_lora.up.weight': tensor([[ 0.0158, -0.0406, -0.0162,  ...,  0.0328,  0.0142,  0.0011],\n        [ 0.0540, -0.0043,  0.0242,  ...,  0.0159,  0.0298,  0.0144],\n        [-0.0456,  0.0037,  0.0158,  ...,  0.0343, -0.0205, -0.0258],\n        ...,\n        [ 0.0166, -0.0157, -0.0156,  ..., -0.0181,  0.0011, -0.0213],\n        [ 0.0327,  0.0075,  0.0227,  ..., -0.0140,  0.0047,  0.0032],\n        [-0.0077,  0.0354,  0.0053,  ...,  0.0299, -0.0211,  0.0114]], dtype=torch.float16), '19.to_v_lora.down.weight': tensor([[-0.0272, -0.0004,  0.0136,  ..., -0.0027, -0.0102, -0.0060],\n        [ 0.0010, -0.0109, -0.0025,  ...,  0.0090,  0.0063,  0.0116],\n        [-0.0020,  0.0025, -0.0046,  ..., -0.0019,  0.0041, -0.0013],\n        ...,\n        [-0.0018, -0.0236, -0.0203,  ..., -0.0091,  0.0160,  0.0141],\n        [ 0.0046, -0.0110,  0.0408,  ...,  0.0046,  0.0012,  0.0347],\n        [ 0.0057,  0.0013, -0.0162,  ..., -0.0017,  0.0002, -0.0041]], dtype=torch.float16), '19.to_v_lora.up.weight': tensor([[ 6.1493e-03, -2.5833e-02, -2.9469e-03,  ...,  6.5002e-03,  4.6234e-03,  9.5901e-03],\n        [ 2.1408e-02,  1.1429e-02, -1.9470e-02,  ...,  1.2291e-02, -6.1493e-03,  1.0864e-02],\n        [ 6.0081e-03,  1.4198e-04, -5.5580e-03,  ...,  2.3895e-02,  2.5539e-03,  1.1475e-02],\n        ...,\n        [ 2.3651e-02, -6.8321e-03,  6.1214e-05,  ..., -1.3847e-02,  2.5616e-03,  7.0305e-03],\n        [ 3.6964e-03,  1.6479e-02, -5.2261e-03,  ..., -7.2479e-03,  5.1079e-03,  4.2458e-03],\n        [-1.4702e-02, -1.1223e-02, -5.8632e-03,  ...,  1.7456e-02, -1.2505e-02,  4.5853e-03]], dtype=torch.float16), '19.to_out_lora.down.weight': tensor([[ 0.0640,  0.0300, -0.0583,  ...,  0.1260,  0.0228,  0.0173],\n        [-0.0126,  0.0289, -0.0699,  ..., -0.0149,  0.0878,  0.0123],\n        [-0.0497, -0.0234,  0.0207,  ...,  0.0439, -0.0074, -0.0005],\n        ...,\n        [ 0.0077,  0.0036, -0.0132,  ...,  0.0103, -0.0525,  0.0440],\n        [ 0.0773,  0.0692, -0.0054,  ..., -0.0184, -0.0036,  0.0268],\n        [-0.0647, -0.0250, -0.0463,  ...,  0.0035, -0.0314, -0.0278]], dtype=torch.float16), '19.to_out_lora.up.weight': tensor([[-0.0120, -0.0076, -0.0008,  ..., -0.0625, -0.0105, -0.0615],\n        [ 0.0197, -0.0563,  0.0141,  ..., -0.0057,  0.0083, -0.0424],\n        [-0.0954, -0.0108,  0.0098,  ...,  0.0688,  0.0174,  0.0318],\n        ...,\n        [ 0.0588,  0.0180,  0.0482,  ..., -0.0518, -0.0323,  0.0446],\n        [-0.0013, -0.0541, -0.0187,  ...,  0.0275, -0.0203,  0.0208],\n        [ 0.0120, -0.0827, -0.0241,  ...,  0.0343, -0.0419, -0.0081]], dtype=torch.float16), '19.to_k_ip.weight': tensor([[-0.0055,  0.0013, -0.0226,  ..., -0.0262, -0.0167, -0.0558],\n        [ 0.0063, -0.0118,  0.0537,  ...,  0.0711, -0.0618, -0.0216],\n        [-0.0460,  0.0076,  0.0760,  ...,  0.0494,  0.1062,  0.0174],\n        ...,\n        [ 0.0026,  0.0277,  0.0286,  ...,  0.0615, -0.0099, -0.0854],\n        [-0.0845, -0.0445,  0.0639,  ...,  0.0187,  0.1151,  0.0108],\n        [ 0.0111, -0.0324,  0.0656,  ..., -0.0764,  0.0349,  0.0068]], dtype=torch.float16), '19.to_v_ip.weight': tensor([[ 0.0171,  0.0866,  0.0286,  ..., -0.0444,  0.0420,  0.0116],\n        [-0.0269,  0.0972,  0.0890,  ...,  0.0465,  0.0319, -0.0007],\n        [-0.0007, -0.0743, -0.0192,  ..., -0.0568,  0.0354,  0.0379],\n        ...,\n        [-0.0366, -0.0085, -0.0026,  ...,  0.0182,  0.0358,  0.0576],\n        [-0.0106, -0.0036,  0.0374,  ...,  0.0387,  0.0444, -0.0169],\n        [-0.0117, -0.0914, -0.0739,  ...,  0.0913, -0.0168, -0.0383]], dtype=torch.float16), '20.to_q_lora.down.weight': tensor([[ 2.8778e-02, -1.0132e-02,  2.7256e-03,  ..., -5.5695e-03,  9.1782e-03, -1.7899e-02],\n        [ 4.2847e-02,  4.5319e-02,  3.7292e-02,  ...,  4.2496e-03,  2.0123e-03,  3.6259e-03],\n        [ 3.4851e-02, -2.3300e-02, -8.6427e-05,  ..., -3.0167e-02,  4.2908e-02,  3.3875e-02],\n        ...,\n        [ 2.3537e-03, -2.3911e-02, -1.6212e-03,  ..., -1.0042e-03,  2.8763e-02, -8.6594e-03],\n        [ 6.1615e-02, -1.2856e-02,  5.2734e-02,  ..., -5.0293e-02,  1.7288e-02,  4.0436e-04],\n        [ 1.8082e-02, -1.5135e-03, -2.5711e-02,  ...,  5.4413e-02, -3.0014e-02, -5.8228e-02]], dtype=torch.float16), '20.to_q_lora.up.weight': tensor([[ 0.0386,  0.0006, -0.0124,  ..., -0.0119, -0.0216,  0.0053],\n        [-0.0181, -0.0318, -0.0157,  ...,  0.0616, -0.0012, -0.0157],\n        [-0.0015, -0.0445, -0.0653,  ...,  0.0520,  0.0511, -0.0194],\n        ...,\n        [ 0.0273, -0.0036, -0.0056,  ...,  0.0129,  0.0238,  0.0667],\n        [ 0.0071, -0.0369,  0.0093,  ...,  0.0099,  0.0035,  0.0257],\n        [-0.0164, -0.0170,  0.0060,  ...,  0.0414, -0.0120,  0.0309]], dtype=torch.float16), '20.to_k_lora.down.weight': tensor([[-0.0299, -0.0148,  0.0225,  ...,  0.0284,  0.0290,  0.0203],\n        [-0.0081, -0.0678, -0.0251,  ..., -0.0107, -0.0126, -0.0141],\n        [-0.0137, -0.0260,  0.0186,  ...,  0.0216, -0.0300,  0.0032],\n        ...,\n        [ 0.0095, -0.0489, -0.0208,  ..., -0.0262,  0.0007, -0.0110],\n        [ 0.0285,  0.0064,  0.0278,  ...,  0.0352,  0.0411, -0.0064],\n        [-0.0249, -0.0004, -0.0536,  ..., -0.0175, -0.0109, -0.0284]], dtype=torch.float16), '20.to_k_lora.up.weight': tensor([[ 0.0497, -0.0073, -0.0139,  ..., -0.0160, -0.0109,  0.0183],\n        [ 0.0220,  0.0105,  0.0302,  ..., -0.0009, -0.0154, -0.0065],\n        [-0.0055, -0.0013, -0.0079,  ..., -0.0354, -0.0333, -0.0342],\n        ...,\n        [ 0.0420, -0.0169, -0.0275,  ...,  0.0053,  0.0001,  0.0194],\n        [-0.0017, -0.0230, -0.0114,  ..., -0.0049, -0.0494, -0.0104],\n        [ 0.0323,  0.0089, -0.0272,  ..., -0.0064, -0.0171,  0.0053]], dtype=torch.float16), '20.to_v_lora.down.weight': tensor([[-0.0176,  0.0537,  0.0138,  ..., -0.0338, -0.0288,  0.0447],\n        [ 0.0092, -0.0119,  0.0027,  ..., -0.0031, -0.0457,  0.0071],\n        [-0.0047,  0.0018,  0.0165,  ..., -0.0084, -0.0005,  0.0412],\n        ...,\n        [-0.0123, -0.0586, -0.0096,  ...,  0.0250, -0.0270, -0.0298],\n        [-0.0016,  0.0466,  0.0148,  ..., -0.0102, -0.0293, -0.0235],\n        [-0.0391, -0.0045, -0.0232,  ..., -0.0397,  0.0239, -0.0501]], dtype=torch.float16), '20.to_v_lora.up.weight': tensor([[ 0.0111,  0.0318,  0.0258,  ..., -0.0092, -0.0025,  0.0115],\n        [ 0.0088,  0.0237, -0.0228,  ..., -0.0368, -0.0220, -0.0317],\n        [-0.0195,  0.0135, -0.0232,  ..., -0.0018, -0.0143,  0.0743],\n        ...,\n        [ 0.0178,  0.0373,  0.0053,  ...,  0.0267, -0.0232, -0.0105],\n        [ 0.0257,  0.0311,  0.0268,  ...,  0.0016, -0.0073,  0.0059],\n        [-0.0020, -0.0042, -0.0260,  ..., -0.0173, -0.0127,  0.0609]], dtype=torch.float16), '20.to_out_lora.down.weight': tensor([[-0.0145, -0.0122, -0.0117,  ...,  0.0003, -0.0406, -0.0147],\n        [-0.0685,  0.0450,  0.0013,  ..., -0.0233, -0.0230,  0.0031],\n        [-0.0111, -0.0246, -0.0114,  ...,  0.0358,  0.0374, -0.0216],\n        ...,\n        [ 0.0747,  0.0067, -0.0081,  ..., -0.0188, -0.0222,  0.0572],\n        [-0.0333, -0.0170,  0.0042,  ..., -0.0032,  0.0205,  0.0125],\n        [ 0.0304,  0.0182, -0.0246,  ...,  0.0065, -0.0565, -0.0073]], dtype=torch.float16), '20.to_out_lora.up.weight': tensor([[-0.0663,  0.0056, -0.0154,  ...,  0.0019, -0.0164, -0.0365],\n        [-0.0107,  0.0686, -0.0168,  ...,  0.0031, -0.0106, -0.0574],\n        [ 0.0686, -0.0135,  0.0168,  ..., -0.0501,  0.0378,  0.0080],\n        ...,\n        [-0.0410, -0.0262,  0.0166,  ...,  0.0050,  0.0173, -0.0050],\n        [-0.0242,  0.0301, -0.0123,  ..., -0.0066,  0.0541, -0.0184],\n        [-0.0648,  0.0150, -0.0502,  ...,  0.0252, -0.0701, -0.0185]], dtype=torch.float16), '21.to_q_lora.down.weight': tensor([[-0.0439,  0.0146,  0.0767,  ..., -0.0668,  0.0302,  0.0206],\n        [-0.0085,  0.0315, -0.0106,  ...,  0.0444,  0.0395, -0.0039],\n        [-0.0513,  0.0506,  0.0039,  ...,  0.0244, -0.0076, -0.0139],\n        ...,\n        [-0.0106, -0.0367, -0.0735,  ...,  0.0239, -0.0016,  0.0057],\n        [-0.0364, -0.0360,  0.0216,  ...,  0.0082,  0.0300, -0.0618],\n        [ 0.0236,  0.0315, -0.0200,  ...,  0.0316,  0.0191, -0.0228]], dtype=torch.float16), '21.to_q_lora.up.weight': tensor([[ 0.0424, -0.0729, -0.0740,  ..., -0.0030, -0.0376,  0.0340],\n        [-0.0530, -0.0110, -0.0325,  ..., -0.0394,  0.0071, -0.0842],\n        [-0.0613, -0.0262,  0.0489,  ..., -0.0019,  0.0132,  0.0174],\n        ...,\n        [ 0.0430, -0.0054,  0.0079,  ...,  0.0148,  0.0350, -0.0333],\n        [ 0.0069, -0.0677, -0.0040,  ..., -0.0410, -0.0170,  0.0019],\n        [ 0.0781, -0.0376,  0.0147,  ..., -0.1201,  0.0170, -0.0204]], dtype=torch.float16), '21.to_k_lora.down.weight': tensor([[ 0.0233, -0.0601,  0.0334,  ..., -0.0184,  0.0127,  0.0158],\n        [-0.0862, -0.0192,  0.0541,  ..., -0.0052, -0.0284,  0.0206],\n        [ 0.0597, -0.0314,  0.0211,  ..., -0.0220,  0.0286, -0.0104],\n        ...,\n        [ 0.0047, -0.0456, -0.0350,  ..., -0.0105,  0.0148, -0.0261],\n        [-0.0334,  0.0216,  0.0362,  ...,  0.0390,  0.0619, -0.0050],\n        [-0.0075, -0.0157, -0.0299,  ..., -0.0188, -0.0279,  0.0010]], dtype=torch.float16), '21.to_k_lora.up.weight': tensor([[ 0.0236,  0.0022, -0.0069,  ...,  0.0322,  0.0119, -0.0169],\n        [ 0.0234, -0.0292,  0.0043,  ...,  0.0087, -0.0562,  0.0833],\n        [ 0.0143, -0.0501, -0.0267,  ..., -0.0120,  0.0053,  0.0337],\n        ...,\n        [-0.0184,  0.0334, -0.0194,  ...,  0.0010,  0.0269, -0.0352],\n        [-0.0008, -0.1081, -0.1008,  ...,  0.0448,  0.0229, -0.0711],\n        [-0.0613, -0.0381, -0.0462,  ...,  0.0502,  0.0212, -0.0637]], dtype=torch.float16), '21.to_v_lora.down.weight': tensor([[-0.0163, -0.0224,  0.0146,  ..., -0.0117, -0.0033, -0.0117],\n        [ 0.0051, -0.0159,  0.0628,  ..., -0.0117,  0.0053, -0.0479],\n        [-0.0201,  0.0151, -0.0152,  ..., -0.0124, -0.0228,  0.0571],\n        ...,\n        [-0.0173, -0.0271,  0.0019,  ...,  0.0067,  0.0054, -0.0100],\n        [-0.0156,  0.0323, -0.0643,  ..., -0.0184, -0.0208,  0.0137],\n        [-0.0085, -0.0002, -0.0650,  ...,  0.0081, -0.0347, -0.0426]], dtype=torch.float16), '21.to_v_lora.up.weight': tensor([[ 0.0132,  0.0352, -0.0225,  ...,  0.0104,  0.0352,  0.0294],\n        [-0.0162, -0.0449,  0.0403,  ...,  0.0447,  0.0155, -0.0018],\n        [-0.0069, -0.0079, -0.0087,  ...,  0.0125,  0.0073, -0.0371],\n        ...,\n        [-0.0228,  0.0092,  0.0040,  ...,  0.0012,  0.0098, -0.0130],\n        [ 0.0047,  0.0458, -0.0275,  ..., -0.0217, -0.0207, -0.0388],\n        [ 0.0107,  0.0046, -0.0283,  ...,  0.0365, -0.0020,  0.0271]], dtype=torch.float16), '21.to_out_lora.down.weight': tensor([[ 0.0227, -0.0292, -0.0874,  ...,  0.0230, -0.0121, -0.0794],\n        [ 0.0475,  0.0419,  0.0332,  ..., -0.0024,  0.0344,  0.0464],\n        [-0.0581, -0.0380, -0.0206,  ...,  0.0022, -0.0051,  0.0440],\n        ...,\n        [ 0.0514,  0.0152,  0.0423,  ...,  0.0552,  0.0859,  0.0150],\n        [-0.0264, -0.0778, -0.0397,  ..., -0.0481, -0.0269, -0.0315],\n        [-0.0218,  0.0165, -0.0564,  ...,  0.0099, -0.0597, -0.0186]], dtype=torch.float16), '21.to_out_lora.up.weight': tensor([[-0.0467, -0.0526,  0.0422,  ..., -0.0034,  0.0023, -0.0355],\n        [-0.0134,  0.0667,  0.0372,  ..., -0.0605,  0.0246, -0.0005],\n        [-0.0256,  0.0251, -0.0416,  ..., -0.0064,  0.0043, -0.0919],\n        ...,\n        [ 0.0289,  0.0127,  0.0329,  ..., -0.0417,  0.0487,  0.0069],\n        [ 0.0099,  0.0119,  0.0449,  ..., -0.0728,  0.0833, -0.0349],\n        [-0.0324, -0.0123,  0.0001,  ..., -0.0211, -0.0549,  0.0156]], dtype=torch.float16), '21.to_k_ip.weight': tensor([[-0.0684, -0.0425, -0.0553,  ..., -0.0514,  0.0385, -0.0999],\n        [ 0.0274, -0.0231,  0.0065,  ...,  0.0410,  0.0800, -0.0859],\n        [-0.0495,  0.0453,  0.0130,  ...,  0.0681,  0.0042, -0.0649],\n        ...,\n        [-0.0127,  0.0597,  0.0166,  ..., -0.0195, -0.0573, -0.0345],\n        [ 0.0398,  0.0229,  0.0218,  ..., -0.0568,  0.0109,  0.0321],\n        [ 0.0310, -0.0337, -0.0583,  ...,  0.0811, -0.0125, -0.0429]], dtype=torch.float16), '21.to_v_ip.weight': tensor([[-0.0067, -0.0698, -0.0584,  ...,  0.0301, -0.0522,  0.0159],\n        [-0.0308, -0.0358,  0.0017,  ..., -0.0315,  0.0295, -0.0098],\n        [-0.0570,  0.0051,  0.0353,  ...,  0.0061,  0.0232,  0.0472],\n        ...,\n        [-0.0543, -0.0155, -0.1055,  ...,  0.0177, -0.0533,  0.0091],\n        [-0.0208, -0.0594,  0.0195,  ...,  0.0547, -0.0046, -0.0786],\n        [ 0.0377,  0.0217, -0.0314,  ..., -0.0471, -0.0018,  0.0374]], dtype=torch.float16), '22.to_q_lora.down.weight': tensor([[-0.0302, -0.0073, -0.0587,  ...,  0.0801, -0.0399,  0.0079],\n        [-0.0337, -0.0020,  0.0513,  ..., -0.0340,  0.0044, -0.0673],\n        [ 0.0504,  0.0448,  0.0044,  ..., -0.0287,  0.0227, -0.0222],\n        ...,\n        [ 0.0023, -0.0162, -0.0682,  ...,  0.0423, -0.0660, -0.0380],\n        [ 0.0721, -0.0322, -0.0434,  ...,  0.0117, -0.0098,  0.0062],\n        [ 0.0031, -0.0584, -0.0499,  ...,  0.0347,  0.0262,  0.0337]], dtype=torch.float16), '22.to_q_lora.up.weight': tensor([[-0.0648, -0.0396,  0.0005,  ..., -0.0176, -0.0078,  0.0109],\n        [ 0.0186, -0.0312,  0.0450,  ...,  0.0372, -0.0183,  0.0005],\n        [-0.0183,  0.0113, -0.0184,  ..., -0.0055,  0.0120,  0.0114],\n        ...,\n        [ 0.0172, -0.0092,  0.0479,  ...,  0.0643, -0.0066,  0.0013],\n        [-0.0304, -0.0093, -0.0269,  ...,  0.0608,  0.0174,  0.0358],\n        [-0.0462, -0.0340,  0.0104,  ...,  0.0173,  0.0226,  0.0587]], dtype=torch.float16), '22.to_k_lora.down.weight': tensor([[ 0.0105, -0.0084, -0.0228,  ..., -0.0434, -0.0432, -0.0140],\n        [-0.0065,  0.0206, -0.0564,  ...,  0.0369, -0.0175,  0.0226],\n        [-0.0005, -0.0886,  0.0436,  ..., -0.0010, -0.0291,  0.0509],\n        ...,\n        [-0.0175,  0.0645, -0.0015,  ..., -0.0571,  0.0187, -0.0331],\n        [-0.0089, -0.0090,  0.0279,  ...,  0.0302,  0.0144,  0.0317],\n        [ 0.0272,  0.0483,  0.0364,  ...,  0.0740,  0.0255,  0.0306]], dtype=torch.float16), '22.to_k_lora.up.weight': tensor([[-0.0457, -0.0183, -0.0443,  ...,  0.0047, -0.0363, -0.0355],\n        [ 0.0109, -0.0394,  0.0096,  ...,  0.0439,  0.0200, -0.0038],\n        [ 0.0112,  0.0118,  0.0342,  ...,  0.0009, -0.0027, -0.0215],\n        ...,\n        [ 0.0797, -0.0091,  0.0133,  ...,  0.0646, -0.0056,  0.0656],\n        [-0.0468, -0.0127,  0.0073,  ...,  0.0709, -0.1467, -0.0025],\n        [ 0.0139, -0.0775,  0.0044,  ...,  0.0396,  0.0440,  0.0583]], dtype=torch.float16), '22.to_v_lora.down.weight': tensor([[-0.0515,  0.0102, -0.0009,  ..., -0.0103,  0.0643, -0.0014],\n        [ 0.0312, -0.0229,  0.0364,  ..., -0.0337, -0.0337,  0.0099],\n        [-0.0559, -0.0246,  0.0219,  ...,  0.0185,  0.0451,  0.0252],\n        ...,\n        [-0.0240, -0.0098,  0.0096,  ...,  0.0223, -0.0208, -0.0540],\n        [ 0.0125,  0.0225,  0.0235,  ..., -0.0802, -0.0521, -0.0143],\n        [ 0.0102,  0.0226, -0.0604,  ...,  0.0425, -0.0205, -0.0168]], dtype=torch.float16), '22.to_v_lora.up.weight': tensor([[-0.0702,  0.0069, -0.0636,  ..., -0.0300,  0.0147,  0.0257],\n        [-0.0506,  0.0544, -0.0325,  ..., -0.0173,  0.0413, -0.0437],\n        [-0.0527, -0.0171, -0.0453,  ...,  0.0213, -0.0138, -0.0155],\n        ...,\n        [-0.0415, -0.0097,  0.0250,  ...,  0.0225,  0.0163,  0.0029],\n        [ 0.0395, -0.0450,  0.0163,  ..., -0.0403,  0.0318, -0.0023],\n        [-0.0271,  0.0137, -0.0339,  ..., -0.0220,  0.0375,  0.0509]], dtype=torch.float16), '22.to_out_lora.down.weight': tensor([[-2.4490e-02,  5.2338e-02,  9.8419e-03,  ..., -1.3756e-02, -7.4029e-05,  1.9196e-02],\n        [-2.2141e-02, -3.1921e-02, -6.1264e-03,  ...,  2.2888e-02, -4.6356e-02,  6.4011e-03],\n        [ 2.4780e-02,  2.2964e-02, -2.5177e-03,  ..., -1.4206e-02,  1.8921e-02, -3.1113e-02],\n        ...,\n        [-2.7130e-02, -4.8920e-02, -5.2948e-02,  ..., -2.8030e-02,  2.2476e-02, -1.2146e-02],\n        [ 6.3293e-02,  2.7939e-02,  4.8523e-03,  ..., -1.6815e-02, -1.4656e-02,  2.3697e-02],\n        [-2.5345e-02, -3.8643e-03,  3.7933e-02,  ...,  2.3102e-02,  2.1896e-03,  3.0441e-02]], dtype=torch.float16), '22.to_out_lora.up.weight': tensor([[ 0.0247, -0.0428, -0.0638,  ...,  0.0186, -0.0110, -0.0017],\n        [ 0.0670, -0.0242, -0.0036,  ...,  0.0283, -0.0019, -0.0389],\n        [-0.0171, -0.0031, -0.0160,  ...,  0.0176, -0.0207,  0.0131],\n        ...,\n        [ 0.0091, -0.0269, -0.0231,  ...,  0.0351, -0.0522,  0.0328],\n        [-0.0231, -0.0275,  0.0199,  ...,  0.0004, -0.0204, -0.0179],\n        [-0.0232, -0.0226, -0.0237,  ..., -0.0125,  0.0013, -0.0224]], dtype=torch.float16), '23.to_q_lora.down.weight': tensor([[ 0.0274, -0.0319, -0.0488,  ...,  0.0312,  0.0544,  0.0564],\n        [ 0.0106,  0.0068,  0.0250,  ...,  0.0195,  0.0072, -0.0485],\n        [ 0.0158,  0.0152,  0.0504,  ..., -0.0132, -0.0092,  0.0158],\n        ...,\n        [ 0.0038,  0.0177, -0.0069,  ...,  0.0283,  0.0234, -0.0084],\n        [ 0.0045,  0.0117,  0.0042,  ...,  0.0101,  0.0408, -0.0588],\n        [-0.0509,  0.0149, -0.0131,  ..., -0.0603,  0.0356,  0.0847]], dtype=torch.float16), '23.to_q_lora.up.weight': tensor([[-0.0253, -0.0584,  0.0001,  ..., -0.0749,  0.0051,  0.0161],\n        [ 0.0077,  0.0097,  0.0142,  ...,  0.0198,  0.0150,  0.0304],\n        [-0.0059, -0.0476,  0.0083,  ...,  0.0214,  0.0396, -0.0892],\n        ...,\n        [ 0.0449, -0.0706,  0.0101,  ...,  0.0388,  0.0257, -0.0170],\n        [ 0.0216, -0.0085,  0.0652,  ...,  0.0322, -0.0450, -0.0096],\n        [-0.0730, -0.0128, -0.0063,  ..., -0.0252,  0.0954, -0.0418]], dtype=torch.float16), '23.to_k_lora.down.weight': tensor([[-4.3213e-02, -1.7563e-02, -8.1177e-03,  ...,  3.7262e-02,  3.0231e-03, -1.1635e-02],\n        [ 9.6054e-03,  2.4734e-02, -7.7248e-04,  ..., -1.3710e-02, -4.4220e-02,  1.2726e-02],\n        [-1.4381e-02,  4.1626e-02,  6.9702e-02,  ..., -3.3295e-02,  7.2784e-03, -2.7239e-05],\n        ...,\n        [-1.0826e-02, -2.8748e-02, -5.0262e-02,  ...,  4.2786e-02, -3.0472e-02, -3.2440e-02],\n        [ 4.9438e-03, -2.5131e-02, -1.9531e-03,  ...,  4.0039e-02, -4.5288e-02,  3.8177e-02],\n        [ 4.1016e-02, -6.1157e-02,  2.3056e-02,  ...,  4.0680e-02, -1.8950e-03, -1.9348e-02]], dtype=torch.float16), '23.to_k_lora.up.weight': tensor([[ 0.0931, -0.0067, -0.0192,  ...,  0.0031, -0.0933, -0.0015],\n        [-0.0462,  0.0385, -0.0240,  ..., -0.0290, -0.0252,  0.0409],\n        [-0.0260, -0.0284, -0.0469,  ..., -0.0380,  0.0318,  0.0091],\n        ...,\n        [ 0.0004, -0.0564, -0.0162,  ...,  0.0464,  0.0263,  0.0026],\n        [-0.0535, -0.0325, -0.0317,  ...,  0.0410, -0.0368, -0.0202],\n        [ 0.0810, -0.0347,  0.0446,  ...,  0.0164,  0.0308,  0.0023]], dtype=torch.float16), '23.to_v_lora.down.weight': tensor([[-0.0218,  0.0457,  0.0589,  ...,  0.0144, -0.0057,  0.0153],\n        [-0.0242, -0.0017, -0.0541,  ...,  0.0015,  0.0188, -0.0023],\n        [-0.0053, -0.0120, -0.0323,  ...,  0.0056,  0.0094, -0.0306],\n        ...,\n        [-0.0003,  0.0035, -0.0093,  ..., -0.0158,  0.0199, -0.0009],\n        [ 0.0072, -0.0211, -0.0225,  ...,  0.0154,  0.0113, -0.1106],\n        [ 0.0181,  0.0139, -0.0569,  ..., -0.0095,  0.0164, -0.0273]], dtype=torch.float16), '23.to_v_lora.up.weight': tensor([[-0.0133, -0.0032, -0.0088,  ...,  0.0066, -0.0156, -0.0161],\n        [ 0.0256,  0.0327,  0.0344,  ...,  0.0140, -0.0210, -0.0066],\n        [-0.0165,  0.0182,  0.0031,  ..., -0.0058, -0.0406, -0.0025],\n        ...,\n        [-0.0105, -0.0275, -0.0076,  ...,  0.0471, -0.0188,  0.0403],\n        [-0.0054, -0.0327, -0.0023,  ..., -0.0269,  0.0355, -0.0245],\n        [-0.0024, -0.0175,  0.0230,  ...,  0.0071,  0.0085,  0.0141]], dtype=torch.float16), '23.to_out_lora.down.weight': tensor([[ 0.0169, -0.0471,  0.0068,  ...,  0.0515, -0.0859,  0.0424],\n        [ 0.0130, -0.0324,  0.0459,  ..., -0.0411,  0.0345, -0.0196],\n        [ 0.0003, -0.0098,  0.0005,  ...,  0.0035, -0.0078,  0.0110],\n        ...,\n        [ 0.0223,  0.0056, -0.0560,  ..., -0.0076,  0.0515,  0.0129],\n        [ 0.0101, -0.0288, -0.0410,  ..., -0.0162,  0.0341,  0.0057],\n        [ 0.0081,  0.0136, -0.0249,  ..., -0.0075,  0.0356,  0.0313]], dtype=torch.float16), '23.to_out_lora.up.weight': tensor([[ 0.0511, -0.0341,  0.0291,  ..., -0.0546, -0.0136,  0.0076],\n        [ 0.0060, -0.0026, -0.0728,  ...,  0.0169, -0.0322,  0.0656],\n        [ 0.0492, -0.0728,  0.0128,  ...,  0.0352, -0.0621, -0.0322],\n        ...,\n        [-0.0119,  0.0129, -0.0286,  ...,  0.0101, -0.0252,  0.0136],\n        [-0.0046, -0.0028,  0.0451,  ..., -0.0486, -0.0030, -0.0238],\n        [ 0.0201,  0.0321,  0.0142,  ..., -0.0110,  0.0229, -0.0080]], dtype=torch.float16), '23.to_k_ip.weight': tensor([[ 0.0480, -0.0283,  0.0183,  ..., -0.0164, -0.0476,  0.0313],\n        [ 0.0269, -0.0999, -0.0815,  ...,  0.0266,  0.0038, -0.0084],\n        [ 0.0225, -0.0883,  0.0318,  ...,  0.0546,  0.0020,  0.0441],\n        ...,\n        [-0.0046, -0.0180, -0.0649,  ..., -0.0618,  0.0721, -0.0052],\n        [ 0.0020, -0.0208,  0.0380,  ...,  0.0236,  0.0255,  0.0676],\n        [ 0.0797,  0.1193, -0.0069,  ...,  0.0058,  0.0695, -0.0043]], dtype=torch.float16), '23.to_v_ip.weight': tensor([[-0.0299, -0.0095,  0.0407,  ...,  0.0397,  0.0448, -0.0011],\n        [ 0.0219, -0.0190,  0.0581,  ..., -0.0061, -0.0052,  0.0304],\n        [ 0.0546, -0.0491,  0.0601,  ..., -0.0107, -0.0315, -0.0110],\n        ...,\n        [-0.0771, -0.0478, -0.0086,  ...,  0.0403, -0.0024, -0.0896],\n        [-0.0880, -0.0552,  0.0675,  ..., -0.0144,  0.0424, -0.0227],\n        [-0.0325, -0.0343, -0.0263,  ...,  0.0128,  0.0417,  0.0430]], dtype=torch.float16), '24.to_q_lora.down.weight': tensor([[-0.0383,  0.0090, -0.0484,  ...,  0.0420, -0.0720, -0.0046],\n        [-0.0271,  0.0753, -0.0451,  ..., -0.0457, -0.0341, -0.0886],\n        [-0.0905, -0.0493, -0.0183,  ...,  0.0312,  0.0006,  0.0464],\n        ...,\n        [ 0.0205, -0.0237, -0.0093,  ..., -0.0051, -0.0156,  0.0566],\n        [ 0.0140, -0.0181,  0.0166,  ...,  0.0419, -0.0434,  0.1016],\n        [-0.0792,  0.0463,  0.0007,  ..., -0.0044, -0.0427, -0.0288]], dtype=torch.float16), '24.to_q_lora.up.weight': tensor([[ 0.0233,  0.0311,  0.0555,  ...,  0.0083,  0.0395, -0.0236],\n        [ 0.0181,  0.0198, -0.0836,  ..., -0.0061,  0.0324, -0.0497],\n        [ 0.0395,  0.0154, -0.0563,  ...,  0.0334, -0.0211,  0.0331],\n        ...,\n        [-0.0297, -0.0338, -0.0171,  ..., -0.0432,  0.0060, -0.0133],\n        [ 0.0318, -0.0202, -0.0801,  ..., -0.0270,  0.0195, -0.0685],\n        [ 0.0425, -0.0334,  0.0482,  ..., -0.0944, -0.0198, -0.0182]], dtype=torch.float16), '24.to_k_lora.down.weight': tensor([[-3.8269e-02,  5.0354e-02,  3.3417e-02,  ..., -1.7075e-02,  3.6678e-03, -1.6312e-02],\n        [-8.3847e-03, -9.7427e-03, -3.7689e-02,  ..., -3.5858e-02,  2.1553e-03,  1.8814e-02],\n        [-2.6531e-03, -2.6260e-02, -1.4793e-02,  ...,  4.5898e-02,  1.2207e-02, -7.9651e-03],\n        ...,\n        [-2.2769e-05,  1.2161e-02,  5.7343e-02,  ...,  6.6681e-03, -5.1483e-02,  1.6769e-02],\n        [-5.4779e-02, -1.0918e-02, -5.0934e-02,  ...,  4.2419e-03, -6.8542e-02, -7.1655e-02],\n        [ 9.2850e-03,  2.5192e-02,  3.8940e-02,  ..., -1.4931e-02, -8.0261e-02,  1.2756e-02]], dtype=torch.float16), '24.to_k_lora.up.weight': tensor([[-0.0118, -0.0701, -0.0480,  ..., -0.0439, -0.0091,  0.0916],\n        [-0.0460,  0.0334,  0.0033,  ..., -0.0025,  0.0209,  0.0325],\n        [-0.0140, -0.0216,  0.0740,  ...,  0.0047, -0.0027,  0.0261],\n        ...,\n        [ 0.0209,  0.0337,  0.0177,  ...,  0.0242, -0.0056, -0.0431],\n        [ 0.0494,  0.0175,  0.0623,  ...,  0.0406, -0.0438, -0.0145],\n        [ 0.0587, -0.0429,  0.0770,  ..., -0.0529,  0.0246,  0.0091]], dtype=torch.float16), '24.to_v_lora.down.weight': tensor([[-2.4445e-02, -3.4912e-02,  1.4015e-02,  ..., -2.8793e-02, -5.6793e-02,  4.1840e-02],\n        [-2.4147e-03, -7.7454e-02,  3.7109e-02,  ...,  6.0120e-03, -5.5237e-03, -6.7505e-02],\n        [-1.1719e-02, -3.5370e-02, -4.6997e-03,  ..., -5.3131e-02,  4.3732e-02, -5.2795e-02],\n        ...,\n        [-6.7383e-02, -1.9684e-02, -3.8330e-02,  ..., -2.5360e-02, -5.8502e-02,  1.3870e-02],\n        [ 5.0163e-03, -2.1484e-02, -5.3942e-05,  ...,  3.0899e-02,  1.5106e-03,  6.2683e-02],\n        [-3.3905e-02, -5.5023e-02, -3.8757e-02,  ..., -3.5492e-02, -8.9417e-03,  1.5230e-03]], dtype=torch.float16), '24.to_v_lora.up.weight': tensor([[ 0.0071,  0.0110,  0.0340,  ...,  0.0063,  0.0074, -0.0640],\n        [-0.0109,  0.0073, -0.0092,  ...,  0.0205, -0.0129,  0.0420],\n        [ 0.0303, -0.0199, -0.0391,  ..., -0.0221,  0.0143,  0.0414],\n        ...,\n        [-0.0095, -0.0249, -0.0307,  ...,  0.0176,  0.0133, -0.0108],\n        [-0.0226,  0.0249, -0.0083,  ..., -0.0179,  0.0563,  0.0075],\n        [ 0.0131, -0.0543,  0.0578,  ...,  0.0470, -0.0007, -0.0102]], dtype=torch.float16), '24.to_out_lora.down.weight': tensor([[-0.0127,  0.0248, -0.0058,  ..., -0.0381,  0.0115,  0.0291],\n        [-0.0170, -0.0317, -0.0237,  ..., -0.0257, -0.0094, -0.0204],\n        [ 0.0523, -0.0211, -0.0247,  ..., -0.0207, -0.0638, -0.0727],\n        ...,\n        [-0.0051,  0.0147,  0.0204,  ...,  0.0025, -0.0168, -0.0149],\n        [ 0.0314, -0.0588,  0.0008,  ..., -0.0087,  0.0094,  0.0095],\n        [-0.0017, -0.0187, -0.0432,  ...,  0.0047, -0.0271, -0.0214]], dtype=torch.float16), '24.to_out_lora.up.weight': tensor([[ 0.0057,  0.0183,  0.0089,  ..., -0.0319,  0.0145,  0.0210],\n        [-0.0104,  0.0077, -0.0107,  ...,  0.0219,  0.0206, -0.0160],\n        [ 0.0019,  0.0109, -0.0135,  ...,  0.0338,  0.0223,  0.0064],\n        ...,\n        [ 0.0181,  0.0286, -0.0618,  ...,  0.0225, -0.0283, -0.0263],\n        [ 0.0190, -0.0254,  0.0090,  ..., -0.0035,  0.0088,  0.0126],\n        [-0.0009, -0.0276, -0.0144,  ...,  0.0062,  0.0056, -0.0138]], dtype=torch.float16), '25.to_q_lora.down.weight': tensor([[-0.0213, -0.0325,  0.0391,  ...,  0.0065,  0.0449,  0.0103],\n        [-0.0105, -0.0616, -0.0487,  ..., -0.0076, -0.0215,  0.0258],\n        [ 0.0530, -0.0090,  0.0749,  ..., -0.0355,  0.0374,  0.0180],\n        ...,\n        [ 0.0157,  0.0085, -0.0578,  ..., -0.0255, -0.0021,  0.0728],\n        [ 0.0401, -0.0664, -0.0239,  ..., -0.0060,  0.0522, -0.0050],\n        [ 0.0085, -0.0622,  0.0365,  ...,  0.0595,  0.0650, -0.0281]], dtype=torch.float16), '25.to_q_lora.up.weight': tensor([[-0.0086,  0.0165,  0.0607,  ...,  0.0381, -0.0032, -0.0505],\n        [ 0.0033,  0.0511, -0.0978,  ...,  0.0075,  0.0034, -0.0484],\n        [ 0.0181,  0.0373,  0.0088,  ...,  0.0317, -0.0133,  0.0217],\n        ...,\n        [-0.0048,  0.0101, -0.0069,  ..., -0.0060, -0.0110, -0.0001],\n        [-0.0270, -0.0161,  0.0067,  ..., -0.0016, -0.0170, -0.0187],\n        [ 0.0151,  0.0547,  0.0074,  ..., -0.0137,  0.0222, -0.0080]], dtype=torch.float16), '25.to_k_lora.down.weight': tensor([[-0.0240, -0.0397, -0.0194,  ...,  0.0377,  0.0179, -0.0151],\n        [-0.0210,  0.0358, -0.0010,  ...,  0.0045,  0.0056,  0.0089],\n        [ 0.0065,  0.0103,  0.0261,  ..., -0.0153,  0.0707, -0.0369],\n        ...,\n        [ 0.0307,  0.0182,  0.0197,  ..., -0.0125, -0.0259, -0.0143],\n        [-0.0240, -0.0055,  0.0410,  ..., -0.0053, -0.0202,  0.0091],\n        [ 0.0194,  0.0041, -0.0244,  ...,  0.0066,  0.0092, -0.0513]], dtype=torch.float16), '25.to_k_lora.up.weight': tensor([[-0.0210, -0.0226, -0.0670,  ...,  0.0383,  0.0292, -0.0049],\n        [-0.0397, -0.0499, -0.0620,  ...,  0.0350,  0.0170,  0.0146],\n        [ 0.0176,  0.0108, -0.0300,  ...,  0.0356, -0.0241, -0.0224],\n        ...,\n        [-0.0121, -0.0091, -0.0089,  ...,  0.0026, -0.0087,  0.0157],\n        [ 0.0092,  0.0156, -0.0035,  ..., -0.0293,  0.0071,  0.0156],\n        [-0.0313,  0.0311, -0.0410,  ..., -0.0141,  0.0282,  0.0115]], dtype=torch.float16), '25.to_v_lora.down.weight': tensor([[ 0.0105,  0.0531, -0.0123,  ...,  0.0140, -0.0289,  0.0266],\n        [-0.0263,  0.0149,  0.0073,  ..., -0.0167, -0.0068,  0.0143],\n        [-0.0083, -0.0231, -0.0116,  ...,  0.0032, -0.0168,  0.0122],\n        ...,\n        [-0.0277, -0.0497,  0.0048,  ..., -0.0247, -0.0054, -0.0010],\n        [-0.0322,  0.0424, -0.0175,  ..., -0.0153, -0.0011,  0.0006],\n        [-0.0048,  0.0112, -0.0098,  ...,  0.0179,  0.0136,  0.0331]], dtype=torch.float16), '25.to_v_lora.up.weight': tensor([[ 0.0114,  0.0195, -0.0179,  ..., -0.0174, -0.0172, -0.0003],\n        [ 0.0251, -0.0011,  0.0098,  ..., -0.0187, -0.0335,  0.0123],\n        [-0.0015,  0.0023, -0.0103,  ...,  0.0366, -0.0017,  0.0200],\n        ...,\n        [-0.0193, -0.0257,  0.0123,  ..., -0.0210,  0.0010,  0.0161],\n        [-0.0226,  0.0119, -0.0164,  ..., -0.0170, -0.0014,  0.0123],\n        [-0.0160,  0.0005,  0.0240,  ..., -0.0360,  0.0147, -0.0119]], dtype=torch.float16), '25.to_out_lora.down.weight': tensor([[ 0.0175, -0.0015, -0.0122,  ...,  0.0278,  0.0402, -0.0099],\n        [ 0.0134, -0.0122,  0.0039,  ..., -0.0060,  0.0077, -0.0271],\n        [ 0.0007, -0.0270, -0.0012,  ...,  0.0130, -0.0386, -0.0580],\n        ...,\n        [ 0.0145, -0.0049,  0.0413,  ...,  0.0044, -0.0244,  0.0001],\n        [ 0.0020,  0.0475, -0.0280,  ...,  0.0352, -0.0423, -0.0031],\n        [-0.0024,  0.0282,  0.0210,  ...,  0.0131, -0.0020, -0.0151]], dtype=torch.float16), '25.to_out_lora.up.weight': tensor([[-0.0059,  0.0022, -0.0076,  ...,  0.0123, -0.0026, -0.0415],\n        [ 0.0073,  0.0223, -0.0168,  ..., -0.0510,  0.0299, -0.0553],\n        [-0.0527, -0.0071,  0.0110,  ...,  0.0142, -0.0020,  0.0016],\n        ...,\n        [-0.0114,  0.0203, -0.0240,  ...,  0.0061,  0.0019,  0.0017],\n        [ 0.0037, -0.0017,  0.0166,  ..., -0.0004,  0.0226, -0.0253],\n        [ 0.0010,  0.0045, -0.0347,  ..., -0.0375, -0.0359,  0.0202]], dtype=torch.float16), '25.to_k_ip.weight': tensor([[-1.8372e-02,  3.4271e-02,  1.0437e-04,  ..., -7.0686e-03, -8.1421e-02, -4.2389e-02],\n        [-3.3295e-02,  5.0140e-02,  1.7776e-02,  ..., -6.8176e-02, -6.2500e-02,  3.3569e-02],\n        [ 5.2887e-02, -1.2598e-01,  1.7700e-02,  ...,  3.2104e-02, -1.1292e-02,  9.3079e-03],\n        ...,\n        [-6.2012e-02, -8.1711e-03,  3.8086e-02,  ...,  3.5973e-03,  2.8915e-02, -1.7090e-02],\n        [ 2.1515e-02,  4.2480e-02, -9.5398e-02,  ..., -7.8613e-02,  5.1003e-03, -5.9174e-02],\n        [ 6.7688e-02, -1.2598e-01, -3.6011e-02,  ...,  3.7140e-02, -5.1666e-02,  2.5360e-02]], dtype=torch.float16), '25.to_v_ip.weight': tensor([[-0.0172, -0.0059,  0.0124,  ..., -0.0181, -0.0182, -0.0110],\n        [-0.0059, -0.0151, -0.0214,  ...,  0.0361, -0.0385,  0.0008],\n        [-0.0268, -0.0545, -0.0420,  ...,  0.0011, -0.0677, -0.0341],\n        ...,\n        [ 0.0248,  0.0039,  0.0264,  ..., -0.0052, -0.0199,  0.0103],\n        [-0.0421,  0.0344, -0.0388,  ..., -0.0205,  0.0197,  0.0472],\n        [-0.0005,  0.0272,  0.0099,  ..., -0.0002, -0.0421,  0.0517]], dtype=torch.float16), '26.to_q_lora.down.weight': tensor([[-0.0019,  0.0508,  0.0072,  ..., -0.0303,  0.0100,  0.0084],\n        [-0.0315,  0.0409,  0.0303,  ..., -0.0208, -0.0251,  0.0242],\n        [ 0.0271, -0.0149,  0.0230,  ..., -0.0073, -0.0181, -0.0045],\n        ...,\n        [-0.0084,  0.0580,  0.0598,  ...,  0.0597, -0.0082,  0.0216],\n        [-0.0138, -0.0645,  0.0323,  ...,  0.0043,  0.0373, -0.0255],\n        [-0.0216,  0.0068,  0.0342,  ..., -0.0309, -0.0173, -0.0453]], dtype=torch.float16), '26.to_q_lora.up.weight': tensor([[ 0.0911,  0.0204,  0.0147,  ...,  0.0227,  0.1025,  0.0155],\n        [-0.0129, -0.0168,  0.0406,  ..., -0.0011,  0.0530, -0.0372],\n        [ 0.0170,  0.0125,  0.0764,  ..., -0.0218,  0.0324,  0.0036],\n        ...,\n        [-0.0190, -0.1039, -0.0581,  ...,  0.0282,  0.0845, -0.0101],\n        [-0.0018,  0.0874, -0.0300,  ...,  0.0312, -0.0417, -0.0664],\n        [-0.0186,  0.0168,  0.0461,  ...,  0.0384, -0.0149, -0.0032]], dtype=torch.float16), '26.to_k_lora.down.weight': tensor([[ 0.0119,  0.0019,  0.0361,  ..., -0.0024, -0.0038, -0.0143],\n        [ 0.0066, -0.0278, -0.0579,  ..., -0.0119,  0.0087,  0.0101],\n        [-0.0245, -0.0520,  0.0728,  ...,  0.0185, -0.0106, -0.0525],\n        ...,\n        [-0.0236, -0.0056, -0.0109,  ..., -0.0220,  0.0164,  0.0180],\n        [-0.0046, -0.0677, -0.0161,  ..., -0.0116,  0.0302,  0.0364],\n        [ 0.0047, -0.0243, -0.0397,  ..., -0.0002,  0.0131, -0.0026]], dtype=torch.float16), '26.to_k_lora.up.weight': tensor([[ 0.0285, -0.0619, -0.0249,  ...,  0.0445,  0.0037, -0.0068],\n        [-0.0539,  0.0340, -0.0280,  ..., -0.0095,  0.0529,  0.0216],\n        [ 0.0138,  0.0573,  0.0303,  ...,  0.0302, -0.0084, -0.0238],\n        ...,\n        [ 0.0235,  0.1015, -0.0677,  ...,  0.0112,  0.0729, -0.0410],\n        [ 0.0082,  0.0504, -0.0009,  ...,  0.0080, -0.0061,  0.0162],\n        [ 0.0389, -0.0530,  0.0453,  ...,  0.0350,  0.0580, -0.0080]], dtype=torch.float16), '26.to_v_lora.down.weight': tensor([[ 0.0338, -0.0208,  0.0351,  ...,  0.0063, -0.0010, -0.0317],\n        [-0.0011,  0.0554,  0.0027,  ...,  0.0132,  0.0080,  0.0125],\n        [-0.0066,  0.0144, -0.0344,  ..., -0.0204,  0.0367, -0.0166],\n        ...,\n        [-0.0396,  0.0055, -0.0126,  ..., -0.0168,  0.0342,  0.0164],\n        [ 0.0278, -0.0150, -0.0046,  ...,  0.0032, -0.0226,  0.0012],\n        [ 0.0032, -0.0087,  0.0272,  ...,  0.0272, -0.0117,  0.0214]], dtype=torch.float16), '26.to_v_lora.up.weight': tensor([[ 0.0173, -0.0047, -0.0108,  ...,  0.0017, -0.0375,  0.0175],\n        [ 0.0145, -0.0112,  0.0140,  ...,  0.0046,  0.0197, -0.0165],\n        [ 0.0030, -0.0086,  0.0360,  ...,  0.0090, -0.0214,  0.0144],\n        ...,\n        [-0.0086,  0.0070,  0.0076,  ..., -0.0424, -0.0197,  0.0097],\n        [-0.0479,  0.0430,  0.0209,  ..., -0.0173, -0.0126, -0.0461],\n        [ 0.0285,  0.0022,  0.0129,  ...,  0.0160,  0.0217,  0.0034]], dtype=torch.float16), '26.to_out_lora.down.weight': tensor([[-2.0554e-02,  8.8577e-03, -9.4757e-03,  ..., -1.9272e-02,  4.2511e-02, -7.6790e-03],\n        [-2.2690e-02, -2.6646e-03, -2.8443e-04,  ..., -1.4946e-02, -1.7990e-02, -2.0447e-02],\n        [-2.0142e-03,  9.8648e-03, -1.7868e-02,  ...,  2.2781e-02, -2.2110e-02, -2.7054e-02],\n        ...,\n        [-2.3441e-03,  1.3802e-02,  1.0669e-05,  ...,  2.1942e-02,  3.1433e-02, -4.3602e-03],\n        [ 4.7394e-02, -2.4368e-02, -2.0401e-02,  ...,  4.6082e-02,  4.1565e-02,  4.8767e-02],\n        [ 3.4241e-02,  1.5671e-02, -3.0289e-02,  ..., -1.9653e-02,  3.3302e-03,  3.4546e-02]], dtype=torch.float16), '26.to_out_lora.up.weight': tensor([[-0.0284,  0.0296,  0.0085,  ...,  0.0082,  0.0251,  0.0152],\n        [-0.0026,  0.0298, -0.0088,  ..., -0.0065,  0.0068,  0.0238],\n        [ 0.0100, -0.0028, -0.0104,  ...,  0.0222,  0.0547, -0.0135],\n        ...,\n        [-0.0196, -0.0318,  0.0341,  ...,  0.0064, -0.0001,  0.0029],\n        [ 0.0228,  0.0143,  0.0102,  ...,  0.0134, -0.0386, -0.0066],\n        [ 0.0091, -0.0359,  0.0193,  ..., -0.0098,  0.0091,  0.0115]], dtype=torch.float16), '27.to_q_lora.down.weight': tensor([[-0.0544, -0.0182, -0.0276,  ...,  0.0827,  0.0142, -0.0082],\n        [-0.0202,  0.0037, -0.0267,  ...,  0.0081,  0.0245, -0.0440],\n        [-0.0422,  0.0004,  0.0742,  ...,  0.0265,  0.0479,  0.0203],\n        ...,\n        [ 0.0287, -0.0467, -0.0611,  ..., -0.0493,  0.0082, -0.0106],\n        [-0.0381, -0.0151,  0.0937,  ...,  0.0283,  0.0191, -0.0443],\n        [-0.0493,  0.0137,  0.0145,  ...,  0.0302,  0.0431,  0.0850]], dtype=torch.float16), '27.to_q_lora.up.weight': tensor([[-0.0219, -0.0130,  0.0113,  ..., -0.0558,  0.0191, -0.0517],\n        [-0.0205,  0.0676, -0.0301,  ...,  0.0432, -0.0291, -0.0715],\n        [-0.0151, -0.0230,  0.0034,  ..., -0.0129,  0.0064,  0.0142],\n        ...,\n        [ 0.0404, -0.0520,  0.0178,  ..., -0.0403, -0.0163,  0.0810],\n        [ 0.0335, -0.0591,  0.0241,  ...,  0.0657, -0.0145, -0.0359],\n        [-0.0049,  0.0332, -0.0420,  ...,  0.0020, -0.0274, -0.0303]], dtype=torch.float16), '27.to_k_lora.down.weight': tensor([[-0.0339,  0.0046, -0.0149,  ...,  0.0045,  0.0108, -0.0233],\n        [ 0.0058,  0.0125,  0.0048,  ...,  0.0023,  0.0623, -0.0038],\n        [-0.0150,  0.0157,  0.0004,  ..., -0.0116,  0.0523, -0.0092],\n        ...,\n        [ 0.0064,  0.0430,  0.0024,  ...,  0.0019,  0.0357, -0.0048],\n        [-0.0149,  0.0324,  0.0047,  ...,  0.0036,  0.0093,  0.0019],\n        [-0.0198,  0.0007, -0.0109,  ..., -0.0115, -0.0245, -0.0254]], dtype=torch.float16), '27.to_k_lora.up.weight': tensor([[ 0.0135,  0.0384,  0.0201,  ..., -0.0449,  0.0192, -0.0485],\n        [-0.0115,  0.0398, -0.0042,  ..., -0.0198,  0.0146, -0.0777],\n        [-0.0017,  0.0559,  0.0416,  ...,  0.0014,  0.0397, -0.0569],\n        ...,\n        [ 0.0231, -0.0324, -0.0394,  ..., -0.0544, -0.0252, -0.0219],\n        [ 0.0296,  0.0626,  0.0363,  ..., -0.0040, -0.0163, -0.0205],\n        [-0.0161, -0.0181,  0.0047,  ...,  0.0109, -0.0027,  0.0072]], dtype=torch.float16), '27.to_v_lora.down.weight': tensor([[-2.7191e-02,  1.1414e-02, -2.2552e-02,  ..., -7.7934e-03, -4.4037e-02, -9.6207e-03],\n        [ 4.6349e-03, -6.1859e-02,  9.4604e-03,  ...,  1.6266e-02,  1.7319e-02,  4.0833e-02],\n        [-1.0910e-02, -7.9117e-03, -6.9542e-03,  ...,  2.2068e-03,  2.2842e-02, -4.2915e-03],\n        ...,\n        [ 3.0502e-02, -2.1774e-02,  8.3694e-03,  ..., -7.1411e-03, -1.7639e-02, -9.3460e-05],\n        [ 1.1848e-02,  2.3117e-02, -8.4534e-03,  ...,  1.6251e-02,  1.8646e-02,  1.8402e-02],\n        [-6.0692e-03, -1.9531e-03,  6.1569e-03,  ..., -1.1272e-03, -5.6229e-03, -1.3237e-02]], dtype=torch.float16), '27.to_v_lora.up.weight': tensor([[ 2.6817e-03,  2.3689e-03, -4.9286e-03,  ..., -1.7227e-02,  3.0762e-02,  3.2166e-02],\n        [-3.2440e-02,  1.3924e-02, -1.3741e-02,  ..., -1.0216e-02, -1.8477e-06, -1.9440e-02],\n        [ 1.9417e-03, -5.5428e-03, -1.0948e-02,  ...,  3.8269e-02, -3.5877e-03,  8.5068e-03],\n        ...,\n        [-7.3395e-03,  2.2339e-02,  5.7888e-04,  ...,  7.2289e-03,  3.4866e-03,  2.7802e-02],\n        [-1.1147e-02,  1.2360e-02, -7.5798e-03,  ...,  2.6760e-03, -2.2640e-03, -2.3537e-03],\n        [-2.2186e-02,  3.1952e-02,  2.1576e-02,  ...,  1.6373e-02,  1.3161e-02, -4.9171e-03]], dtype=torch.float16), '27.to_out_lora.down.weight': tensor([[ 0.0496, -0.0152,  0.0197,  ...,  0.0093, -0.0102,  0.0219],\n        [ 0.0227, -0.0055,  0.0275,  ..., -0.0051,  0.0630,  0.0063],\n        [ 0.0083,  0.0382, -0.0088,  ...,  0.0103,  0.0006,  0.0015],\n        ...,\n        [ 0.0056, -0.0023,  0.0122,  ...,  0.0181, -0.0066, -0.0258],\n        [ 0.0312, -0.0241, -0.0162,  ..., -0.0088, -0.0242,  0.0128],\n        [-0.0319,  0.0019, -0.0100,  ..., -0.0085,  0.0332,  0.0493]], dtype=torch.float16), '27.to_out_lora.up.weight': tensor([[-0.0325, -0.0009,  0.0194,  ..., -0.0073,  0.0350,  0.0236],\n        [-0.0101,  0.0248,  0.0247,  ...,  0.0177, -0.0073,  0.0147],\n        [ 0.0172,  0.0239, -0.0204,  ..., -0.0257, -0.0311, -0.0127],\n        ...,\n        [-0.0159,  0.0190, -0.0163,  ..., -0.0368,  0.0115,  0.0360],\n        [ 0.0049, -0.0161,  0.0461,  ..., -0.0159,  0.0494,  0.0092],\n        [-0.0202, -0.0153, -0.0043,  ...,  0.0006,  0.0019, -0.0165]], dtype=torch.float16), '27.to_k_ip.weight': tensor([[ 4.4586e-02, -3.0197e-02, -3.8544e-02,  ..., -5.2887e-02, -4.8615e-02, -3.5736e-02],\n        [ 6.2378e-02,  5.8380e-02, -4.3640e-02,  ...,  1.0735e-02,  2.2919e-02,  2.9129e-02],\n        [-3.7060e-03,  4.6158e-03,  2.0813e-02,  ...,  6.4026e-02,  4.6326e-02,  4.3488e-02],\n        ...,\n        [-5.5695e-02,  8.0261e-02,  4.9744e-02,  ...,  4.6492e-05, -7.3853e-02, -6.4774e-03],\n        [-2.9678e-02, -5.3284e-02, -3.4821e-02,  ...,  8.7585e-03,  1.6556e-02,  3.4180e-02],\n        [-4.0436e-02,  9.8877e-03,  3.9917e-02,  ...,  1.2985e-02,  4.8309e-02, -2.9510e-02]], dtype=torch.float16), '27.to_v_ip.weight': tensor([[ 0.0072, -0.0116, -0.0477,  ..., -0.0168,  0.0001, -0.0435],\n        [-0.0298,  0.0138, -0.0273,  ..., -0.0038,  0.0180, -0.0169],\n        [-0.0094,  0.0216,  0.0231,  ...,  0.0282, -0.0226, -0.0131],\n        ...,\n        [-0.0323, -0.0262,  0.0348,  ...,  0.0321, -0.0073, -0.0154],\n        [ 0.0075,  0.0729, -0.0945,  ..., -0.0545, -0.0510,  0.0308],\n        [ 0.0583, -0.0287, -0.0220,  ..., -0.0347,  0.0339, -0.0188]], dtype=torch.float16), '28.to_q_lora.down.weight': tensor([[ 0.0226,  0.0342,  0.0180,  ..., -0.0287, -0.0205, -0.0105],\n        [-0.0206, -0.0077,  0.0099,  ..., -0.0543,  0.0088,  0.0331],\n        [-0.0045, -0.0143,  0.0033,  ...,  0.0219,  0.0643, -0.0119],\n        ...,\n        [-0.0033, -0.0088, -0.0220,  ...,  0.0634,  0.0363, -0.0558],\n        [-0.0100, -0.0512,  0.0463,  ..., -0.0532, -0.0071,  0.0337],\n        [-0.0297,  0.0191,  0.0454,  ..., -0.0097,  0.0793, -0.0317]], dtype=torch.float16), '28.to_q_lora.up.weight': tensor([[ 0.0279,  0.0066,  0.0074,  ...,  0.0285, -0.0079, -0.0054],\n        [-0.0410, -0.0078, -0.0461,  ...,  0.0112,  0.0308, -0.0261],\n        [ 0.0632,  0.0494,  0.0327,  ..., -0.0217,  0.0493, -0.0269],\n        ...,\n        [-0.0789,  0.0369, -0.0192,  ..., -0.0439,  0.0279, -0.0334],\n        [-0.0127, -0.0068,  0.0340,  ..., -0.0014,  0.0033, -0.0110],\n        [ 0.1110, -0.0485,  0.0013,  ...,  0.0196, -0.0020, -0.0438]], dtype=torch.float16), '28.to_k_lora.down.weight': tensor([[-0.0510,  0.0254, -0.0430,  ...,  0.0085,  0.0109,  0.0187],\n        [-0.0170,  0.0212,  0.0268,  ...,  0.0314, -0.0377,  0.0047],\n        [ 0.0168,  0.0135,  0.0253,  ..., -0.0114,  0.0446, -0.0059],\n        ...,\n        [ 0.0219, -0.0344,  0.0366,  ..., -0.0338,  0.0532, -0.0038],\n        [ 0.0101, -0.0591, -0.0192,  ..., -0.0102, -0.0067,  0.0255],\n        [-0.0204,  0.0173, -0.0331,  ..., -0.0019,  0.1027,  0.0031]], dtype=torch.float16), '28.to_k_lora.up.weight': tensor([[ 0.0188,  0.0175,  0.0090,  ...,  0.0316,  0.0020, -0.0278],\n        [ 0.0229, -0.0748, -0.0692,  ...,  0.0538, -0.0143, -0.0046],\n        [-0.0078, -0.0437,  0.0159,  ...,  0.0043, -0.0089,  0.0609],\n        ...,\n        [-0.0018,  0.0592, -0.0450,  ..., -0.0206,  0.0026,  0.0311],\n        [ 0.0296, -0.0187, -0.0034,  ...,  0.0352, -0.0381, -0.0527],\n        [ 0.0160, -0.0676, -0.0066,  ..., -0.0076,  0.0400,  0.0456]], dtype=torch.float16), '28.to_v_lora.down.weight': tensor([[ 1.9684e-02,  1.5617e-02,  5.5466e-03,  ...,  1.6571e-02,  1.4397e-02, -2.9144e-02],\n        [-4.7455e-02,  2.0477e-02,  1.6693e-02,  ...,  1.0948e-02, -5.7936e-05, -6.6185e-03],\n        [-8.8577e-03, -2.9572e-02, -8.9417e-03,  ...,  2.3270e-02,  3.6983e-03, -2.1011e-02],\n        ...,\n        [-2.2430e-02,  9.6893e-03,  3.4515e-02,  ...,  4.3640e-03, -4.4342e-02, -2.5497e-02],\n        [-4.4373e-02,  1.2674e-03,  6.9237e-03,  ..., -3.0060e-02,  4.0741e-02, -1.9264e-03],\n        [-2.6016e-02, -3.1555e-02,  3.2257e-02,  ..., -8.4610e-03, -1.1497e-02, -1.6296e-02]], dtype=torch.float16), '28.to_v_lora.up.weight': tensor([[-0.0349, -0.0410,  0.0047,  ...,  0.0102, -0.0048,  0.0147],\n        [ 0.0186, -0.0035,  0.0393,  ..., -0.0324, -0.0077, -0.0101],\n        [ 0.0245, -0.0083,  0.0532,  ..., -0.0094, -0.0259,  0.0783],\n        ...,\n        [ 0.0053, -0.0099, -0.0149,  ..., -0.0087,  0.0076, -0.0009],\n        [ 0.0044,  0.0249,  0.0087,  ..., -0.0505, -0.0011, -0.0250],\n        [-0.0077,  0.0221,  0.0323,  ...,  0.0605,  0.0464,  0.0018]], dtype=torch.float16), '28.to_out_lora.down.weight': tensor([[ 0.0143, -0.0031,  0.0006,  ...,  0.0127, -0.0053, -0.0472],\n        [-0.0246,  0.0181, -0.0059,  ..., -0.0317, -0.0107,  0.0659],\n        [-0.0313, -0.0095, -0.0010,  ..., -0.0112,  0.0250,  0.0335],\n        ...,\n        [-0.0230, -0.0072,  0.0188,  ..., -0.0386, -0.0159, -0.0052],\n        [-0.0230, -0.0202,  0.0244,  ..., -0.0474,  0.0337,  0.0080],\n        [-0.0061,  0.0034, -0.0110,  ..., -0.0153, -0.0440,  0.0994]], dtype=torch.float16), '28.to_out_lora.up.weight': tensor([[ 6.2065e-03,  4.4495e-02,  2.6154e-02,  ...,  2.7679e-02,  4.4647e-02, -1.8661e-02],\n        [ 7.0839e-03, -3.6743e-02, -5.3596e-03,  ..., -5.4016e-03, -5.0201e-02,  3.3722e-02],\n        [ 6.7368e-03,  5.1544e-02,  2.7199e-03,  ...,  1.6708e-02,  7.3471e-03,  9.8724e-03],\n        ...,\n        [-4.4098e-02,  1.7441e-02,  1.6052e-02,  ...,  4.7684e-05,  4.4918e-04, -5.5237e-03],\n        [-8.3389e-03, -6.3400e-03, -1.1187e-03,  ..., -1.0475e-02,  2.1683e-02, -6.2447e-03],\n        [ 8.9111e-03,  3.7811e-02,  3.1891e-02,  ..., -3.7628e-02, -1.7776e-02,  3.6377e-02]], dtype=torch.float16), '29.to_q_lora.down.weight': tensor([[ 0.0203,  0.0068,  0.0011,  ..., -0.0235, -0.0029,  0.0126],\n        [-0.0314,  0.0240,  0.0365,  ...,  0.0324, -0.0277,  0.0077],\n        [-0.0208, -0.0059,  0.0298,  ..., -0.0110, -0.0045, -0.0186],\n        ...,\n        [-0.0325,  0.0202, -0.0112,  ..., -0.0388,  0.0660, -0.0382],\n        [ 0.0312, -0.0230,  0.0378,  ..., -0.0393,  0.0211, -0.0147],\n        [-0.0004, -0.0260,  0.0468,  ...,  0.0002,  0.0256,  0.0356]], dtype=torch.float16), '29.to_q_lora.up.weight': tensor([[ 0.0721,  0.0240,  0.0502,  ...,  0.0646,  0.0224, -0.0037],\n        [ 0.0797, -0.0316,  0.0753,  ...,  0.0198, -0.0217, -0.0327],\n        [ 0.0609,  0.0485,  0.0741,  ...,  0.0641, -0.0038, -0.0385],\n        ...,\n        [ 0.0078,  0.0124, -0.0117,  ..., -0.0015, -0.0059,  0.0070],\n        [ 0.0333,  0.0663,  0.0265,  ...,  0.0134,  0.0388,  0.0104],\n        [ 0.0510, -0.0699, -0.0249,  ..., -0.0042,  0.0204,  0.0254]], dtype=torch.float16), '29.to_k_lora.down.weight': tensor([[-0.0354,  0.0076,  0.0046,  ..., -0.0113,  0.0208, -0.0355],\n        [ 0.0261, -0.0320, -0.0095,  ..., -0.0020, -0.0217, -0.0192],\n        [-0.0199,  0.0155,  0.0024,  ..., -0.0421,  0.0193, -0.0102],\n        ...,\n        [-0.0278, -0.0167,  0.0257,  ...,  0.0336,  0.0135, -0.0291],\n        [ 0.0414, -0.0193,  0.0106,  ..., -0.0414,  0.0061,  0.0121],\n        [ 0.0242,  0.0382,  0.0054,  ..., -0.0208, -0.0154, -0.0016]], dtype=torch.float16), '29.to_k_lora.up.weight': tensor([[-0.0202,  0.0189,  0.0883,  ...,  0.0072, -0.0012,  0.0418],\n        [ 0.0105,  0.0047,  0.0303,  ...,  0.0054,  0.0159, -0.0565],\n        [-0.0107,  0.0307,  0.0385,  ...,  0.0259, -0.0101, -0.0093],\n        ...,\n        [-0.0146,  0.0003,  0.0020,  ..., -0.0166,  0.0100, -0.0046],\n        [ 0.0120, -0.0010,  0.0180,  ...,  0.0015,  0.0094,  0.0232],\n        [-0.0072,  0.0383,  0.0240,  ..., -0.0319,  0.0353,  0.0534]], dtype=torch.float16), '29.to_v_lora.down.weight': tensor([[ 0.0104,  0.0333, -0.0178,  ...,  0.0093, -0.0017,  0.0149],\n        [-0.0237, -0.0164,  0.0079,  ..., -0.0054,  0.0564,  0.0369],\n        [ 0.0318, -0.0214,  0.0023,  ..., -0.0293, -0.0311,  0.0186],\n        ...,\n        [ 0.0127, -0.0185,  0.0047,  ..., -0.0163,  0.0217, -0.0127],\n        [-0.0124, -0.0076, -0.0114,  ...,  0.0237, -0.0112,  0.0458],\n        [-0.0134, -0.0633, -0.0179,  ...,  0.0080,  0.0348, -0.0075]], dtype=torch.float16), '29.to_v_lora.up.weight': tensor([[-0.0282, -0.0098,  0.0056,  ..., -0.0121, -0.0060, -0.0074],\n        [-0.0252,  0.0226, -0.0171,  ...,  0.0073,  0.0008, -0.0066],\n        [-0.0028,  0.0059, -0.0142,  ..., -0.0080, -0.0227, -0.0106],\n        ...,\n        [-0.0062,  0.0196, -0.0047,  ..., -0.0280,  0.0125, -0.0021],\n        [ 0.0414, -0.0105,  0.0043,  ..., -0.0030,  0.0097, -0.0326],\n        [ 0.0163,  0.0001,  0.0069,  ...,  0.0080, -0.0060, -0.0326]], dtype=torch.float16), '29.to_out_lora.down.weight': tensor([[-1.7090e-02, -3.2837e-02, -1.3809e-03,  ..., -4.1847e-03,  6.1493e-03, -6.7890e-05],\n        [-8.3694e-03, -1.8295e-02,  1.1749e-02,  ...,  1.5854e-02,  6.0692e-03, -2.6703e-02],\n        [ 1.7395e-02,  7.6866e-03,  9.6970e-03,  ...,  1.9882e-02, -1.3611e-02, -2.9312e-02],\n        ...,\n        [-1.4900e-02, -1.5671e-02, -9.6436e-03,  ..., -2.8290e-02, -7.0343e-03,  1.5053e-02],\n        [ 1.3184e-02,  5.1994e-03, -1.3977e-02,  ...,  1.3634e-02,  1.5228e-02, -1.5900e-02],\n        [ 1.3023e-02,  8.1177e-03,  6.7062e-03,  ...,  1.2779e-02, -5.0049e-03, -4.9591e-03]], dtype=torch.float16), '29.to_out_lora.up.weight': tensor([[ 0.0252, -0.0216, -0.0138,  ...,  0.0034, -0.0314,  0.0128],\n        [ 0.0077, -0.0092, -0.0070,  ..., -0.0309,  0.0227, -0.0548],\n        [ 0.0250,  0.0043, -0.0293,  ..., -0.0108,  0.0241,  0.0218],\n        ...,\n        [-0.0197,  0.0232,  0.0074,  ...,  0.0154,  0.0124, -0.0260],\n        [ 0.0041,  0.0278, -0.0258,  ...,  0.0093, -0.0032, -0.0144],\n        [ 0.0318,  0.0219, -0.0126,  ..., -0.0263,  0.0117,  0.0170]], dtype=torch.float16), '29.to_k_ip.weight': tensor([[-0.0441, -0.0419,  0.0092,  ...,  0.0760,  0.0058,  0.0152],\n        [ 0.0023, -0.0952,  0.0375,  ...,  0.1295,  0.0614, -0.0092],\n        [-0.0532, -0.0547, -0.0304,  ...,  0.0066, -0.0600,  0.0097],\n        ...,\n        [-0.0296,  0.0001,  0.0258,  ..., -0.0125,  0.0092, -0.0119],\n        [ 0.0044, -0.0307,  0.0297,  ...,  0.0597, -0.0182, -0.0834],\n        [ 0.0475,  0.0523,  0.0378,  ..., -0.1425, -0.1231,  0.1145]], dtype=torch.float16), '29.to_v_ip.weight': tensor([[ 0.0130, -0.0206,  0.0003,  ..., -0.0223, -0.0155, -0.0117],\n        [ 0.0087,  0.0067, -0.0287,  ..., -0.0274, -0.0119, -0.0053],\n        [ 0.0249,  0.0022, -0.0012,  ..., -0.0035,  0.0767,  0.0762],\n        ...,\n        [ 0.0167,  0.0198,  0.0194,  ..., -0.0094, -0.0330,  0.0088],\n        [-0.0292,  0.0543,  0.0176,  ...,  0.0240, -0.0252, -0.0535],\n        [-0.0315,  0.0269, -0.0136,  ..., -0.0118, -0.0146, -0.0058]], dtype=torch.float16), '30.to_q_lora.down.weight': tensor([[ 0.0316,  0.0324, -0.0615,  ..., -0.0235, -0.0332, -0.0285],\n        [-0.0233,  0.0401, -0.0380,  ..., -0.0112,  0.0013, -0.0081],\n        [-0.0219, -0.0080,  0.0137,  ...,  0.0323,  0.0574,  0.0634],\n        ...,\n        [ 0.0277,  0.0216, -0.0540,  ..., -0.0215,  0.0184, -0.0242],\n        [-0.0112, -0.0286,  0.0446,  ..., -0.0061,  0.0134,  0.0116],\n        [ 0.0469, -0.0003, -0.0354,  ...,  0.0331, -0.0005,  0.0167]], dtype=torch.float16), '30.to_q_lora.up.weight': tensor([[-0.0122,  0.0053,  0.0106,  ..., -0.0257,  0.0218,  0.0321],\n        [ 0.0079,  0.0583, -0.0039,  ..., -0.0156,  0.0344,  0.0141],\n        [ 0.0307, -0.0122, -0.0086,  ...,  0.0054, -0.0307,  0.0183],\n        ...,\n        [-0.0023, -0.0006, -0.0063,  ...,  0.0213, -0.0155, -0.0251],\n        [-0.0338, -0.0092,  0.0250,  ...,  0.0284, -0.0370, -0.0051],\n        [ 0.0078,  0.0064, -0.0378,  ...,  0.0496, -0.0222, -0.0012]], dtype=torch.float16), '30.to_k_lora.down.weight': tensor([[ 0.0232,  0.0088,  0.0137,  ...,  0.0460, -0.0380, -0.0140],\n        [ 0.0149, -0.0225,  0.0068,  ...,  0.0369,  0.0180,  0.0035],\n        [-0.0097,  0.0109,  0.0435,  ..., -0.0558, -0.0002,  0.0032],\n        ...,\n        [-0.0325, -0.0533,  0.0152,  ...,  0.0214,  0.0342,  0.0572],\n        [-0.0004,  0.0340,  0.0177,  ..., -0.0026, -0.0526, -0.0043],\n        [-0.0304,  0.0040, -0.0529,  ...,  0.0247,  0.0477,  0.0186]], dtype=torch.float16), '30.to_k_lora.up.weight': tensor([[ 0.0102, -0.0131, -0.0124,  ..., -0.0021, -0.0115,  0.0124],\n        [ 0.0227, -0.0026,  0.0433,  ..., -0.0295, -0.0188, -0.0044],\n        [ 0.0046, -0.0187,  0.0102,  ..., -0.0157,  0.0073,  0.0388],\n        ...,\n        [ 0.0127, -0.0192,  0.0238,  ...,  0.0132,  0.0176,  0.0023],\n        [ 0.0279,  0.0420, -0.0372,  ...,  0.0393,  0.0396,  0.0216],\n        [-0.0244, -0.0277, -0.0200,  ...,  0.0034, -0.0067, -0.0036]], dtype=torch.float16), '30.to_v_lora.down.weight': tensor([[-1.4969e-02,  4.0283e-02,  1.3828e-05,  ..., -2.6665e-03,  7.4280e-02, -3.3722e-02],\n        [-8.4686e-03,  1.6603e-03, -2.1072e-02,  ..., -1.5244e-02,  4.2664e-02,  1.8829e-02],\n        [ 3.2135e-02,  8.2016e-03, -1.8845e-02,  ..., -3.0930e-02, -5.4932e-02, -1.9028e-02],\n        ...,\n        [ 3.3417e-02,  1.6586e-02,  2.3193e-02,  ..., -2.0996e-02,  1.6815e-02, -7.4585e-02],\n        [ 3.6285e-02, -8.5510e-02, -4.1077e-02,  ..., -2.4246e-02, -9.9945e-03,  3.2532e-02],\n        [-5.3520e-03, -1.4410e-03, -1.8204e-02,  ...,  2.0981e-02, -9.5367e-03, -1.6983e-02]], dtype=torch.float16), '30.to_v_lora.up.weight': tensor([[ 0.0190,  0.0376, -0.0367,  ...,  0.0098, -0.0392, -0.0243],\n        [ 0.0575,  0.0259, -0.0006,  ..., -0.0076,  0.0296, -0.0238],\n        [ 0.0258,  0.0030,  0.0029,  ...,  0.0025, -0.0458, -0.0006],\n        ...,\n        [ 0.0296,  0.0016, -0.0030,  ..., -0.0096, -0.0322,  0.0568],\n        [ 0.0124,  0.0308, -0.0264,  ..., -0.0596,  0.0056, -0.0025],\n        [ 0.0302, -0.0407,  0.0059,  ...,  0.0053, -0.0202,  0.0122]], dtype=torch.float16), '30.to_out_lora.down.weight': tensor([[ 0.0061,  0.0521, -0.0174,  ..., -0.0188, -0.0831, -0.0355],\n        [-0.0251, -0.0253, -0.0049,  ..., -0.0486,  0.0086,  0.0154],\n        [ 0.0434, -0.0019, -0.0280,  ...,  0.0334,  0.0135,  0.0076],\n        ...,\n        [-0.0063,  0.0023,  0.0386,  ..., -0.0032,  0.0326,  0.0469],\n        [-0.0428,  0.0206,  0.0440,  ..., -0.1021, -0.0104,  0.0112],\n        [-0.0296,  0.0316,  0.0138,  ..., -0.0183, -0.0468, -0.0168]], dtype=torch.float16), '30.to_out_lora.up.weight': tensor([[-0.0073, -0.0680,  0.0253,  ..., -0.0345,  0.0790,  0.0191],\n        [ 0.0210, -0.0059,  0.0226,  ...,  0.0055, -0.0410, -0.0365],\n        [ 0.0155, -0.0303, -0.0597,  ..., -0.0028, -0.0518,  0.0206],\n        ...,\n        [ 0.0390,  0.0822,  0.0956,  ..., -0.0121, -0.0020,  0.0082],\n        [-0.0212, -0.0058, -0.0145,  ...,  0.0709,  0.0287,  0.0121],\n        [-0.0360,  0.0591, -0.0493,  ..., -0.0440,  0.0015,  0.0625]], dtype=torch.float16), '31.to_q_lora.down.weight': tensor([[ 0.0208, -0.0194,  0.0135,  ..., -0.0457, -0.0275, -0.0258],\n        [-0.0187,  0.0101,  0.0047,  ...,  0.0016,  0.0153, -0.0005],\n        [-0.0070,  0.0113,  0.0500,  ..., -0.0069, -0.0384, -0.0123],\n        ...,\n        [ 0.0168, -0.0129, -0.0019,  ...,  0.0042, -0.0057,  0.0265],\n        [-0.0253,  0.0160,  0.0005,  ...,  0.0048,  0.0112, -0.0584],\n        [-0.0088, -0.0155,  0.0052,  ..., -0.0306, -0.0007, -0.0747]], dtype=torch.float16), '31.to_q_lora.up.weight': tensor([[ 0.0069, -0.0114,  0.0467,  ..., -0.0030, -0.0005,  0.0429],\n        [ 0.0059,  0.0077, -0.0105,  ...,  0.0450, -0.0035,  0.0206],\n        [ 0.0166, -0.0377, -0.0334,  ..., -0.0446, -0.0215,  0.0027],\n        ...,\n        [-0.0743, -0.0023,  0.0207,  ...,  0.0203, -0.0308, -0.0828],\n        [-0.0189, -0.0177,  0.0281,  ..., -0.0208,  0.0150,  0.0324],\n        [ 0.0047, -0.0127, -0.0131,  ..., -0.0381, -0.0324,  0.0323]], dtype=torch.float16), '31.to_k_lora.down.weight': tensor([[-0.0146,  0.0450, -0.0230,  ..., -0.0078, -0.0648, -0.0323],\n        [ 0.0805, -0.0456, -0.0308,  ...,  0.0092, -0.0133, -0.0430],\n        [-0.0150, -0.0246, -0.0231,  ..., -0.0182,  0.0540, -0.0053],\n        ...,\n        [ 0.0065,  0.0035, -0.0402,  ...,  0.0574, -0.0556,  0.0374],\n        [-0.0354,  0.0100, -0.0275,  ..., -0.0035, -0.0212,  0.0159],\n        [-0.0851, -0.0264, -0.0223,  ...,  0.0272,  0.0479,  0.0502]], dtype=torch.float16), '31.to_k_lora.up.weight': tensor([[-0.0706, -0.0347,  0.0592,  ..., -0.0358, -0.0094, -0.0143],\n        [-0.0121, -0.0789,  0.0913,  ..., -0.0283, -0.0693,  0.0118],\n        [ 0.0894,  0.0361, -0.0095,  ...,  0.0409,  0.0145, -0.0218],\n        ...,\n        [-0.0039,  0.0064, -0.0399,  ..., -0.0381, -0.0363, -0.0668],\n        [ 0.0453,  0.0495,  0.0252,  ..., -0.0039,  0.0028,  0.0190],\n        [ 0.0484, -0.0098, -0.0850,  ..., -0.0160,  0.0759,  0.0077]], dtype=torch.float16), '31.to_v_lora.down.weight': tensor([[ 0.0083, -0.0222,  0.0027,  ..., -0.0130,  0.0019, -0.0265],\n        [ 0.0163, -0.0045, -0.0605,  ...,  0.0014, -0.0017, -0.0229],\n        [-0.0030, -0.0059, -0.0309,  ..., -0.0199, -0.0636,  0.0432],\n        ...,\n        [ 0.0079,  0.0235,  0.0162,  ...,  0.0117,  0.0027,  0.0516],\n        [ 0.0559,  0.0740,  0.0221,  ..., -0.0158,  0.0148,  0.0044],\n        [ 0.0275, -0.0196, -0.0178,  ..., -0.0285, -0.0625,  0.0179]], dtype=torch.float16), '31.to_v_lora.up.weight': tensor([[ 0.0419,  0.0218,  0.0022,  ..., -0.0328,  0.0112, -0.0506],\n        [ 0.0101, -0.0071, -0.0379,  ...,  0.0291, -0.0058,  0.0107],\n        [ 0.0117,  0.0198, -0.0271,  ..., -0.0016,  0.0225,  0.0233],\n        ...,\n        [ 0.0203,  0.0037, -0.0452,  ...,  0.0179, -0.0094, -0.0230],\n        [ 0.0414,  0.0260,  0.0065,  ...,  0.0022,  0.0145, -0.0369],\n        [-0.0486,  0.0873, -0.0355,  ..., -0.0515, -0.0012, -0.0127]], dtype=torch.float16), '31.to_out_lora.down.weight': tensor([[-0.0070,  0.0296,  0.0073,  ..., -0.0003, -0.0012, -0.0081],\n        [-0.0233, -0.0076,  0.0025,  ...,  0.0105,  0.0256, -0.0375],\n        [ 0.0172,  0.0568, -0.0243,  ..., -0.0433,  0.0066, -0.0700],\n        ...,\n        [ 0.0132, -0.0240,  0.0129,  ..., -0.0522,  0.0804, -0.0233],\n        [ 0.0114,  0.0236, -0.0640,  ..., -0.0231,  0.0026,  0.0458],\n        [ 0.0374, -0.0029, -0.0574,  ...,  0.0020, -0.0343,  0.0119]], dtype=torch.float16), '31.to_out_lora.up.weight': tensor([[-0.0780,  0.0345, -0.0841,  ..., -0.0178,  0.0144,  0.0300],\n        [ 0.0507,  0.0289,  0.0127,  ..., -0.0489, -0.0277, -0.0297],\n        [ 0.0022,  0.0027,  0.0120,  ...,  0.0003, -0.0123,  0.0334],\n        ...,\n        [-0.0435, -0.0129, -0.0224,  ...,  0.0444,  0.0199, -0.0397],\n        [-0.0134,  0.0269,  0.0223,  ...,  0.0140, -0.0728,  0.0269],\n        [ 0.0129, -0.0266, -0.0266,  ..., -0.0012,  0.0427,  0.0534]], dtype=torch.float16), '31.to_k_ip.weight': tensor([[ 0.0117, -0.0105, -0.0403,  ...,  0.0399, -0.0995,  0.0184],\n        [ 0.0714, -0.0170,  0.0360,  ..., -0.0345,  0.0458,  0.0044],\n        [-0.0070, -0.0508, -0.0340,  ..., -0.0429, -0.0795,  0.0382],\n        ...,\n        [-0.0045, -0.0867, -0.0748,  ..., -0.0863, -0.0276,  0.0065],\n        [-0.0663,  0.0357, -0.0175,  ...,  0.0252,  0.0253, -0.0147],\n        [ 0.0314,  0.0681, -0.0164,  ..., -0.0091,  0.0026,  0.0118]], dtype=torch.float16), '31.to_v_ip.weight': tensor([[-0.0550, -0.1074, -0.0609,  ..., -0.0365, -0.0549, -0.0112],\n        [-0.0108, -0.0092,  0.0294,  ...,  0.0155,  0.0335,  0.0136],\n        [ 0.0311, -0.0522,  0.0442,  ..., -0.0022,  0.0081,  0.0778],\n        ...,\n        [ 0.0018,  0.0224,  0.0701,  ...,  0.0236, -0.0257, -0.0486],\n        [ 0.0560, -0.0087, -0.0007,  ...,  0.0106,  0.0070, -0.0557],\n        [ 0.0225,  0.0718, -0.0681,  ...,  0.0032, -0.0220,  0.0679]], dtype=torch.float16)}, 'faceidplusv2': True}"]}, {"id": 10, "type": "Anything Everywhere", "pos": [4800, 60], "size": {"0": 240, "1": 60}, "flags": {}, "order": 18, "mode": 0, "inputs": [{"name": "CLIP_VISION", "type": "*", "link": 7, "color_on": "#A8DADC"}], "title": "Clip Vision Everywhere", "properties": {"group_restricted": false, "color_restricted": false, "Node name for S&R": "Anything Everywhere"}, "widgets_values": ["<comfy.clip_vision.ClipVisionModel object at 0x000001E2112836D0>"]}, {"id": 8, "type": "IPAdapterModelLoader", "pos": [4320, -60], "size": {"0": 315, "1": 58}, "flags": {}, "order": 0, "mode": 0, "outputs": [{"name": "IPADAPTER", "type": "IPADAPTER", "links": [6], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "IPAdapterModelLoader"}, "widgets_values": ["ip-adapter-faceid-plusv2_sd15.bin"]}, {"id": 5, "type": "CLIPVisionLoader", "pos": [4320, 60], "size": {"0": 315, "1": 58}, "flags": {}, "order": 1, "mode": 0, "outputs": [{"name": "CLIP_VISION", "type": "CLIP_VISION", "links": [7], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "CLIPVisionLoader"}, "widgets_values": ["CLIP-ViT-H-14-laion2B-s32B-b79K.safetensors"]}, {"id": 6, "type": "IPAdapterInsightFaceLoader", "pos": [4320, 180], "size": {"0": 315, "1": 58}, "flags": {}, "order": 2, "mode": 0, "outputs": [{"name": "INSIGHTFACE", "type": "INSIGHTFACE", "links": [8], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "IPAdapterInsightFaceLoader"}, "widgets_values": ["CUDA"]}, {"id": 13, "type": "PreviewImage", "pos": [5280, 120], "size": [240, 240], "flags": {}, "order": 27, "mode": 0, "inputs": [{"name": "images", "type": "IMAGE", "link": 10}], "properties": {"Node name for S&R": "PreviewImage"}}, {"id": 21, "type": "PreviewImage", "pos": [6240, 120], "size": [240, 240], "flags": {}, "order": 29, "mode": 0, "inputs": [{"name": "images", "type": "IMAGE", "link": 17}], "properties": {"Node name for S&R": "PreviewImage"}}, {"id": 17, "type": "PreviewImage", "pos": [5760, 120], "size": [240, 240], "flags": {}, "order": 28, "mode": 0, "inputs": [{"name": "images", "type": "IMAGE", "link": 14}], "properties": {"Node name for S&R": "PreviewImage"}}, {"id": 2, "type": "IPAdapterFaceID", "pos": [5280, -300], "size": {"0": 315, "1": 322}, "flags": {}, "order": 30, "mode": 0, "inputs": [{"name": "model", "type": "MODEL", "link": 2}, {"name": "ipadapter", "type": "IPADAPTER", "link": null}, {"name": "image", "type": "IMAGE", "link": 9}, {"name": "image_negative", "type": "IMAGE", "link": null}, {"name": "attn_mask", "type": "MASK", "link": 11}, {"name": "clip_vision", "type": "CLIP_VISION", "link": null}, {"name": "insightface", "type": "INSIGHTFACE", "link": null}], "outputs": [{"name": "MODEL", "type": "MODEL", "links": [18], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "IPAdapterFaceID"}, "widgets_values": [1, 1, "linear", "concat", 0, 1, "V only"]}, {"id": 15, "type": "IPAdapterFaceID", "pos": [5760, -300], "size": {"0": 315, "1": 322}, "flags": {}, "order": 32, "mode": 0, "inputs": [{"name": "model", "type": "MODEL", "link": 18}, {"name": "ipadapter", "type": "IPADAPTER", "link": null}, {"name": "image", "type": "IMAGE", "link": 12}, {"name": "image_negative", "type": "IMAGE", "link": null}, {"name": "attn_mask", "type": "MASK", "link": 13}, {"name": "clip_vision", "type": "CLIP_VISION", "link": null}, {"name": "insightface", "type": "INSIGHTFACE", "link": null}], "outputs": [{"name": "MODEL", "type": "MODEL", "links": [19], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "IPAdapterFaceID"}, "widgets_values": [1, 1, "linear", "concat", 0, 1, "V only"]}, {"id": 14, "type": "LoadImageMask", "pos": [5280, 480], "size": [300, 300], "flags": {}, "order": 3, "mode": 0, "outputs": [{"name": "MASK", "type": "MASK", "links": [11], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "LoadImageMask"}, "widgets_values": ["left 3.png", "alpha", "image"]}, {"id": 18, "type": "LoadImageMask", "pos": [5760, 480], "size": [300, 300], "flags": {}, "order": 4, "mode": 0, "outputs": [{"name": "MASK", "type": "MASK", "links": [13], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "LoadImageMask"}, "widgets_values": ["middle 4.png", "alpha", "image"]}, {"id": 22, "type": "LoadImageMask", "pos": [6240, 480], "size": [300, 300], "flags": {}, "order": 5, "mode": 0, "outputs": [{"name": "MASK", "type": "MASK", "links": [16], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "LoadImageMask"}, "widgets_values": ["right 3.png", "alpha", "image"]}, {"id": 25, "type": "CR LoRA Stack", "pos": [6660, -300], "size": {"0": 315, "1": 342}, "flags": {}, "order": 6, "mode": 0, "inputs": [{"name": "lora_stack", "type": "LORA_STACK", "link": null}], "outputs": [{"name": "LORA_STACK", "type": "LORA_STACK", "links": [21], "shape": 3, "slot_index": 0}, {"name": "show_help", "type": "STRING", "links": null, "shape": 3}], "properties": {"Node name for S&R": "CR LoRA Stack"}, "widgets_values": ["Off", "skin_tone_slider_v1.safetensors", 2, 2, "Off", "None", 1, 1, "Off", "None", 1, 1]}, {"id": 29, "type": "Prompts Everywhere", "pos": [4800, 660], "size": {"0": 210, "1": 46}, "flags": {}, "order": 22, "mode": 0, "inputs": [{"name": "CONDITIONING", "type": "*", "link": 23, "color_on": "#FFA931"}, {"name": "CONDITIONING", "type": "*", "link": 24, "color_on": "#FFA931"}], "properties": {"group_restricted": false, "color_restricted": false, "Node name for S&R": "Prompts Everywhere"}}, {"id": 26, "type": "Anything Everywhere", "pos": [4800, 300], "size": {"0": 240, "1": 60}, "flags": {}, "order": 38, "mode": 0, "inputs": [{"name": "MODEL", "type": "*", "link": 22, "color_on": "#B39DDB", "slot_index": 0}], "title": "Model Everywhere", "properties": {"group_restricted": false, "color_restricted": false, "Node name for S&R": "Anything Everywhere"}, "widgets_values": ["<comfy.model_patcher.ModelPatcher object at 0x000001E20F831B90>"]}, {"id": 30, "type": "VAELoader", "pos": [4260, 1080], "size": {"0": 315, "1": 58}, "flags": {}, "order": 7, "mode": 0, "outputs": [{"name": "VAE", "type": "VAE", "links": [25], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "VAELoader"}, "widgets_values": ["AnimateEveryone\\diffusion_pytorch_model.bin"]}, {"id": 32, "type": "Anything Everywhere", "pos": [4800, 1080], "size": {"0": 240, "1": 60}, "flags": {}, "order": 20, "mode": 0, "inputs": [{"name": "VAE", "type": "*", "link": 25, "slot_index": 0, "color_on": "#FF6E6E"}], "title": "VAE Everywhere", "properties": {"group_restricted": false, "color_restricted": false, "Node name for S&R": "Anything Everywhere"}, "widgets_values": ["<comfy.sd.VAE object at 0x000001E4BD2A35D0>"]}, {"id": 34, "type": "EmptyLatentImage", "pos": [4260, 1260], "size": {"0": 315, "1": 106}, "flags": {}, "order": 8, "mode": 0, "outputs": [{"name": "LATENT", "type": "LATENT", "links": [26], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "EmptyLatentImage"}, "widgets_values": [768, 512, 1]}, {"id": 28, "type": "GR Prompt Selector", "pos": [4260, 480], "size": {"0": 400, "1": 489.9999694824219}, "flags": {}, "order": 9, "mode": 0, "inputs": [{"name": "clip", "type": "CLIP", "link": null}], "outputs": [{"name": "positive", "type": "CONDITIONING", "links": [23], "shape": 3, "slot_index": 0}, {"name": "negative", "type": "CONDITIONING", "links": [24], "shape": 3, "slot_index": 1}, {"name": "prompts", "type": "STRING", "links": null, "shape": 3}], "properties": {"Node name for S&R": "GR Prompt Selector"}, "widgets_values": [",(((3 women))), standing, outside, white top, black coat", "", "", "", "", "", ",skinny,", "nsfw, blurry", 1]}, {"id": 11, "type": "Anything Everywhere", "pos": [4800, 180], "size": {"0": 240, "1": 60}, "flags": {}, "order": 19, "mode": 0, "inputs": [{"name": "INSIGHTFACE", "type": "*", "link": 8, "color_on": ""}], "title": "Insightface Everywhere", "properties": {"group_restricted": false, "color_restricted": false, "Node name for S&R": "Anything Everywhere"}, "widgets_values": ["<insightface.app.face_analysis.FaceAnalysis object at 0x000001E2111B7550>"]}, {"id": 38, "type": "Anything Everywhere", "pos": [4800, 780], "size": {"0": 240, "1": 60}, "flags": {}, "order": 24, "mode": 0, "inputs": [{"name": "CLIP", "type": "*", "link": 29, "color_on": "#FFD500"}], "title": "Clip Everywhere", "properties": {"group_restricted": false, "color_restricted": false, "Node name for S&R": "Anything Everywhere"}, "widgets_values": ["<comfy.sd.CLIP object at 0x000001E20E53D650>"]}, {"id": 27, "type": "Seed Everywhere", "pos": [4800, 480], "size": {"0": 300, "1": 120}, "flags": {}, "order": 10, "mode": 0, "outputs": [{"name": "INT", "type": "INT", "links": null, "shape": 3}], "properties": {"group_restricted": false, "color_restricted": false, "Node name for S&R": "Seed Everywhere"}, "widgets_values": [1056660035176881, "randomize", "930994575722780"]}, {"id": 3, "type": "CheckpointLoaderSimple", "pos": [4320, -240], "size": {"0": 315, "1": 98}, "flags": {}, "order": 11, "mode": 0, "outputs": [{"name": "MODEL", "type": "MODEL", "links": [1], "shape": 3, "slot_index": 0}, {"name": "CLIP", "type": "CLIP", "links": [29], "shape": 3, "slot_index": 1}, {"name": "VAE", "type": "VAE", "links": null, "shape": 3}], "properties": {"Node name for S&R": "CheckpointLoaderSimple"}, "widgets_values": ["Juggernaut\\juggernaut_reborn.safetensors"]}, {"id": 33, "type": "KSampler", "pos": [7080, -300], "size": [300, 480], "flags": {}, "order": 12, "mode": 0, "inputs": [{"name": "model", "type": "MODEL", "link": null}, {"name": "positive", "type": "CONDITIONING", "link": null}, {"name": "negative", "type": "CONDITIONING", "link": null}, {"name": "latent_image", "type": "LATENT", "link": null}], "outputs": [{"name": "LATENT", "type": "LATENT", "links": [30], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "KSampler"}, "widgets_values": [125512508779993, "randomize", 50, 10, "euler", "normal", 1]}, {"id": 35, "type": "Anything Everywhere", "pos": [4800, 1260], "size": {"0": 240, "1": 60}, "flags": {}, "order": 21, "mode": 0, "inputs": [{"name": "LATENT", "type": "*", "link": 26, "slot_index": 0, "color_on": "#FF9CF9"}], "title": "Empty Latent Everywhere", "properties": {"group_restricted": false, "color_restricted": false, "Node name for S&R": "Anything Everywhere"}, "widgets_values": ["Latent shape torch.Size([1, 4, 64, 96])"]}, {"id": 42, "type": "Anything Everywhere", "pos": [4800, 1440], "size": {"0": 240, "1": 60}, "flags": {}, "order": 26, "mode": 0, "inputs": [{"name": "UPSCALE_MODEL", "type": "*", "link": 34, "slot_index": 0, "color_on": ""}], "title": "Upscale Model Everywhere", "properties": {"group_restricted": false, "color_restricted": false, "Node name for S&R": "Anything Everywhere"}, "widgets_values": ["RRDBNet(\n  (model): Sequential(\n    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (1): Identity + \n    |Sequential(\n    |  (0): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (1): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (2): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (3): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (4): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (5): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (6): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (7): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (8): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (9): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (10): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (11): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (12): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (13): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (14): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (15): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (16): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (17): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (18): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (19): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (20): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (21): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (22): RRDB(\n    |    (RDB1): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB2): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |    (RDB3): ResidualDenseBlock_5C(\n    |      (conv1): Sequential(\n    |        (0): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv2): Sequential(\n    |        (0): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv3): Sequential(\n    |        (0): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv4): Sequential(\n    |        (0): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |        (1): LeakyReLU(negative_slope=0.2, inplace=True)\n    |      )\n    |      (conv5): Sequential(\n    |        (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |      )\n    |    )\n    |  )\n    |  (23): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    |)\n    (2): Upsample(scale_factor=2.0, mode='nearest')\n    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (4): LeakyReLU(negative_slope=0.2, inplace=True)\n    (5): Upsample(scale_factor=2.0, mode='nearest')\n    (6): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (7): LeakyReLU(negative_slope=0.2, inplace=True)\n    (8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (9): LeakyReLU(negative_slope=0.2, inplace=True)\n    (10): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n  )\n)"]}, {"id": 43, "type": "UpscaleModelLoader", "pos": [4260, 1440], "size": {"0": 315, "1": 58}, "flags": {}, "order": 13, "mode": 0, "outputs": [{"name": "UPSCALE_MODEL", "type": "UPSCALE_MODEL", "links": [34], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "UpscaleModelLoader"}, "widgets_values": ["RealESRGAN_x4.pth"]}, {"id": 40, "type": "KSampler", "pos": [7920, -300], "size": {"0": 300, "1": 480}, "flags": {}, "order": 31, "mode": 0, "inputs": [{"name": "model", "type": "MODEL", "link": null}, {"name": "positive", "type": "CONDITIONING", "link": null}, {"name": "negative", "type": "CONDITIONING", "link": null}, {"name": "latent_image", "type": "LATENT", "link": 31}], "outputs": [{"name": "LATENT", "type": "LATENT", "links": [32], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "KSampler"}, "widgets_values": [91775796555809, "randomize", 50, 8, "euler", "normal", 0.5]}, {"id": 45, "type": "VAEEncode", "pos": [9180, -420], "size": {"0": 210, "1": 46}, "flags": {}, "order": 37, "mode": 0, "inputs": [{"name": "pixels", "type": "IMAGE", "link": 35}, {"name": "vae", "type": "VAE", "link": null}], "outputs": [{"name": "LATENT", "type": "LATENT", "links": [36], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "VAEEncode"}}, {"id": 36, "type": "VAEDecode", "pos": [8400, -360], "size": {"0": 210, "1": 46}, "flags": {}, "order": 33, "mode": 0, "inputs": [{"name": "samples", "type": "LATENT", "link": 32, "slot_index": 0}, {"name": "vae", "type": "VAE", "link": null}], "outputs": [{"name": "IMAGE", "type": "IMAGE", "links": [33], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "VAEDecode"}}, {"id": 37, "type": "PreviewImage", "pos": [9960, -420], "size": [240, 240], "flags": {}, "order": 41, "mode": 0, "inputs": [{"name": "images", "type": "IMAGE", "link": 38}], "properties": {"Node name for S&R": "PreviewImage"}}, {"id": 44, "type": "KSampler", "pos": [9240, -240], "size": {"0": 300, "1": 480}, "flags": {}, "order": 39, "mode": 0, "inputs": [{"name": "model", "type": "MODEL", "link": null}, {"name": "positive", "type": "CONDITIONING", "link": null}, {"name": "negative", "type": "CONDITIONING", "link": null}, {"name": "latent_image", "type": "LATENT", "link": 36}], "outputs": [{"name": "LATENT", "type": "LATENT", "links": [37], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "KSampler"}, "widgets_values": [519227386807816, "randomize", 50, 5, "euler", "normal", 0.2]}, {"id": 47, "type": "Image Comparer (rgthree)", "pos": {"0": 9960, "1": -60, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0}, "size": [1140, 540], "flags": {}, "order": 42, "mode": 0, "inputs": [{"name": "image_a", "type": "IMAGE", "link": 42, "dir": 3}, {"name": "image_b", "type": "IMAGE", "link": 41, "dir": 3}], "outputs": [], "properties": {"comparer_mode": "Slide"}, "widgets_values": [["/view?filename=rgthree.compare._temp_krgzt_00007_.png&type=temp&subfolder=&rand=0.3813708940269229", "/view?filename=rgthree.compare._temp_krgzt_00008_.png&type=temp&subfolder=&rand=0.05611420278314272"]]}, {"id": 46, "type": "VAEDecode", "pos": [9600, -360], "size": {"0": 210, "1": 46}, "flags": {}, "order": 40, "mode": 0, "inputs": [{"name": "samples", "type": "LATENT", "link": 37, "slot_index": 0}, {"name": "vae", "type": "VAE", "link": null}], "outputs": [{"name": "IMAGE", "type": "IMAGE", "links": [38, 41], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "VAEDecode"}}, {"id": 39, "type": "KSampler", "pos": [7560, -300], "size": {"0": 300, "1": 480}, "flags": {}, "order": 25, "mode": 0, "inputs": [{"name": "model", "type": "MODEL", "link": null}, {"name": "positive", "type": "CONDITIONING", "link": null}, {"name": "negative", "type": "CONDITIONING", "link": null}, {"name": "latent_image", "type": "LATENT", "link": 30}], "outputs": [{"name": "LATENT", "type": "LATENT", "links": [31], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "KSampler"}, "widgets_values": [950626952914904, "randomize", 50, 8, "euler", "normal", 0.7000000000000001]}, {"id": 19, "type": "IPAdapterFaceID", "pos": [6240, -300], "size": {"0": 315, "1": 322}, "flags": {}, "order": 34, "mode": 0, "inputs": [{"name": "model", "type": "MODEL", "link": 19}, {"name": "ipadapter", "type": "IPADAPTER", "link": null}, {"name": "image", "type": "IMAGE", "link": 15}, {"name": "image_negative", "type": "IMAGE", "link": null}, {"name": "attn_mask", "type": "MASK", "link": 16}, {"name": "clip_vision", "type": "CLIP_VISION", "link": null}, {"name": "insightface", "type": "INSIGHTFACE", "link": null}], "outputs": [{"name": "MODEL", "type": "MODEL", "links": [48], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "IPAdapterFaceID"}, "widgets_values": [1, 1, "linear", "concat", 0, 1, "V only"]}, {"id": 41, "type": "UltimateSDUpscale", "pos": [8760, -300], "size": [300, 840], "flags": {}, "order": 35, "mode": 0, "inputs": [{"name": "image", "type": "IMAGE", "link": 33}, {"name": "model", "type": "MODEL", "link": null}, {"name": "positive", "type": "CONDITIONING", "link": null}, {"name": "negative", "type": "CONDITIONING", "link": null}, {"name": "vae", "type": "VAE", "link": null}, {"name": "upscale_model", "type": "UPSCALE_MODEL", "link": null}], "outputs": [{"name": "IMAGE", "type": "IMAGE", "links": [35, 42], "shape": 3, "slot_index": 0}], "properties": {"Node name for S&R": "UltimateSDUpscale"}, "widgets_values": [4, 1021561766371649, "randomize", 20, 8, "euler", "normal", 0.2, "Linear", 512, 512, 8, 32, "None", 1, 64, 8, 16, true, false]}, {"id": 23, "type": "CR Apply LoRA Stack", "pos": [6660, -480], "size": {"0": 254.40000915527344, "1": 66}, "flags": {}, "order": 36, "mode": 0, "inputs": [{"name": "model", "type": "MODEL", "link": 48}, {"name": "clip", "type": "CLIP", "link": null}, {"name": "lora_stack", "type": "LORA_STACK", "link": 21}], "outputs": [{"name": "MODEL", "type": "MODEL", "links": [22], "shape": 3}, {"name": "CLIP", "type": "CLIP", "links": null, "shape": 3}, {"name": "show_help", "type": "STRING", "links": null, "shape": 3}], "properties": {"Node name for S&R": "CR Apply LoRA Stack"}}, {"id": 12, "type": "LoadImagesFromDir //Inspire", "pos": [5280, -540], "size": {"0": 315, "1": 170}, "flags": {}, "order": 14, "mode": 0, "outputs": [{"name": "IMAGE", "type": "IMAGE", "links": [9, 10], "shape": 3, "slot_index": 0}, {"name": "MASK", "type": "MASK", "links": null, "shape": 3}, {"name": "INT", "type": "INT", "links": null, "shape": 3}], "properties": {"Node name for S&R": "LoadImagesFromDir //Inspire"}, "widgets_values": ["", 0, 0, false]}, {"id": 16, "type": "LoadImagesFromDir //Inspire", "pos": [5760, -540], "size": {"0": 315, "1": 170}, "flags": {}, "order": 15, "mode": 0, "outputs": [{"name": "IMAGE", "type": "IMAGE", "links": [12, 14], "shape": 3, "slot_index": 0}, {"name": "MASK", "type": "MASK", "links": null, "shape": 3}, {"name": "INT", "type": "INT", "links": null, "shape": 3}], "properties": {"Node name for S&R": "LoadImagesFromDir //Inspire"}, "widgets_values": ["", 0, 0, false]}, {"id": 20, "type": "LoadImagesFromDir //Inspire", "pos": [6240, -540], "size": {"0": 315, "1": 170}, "flags": {}, "order": 16, "mode": 0, "outputs": [{"name": "IMAGE", "type": "IMAGE", "links": [15, 17], "shape": 3, "slot_index": 0}, {"name": "MASK", "type": "MASK", "links": null, "shape": 3}, {"name": "INT", "type": "INT", "links": null, "shape": 3}], "properties": {"Node name for S&R": "LoadImagesFromDir //Inspire"}, "widgets_values": ["", 15, 0, false]}], "links": [[1, 3, 0, 4, 0, "MODEL"], [2, 4, 0, 2, 0, "MODEL"], [6, 8, 0, 9, 0, "*"], [7, 5, 0, 10, 0, "*"], [8, 6, 0, 11, 0, "*"], [9, 12, 0, 2, 2, "IMAGE"], [10, 12, 0, 13, 0, "IMAGE"], [11, 14, 0, 2, 4, "MASK"], [12, 16, 0, 15, 2, "IMAGE"], [13, 18, 0, 15, 4, "MASK"], [14, 16, 0, 17, 0, "IMAGE"], [15, 20, 0, 19, 2, "IMAGE"], [16, 22, 0, 19, 4, "MASK"], [17, 20, 0, 21, 0, "IMAGE"], [18, 2, 0, 15, 0, "MODEL"], [19, 15, 0, 19, 0, "MODEL"], [21, 25, 0, 23, 2, "LORA_STACK"], [22, 23, 0, 26, 0, "*"], [23, 28, 0, 29, 0, "*"], [24, 28, 1, 29, 1, "*"], [25, 30, 0, 32, 0, "*"], [26, 34, 0, 35, 0, "*"], [29, 3, 1, 38, 0, "*"], [30, 33, 0, 39, 3, "LATENT"], [31, 39, 0, 40, 3, "LATENT"], [32, 40, 0, 36, 0, "LATENT"], [33, 36, 0, 41, 0, "IMAGE"], [34, 43, 0, 42, 0, "*"], [35, 41, 0, 45, 0, "IMAGE"], [36, 45, 0, 44, 3, "LATENT"], [37, 44, 0, 46, 0, "LATENT"], [38, 46, 0, 37, 0, "IMAGE"], [41, 46, 0, 47, 1, "IMAGE"], [42, 41, 0, 47, 0, "IMAGE"], [48, 19, 0, 23, 0, "MODEL"]], "groups": [], "config": {}, "extra": {}, "version": 0.4}